// +build !noasm !appengine
// Code generated by asm2asm, DO NOT EDIT.

#include "go_asm.h"
#include "textflag.h"

TEXT Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___(SB), NOSPLIT, $0
_lzero:
	BYTE $0x55               // pushq        %rbp
	WORD $0x8948; BYTE $0xe5 // movq         %rsp, %rbp
	CMPQ SI, $128
	JB   LBB0_4
	LONG $0xc0eff9c5         // vpxor        %xmm0, %xmm0, %xmm0
	LONG $0xc976f5c5         // vpcmpeqd     %ymm1, %ymm1, %ymm1

LBB0_2:
	LONG $0x576ffec5; BYTE $0x20 // vmovdqu      $32(%rdi), %ymm2
	LONG $0x17ebedc5             // vpor         (%rdi), %ymm2, %ymm2
	LONG $0x5f6ffec5; BYTE $0x60 // vmovdqu      $96(%rdi), %ymm3
	LONG $0x5febe5c5; BYTE $0x40 // vpor         $64(%rdi), %ymm3, %ymm3
	LONG $0xd074edc5             // vpcmpeqb     %ymm0, %ymm2, %ymm2
	LONG $0xd874e5c5             // vpcmpeqb     %ymm0, %ymm3, %ymm3
	LONG $0xd9efe5c5             // vpxor        %ymm1, %ymm3, %ymm3
	LONG $0x177de2c4; BYTE $0xd3 // vptest       %ymm3, %ymm2
	JAE  LBB0_14
	SUBQ $-128, DI
	ADDQ $-128, SI
	CMPQ SI, $127
	JA   LBB0_2

LBB0_4:
	CMPQ SI, $32
	JB   LBB0_8
	LONG $0xc0eff9c5 // vpxor        %xmm0, %xmm0, %xmm0
	LONG $0xc976f5c5 // vpcmpeqd     %ymm1, %ymm1, %ymm1

LBB0_6:
	LONG $0x1774fdc5             // vpcmpeqb     (%rdi), %ymm0, %ymm2
	LONG $0x177de2c4; BYTE $0xd1 // vptest       %ymm1, %ymm2
	JAE  LBB0_14
	ADDQ $32, DI
	ADDQ $-32, SI
	CMPQ SI, $31
	JA   LBB0_6

LBB0_8:
	CMPQ SI, $8
	JB   LBB0_11

LBB0_9:
	CMPQ 0(DI), $0
	JNE  LBB0_14
	ADDQ $8, DI
	ADDQ $-8, SI
	CMPQ SI, $7
	JA   LBB0_9

LBB0_11:
	CMPQ SI, $4
	JB   LBB0_18
	MOVL $1, AX
	CMPL 0(DI), $0
	JNE  LBB0_13
	ADDQ $4, DI
	ADDQ $-4, SI

LBB0_18:
	CMPQ SI, $2
	JB   LBB0_21
	MOVL $1, AX
	CMPW 0(DI), $0
	JNE  LBB0_13
	ADDQ $2, DI
	ADDQ $-2, SI

LBB0_21:
	XORL  AX, AX
	TESTQ SI, SI
	JE    LBB0_13
	CMPB  0(DI), $0
	SETNE AX
	BYTE  $0x5d               // popq         %rbp
	WORD  $0xf8c5; BYTE $0x77 // vzeroupper
	RET

LBB0_14:
	MOVL $1, AX
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	RET

LBB0_13:
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	RET

LCPI1_0:
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '

LCPI1_1:
	QUAD $0x2222222222222222; QUAD $0x2222222222222222 // .space 16, '""""""""""""""""'
	QUAD $0x2222222222222222; QUAD $0x2222222222222222 // .space 16, '""""""""""""""""'

LCPI1_2:
	QUAD $0x5c5c5c5c5c5c5c5c; QUAD $0x5c5c5c5c5c5c5c5c // .space 16, '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'
	QUAD $0x5c5c5c5c5c5c5c5c; QUAD $0x5c5c5c5c5c5c5c5c // .space 16, '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'

LCPI1_3:
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '

LCPI1_4:
	QUAD $0x2222222222222222; QUAD $0x2222222222222222 // .space 16, '""""""""""""""""'

LCPI1_5:
	QUAD $0x5c5c5c5c5c5c5c5c; QUAD $0x5c5c5c5c5c5c5c5c // .space 16, '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'

LCPI1_6:
	BYTE $0xff // .byte 255
	BYTE $0xff // .byte 255
	BYTE $0xff // .byte 255
	BYTE $0xff // .byte 255
	BYTE $0xff // .byte 255
	BYTE $0xff // .byte 255
	BYTE $0xff // .byte 255
	BYTE $0xff // .byte 255
	BYTE $0xff // .byte 255
	BYTE $0xff // .byte 255
	BYTE $0xff // .byte 255
	BYTE $0xff // .byte 255
	BYTE $0xff // .byte 255
	BYTE $0xff // .byte 255
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0xff // .byte 255

_lquote:
	BYTE    $0x55                                 // pushq        %rbp
	WORD    $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	MOVQ    8(DI), DX
	SUBQ    SI, DX
	JE      LBB1_1
	MOVQ    0(DI), CX
	ADDQ    SI, CX
	CMPQ    DX, $16
	JAE     LBB1_3
	LONG    $0x763941c4; BYTE $0xc0               // vpcmpeqd     %xmm8, %xmm8, %xmm8
	DECQ    DX
	LONG    $0xc076f9c5                           // vpcmpeqd     %xmm0, %xmm0, %xmm0
	CMPQ    DX, $14
	JA      LBB1_29
	LONG    $0x28058d48; WORD $0x0002; BYTE $0x00 // leaq         $552(%rip), %rax  /* LJTI1_0(%rip) */
	MOVLQSX 0(AX)(DX*4), DX
	ADDQ    AX, DX
	LONG    $0x763141c4; BYTE $0xc9               // vpcmpeqd     %xmm9, %xmm9, %xmm9
	LONG    $0x762941c4; BYTE $0xd2               // vpcmpeqd     %xmm10, %xmm10, %xmm10
	LONG    $0x762141c4; BYTE $0xdb               // vpcmpeqd     %xmm11, %xmm11, %xmm11
	LONG    $0x761941c4; BYTE $0xe4               // vpcmpeqd     %xmm12, %xmm12, %xmm12
	LONG    $0x761141c4; BYTE $0xed               // vpcmpeqd     %xmm13, %xmm13, %xmm13
	LONG    $0x760941c4; BYTE $0xf6               // vpcmpeqd     %xmm14, %xmm14, %xmm14
	LONG    $0xff76c1c5                           // vpcmpeqd     %xmm7, %xmm7, %xmm7
	LONG    $0xc076f9c5                           // vpcmpeqd     %xmm0, %xmm0, %xmm0
	LONG    $0xc976f1c5                           // vpcmpeqd     %xmm1, %xmm1, %xmm1
	LONG    $0xd276e9c5                           // vpcmpeqd     %xmm2, %xmm2, %xmm2
	LONG    $0xdb76e1c5                           // vpcmpeqd     %xmm3, %xmm3, %xmm3
	LONG    $0xe476d9c5                           // vpcmpeqd     %xmm4, %xmm4, %xmm4
	LONG    $0xed76d1c5                           // vpcmpeqd     %xmm5, %xmm5, %xmm5
	LONG    $0xf676c9c5                           // vpcmpeqd     %xmm6, %xmm6, %xmm6
	JMP     DX

LBB1_14:
	QUAD $0xffffff63056ffac5                   // vmovdqu      $-157(%rip), %xmm0  /* LCPI1_6(%rip) */
	LONG $0x207963c4; WORD $0x0e49; BYTE $0x0e // vpinsrb      $14, $14(%rcx), %xmm0, %xmm9

LBB1_15:
	LONG $0x203163c4; WORD $0x0d51; BYTE $0x0d // vpinsrb      $13, $13(%rcx), %xmm9, %xmm10

LBB1_16:
	LONG $0x202963c4; WORD $0x0c59; BYTE $0x0c // vpinsrb      $12, $12(%rcx), %xmm10, %xmm11

LBB1_17:
	LONG $0x202163c4; WORD $0x0b61; BYTE $0x0b // vpinsrb      $11, $11(%rcx), %xmm11, %xmm12

LBB1_18:
	LONG $0x201963c4; WORD $0x0a69; BYTE $0x0a // vpinsrb      $10, $10(%rcx), %xmm12, %xmm13

LBB1_19:
	LONG $0x201163c4; WORD $0x0971; BYTE $0x09 // vpinsrb      $9, $9(%rcx), %xmm13, %xmm14

LBB1_20:
	LONG $0x2009e3c4; WORD $0x0879; BYTE $0x08 // vpinsrb      $8, $8(%rcx), %xmm14, %xmm7

LBB1_21:
	LONG $0x2041e3c4; WORD $0x0741; BYTE $0x07 // vpinsrb      $7, $7(%rcx), %xmm7, %xmm0

LBB1_22:
	LONG $0x2079e3c4; WORD $0x0649; BYTE $0x06 // vpinsrb      $6, $6(%rcx), %xmm0, %xmm1

LBB1_23:
	LONG $0x2071e3c4; WORD $0x0551; BYTE $0x05 // vpinsrb      $5, $5(%rcx), %xmm1, %xmm2

LBB1_24:
	LONG $0x2069e3c4; WORD $0x0459; BYTE $0x04 // vpinsrb      $4, $4(%rcx), %xmm2, %xmm3

LBB1_25:
	LONG $0x2061e3c4; WORD $0x0361; BYTE $0x03 // vpinsrb      $3, $3(%rcx), %xmm3, %xmm4

LBB1_26:
	LONG $0x2059e3c4; WORD $0x0269; BYTE $0x02 // vpinsrb      $2, $2(%rcx), %xmm4, %xmm5

LBB1_27:
	LONG $0x2051e3c4; WORD $0x0171; BYTE $0x01 // vpinsrb      $1, $1(%rcx), %xmm5, %xmm6

LBB1_28:
	LONG $0x2049e3c4; WORD $0x0001 // vpinsrb      $0, (%rcx), %xmm6, %xmm0

LBB1_29:
	QUAD $0xfffffec30d6ffac5     // vmovdqu      $-317(%rip), %xmm1  /* LCPI1_3(%rip) */
	QUAD $0xfffffecb1574f9c5     // vpcmpeqb     $-309(%rip), %xmm0, %xmm2  /* LCPI1_4(%rip) */
	QUAD $0xfffffed31d74f9c5     // vpcmpeqb     $-301(%rip), %xmm0, %xmm3  /* LCPI1_5(%rip) */
	LONG $0xc864f1c5             // vpcmpgtb     %xmm0, %xmm1, %xmm1
	LONG $0xd2ebe1c5             // vpor         %xmm2, %xmm3, %xmm2
	LONG $0x6479c1c4; BYTE $0xc0 // vpcmpgtb     %xmm8, %xmm0, %xmm0
	LONG $0xc0dbf1c5             // vpand        %xmm0, %xmm1, %xmm0
	LONG $0xc0ebe9c5             // vpor         %xmm0, %xmm2, %xmm0
	LONG $0xc0d7f9c5             // vpmovmskb    %xmm0, %eax
	ORL  $-65536, AX
	LONG $0xc0bc0ff3             // tzcntl       %eax, %eax

LBB1_30:
	ADDQ SI, AX
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	RET

LBB1_1:
	XORL AX, AX
	ADDQ SI, AX
	BYTE $0x5d  // popq         %rbp
	RET

LBB1_3:
	CMPQ DX, $32
	JB   LBB1_9
	XORL AX, AX
	QUAD $0xfffffe12056ffec5 // vmovdqu      $-494(%rip), %ymm0  /* LCPI1_0(%rip) */
	QUAD $0xfffffe2a0d6ffec5 // vmovdqu      $-470(%rip), %ymm1  /* LCPI1_1(%rip) */
	QUAD $0xfffffe42156ffec5 // vmovdqu      $-446(%rip), %ymm2  /* LCPI1_2(%rip) */
	LONG $0xdb76e5c5         // vpcmpeqd     %ymm3, %ymm3, %ymm3
	MOVQ $-4294967296, R8

LBB1_5:
	LONG $0x216ffec5             // vmovdqu      (%rcx), %ymm4
	LONG $0xec64fdc5             // vpcmpgtb     %ymm4, %ymm0, %ymm5
	LONG $0xf174ddc5             // vpcmpeqb     %ymm1, %ymm4, %ymm6
	LONG $0xfa74ddc5             // vpcmpeqb     %ymm2, %ymm4, %ymm7
	LONG $0xf6ebc5c5             // vpor         %ymm6, %ymm7, %ymm6
	LONG $0xe364ddc5             // vpcmpgtb     %ymm3, %ymm4, %ymm4
	LONG $0xe4dbd5c5             // vpand        %ymm4, %ymm5, %ymm4
	LONG $0xe4ebcdc5             // vpor         %ymm4, %ymm6, %ymm4
	LONG $0xfcd7fdc5             // vpmovmskb    %ymm4, %edi
	ORQ  R8, DI
	LONG $0xbc0f48f3; BYTE $0xff // tzcntq       %rdi, %rdi
	ADDQ DI, AX
	CMPQ DI, $32
	JB   LBB1_30
	ADDQ $32, CX
	ADDQ $-32, DX
	CMPQ DX, $31
	JA   LBB1_5
	WORD $0xf8c5; BYTE $0x77     // vzeroupper
	CMPQ DX, $16
	JAE  LBB1_10
	JMP  LBB1_8

LBB1_9:
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	XORL AX, AX

LBB1_10:
	LONG $0x016ffac5         // vmovdqu      (%rcx), %xmm0
	QUAD $0xfffffdf50d6ffac5 // vmovdqu      $-523(%rip), %xmm1  /* LCPI1_3(%rip) */
	LONG $0xc864f1c5         // vpcmpgtb     %xmm0, %xmm1, %xmm1
	QUAD $0xfffffdf91574f9c5 // vpcmpeqb     $-519(%rip), %xmm0, %xmm2  /* LCPI1_4(%rip) */
	QUAD $0xfffffe011d74f9c5 // vpcmpeqb     $-511(%rip), %xmm0, %xmm3  /* LCPI1_5(%rip) */
	LONG $0xd2ebe1c5         // vpor         %xmm2, %xmm3, %xmm2
	LONG $0xdb76e1c5         // vpcmpeqd     %xmm3, %xmm3, %xmm3
	LONG $0xc364f9c5         // vpcmpgtb     %xmm3, %xmm0, %xmm0
	LONG $0xc0dbf1c5         // vpand        %xmm0, %xmm1, %xmm0
	LONG $0xc0ebe9c5         // vpor         %xmm0, %xmm2, %xmm0
	LONG $0xf8d7f9c5         // vpmovmskb    %xmm0, %edi
	ORL  $-65536, DI
	LONG $0xffbc0ff3         // tzcntl       %edi, %edi
	ADDQ DI, AX
	CMPL DI, $16
	JB   LBB1_30
	ADDQ $16, CX
	ADDQ $-16, DX

LBB1_8:
	LONG $0x446ffac5; WORD $0xf011 // vmovdqu      $-16(%rcx,%rdx), %xmm0
	QUAD $0xfffffd9d0d6ffac5       // vmovdqu      $-611(%rip), %xmm1  /* LCPI1_3(%rip) */
	LONG $0xc864f1c5               // vpcmpgtb     %xmm0, %xmm1, %xmm1
	QUAD $0xfffffda11574f9c5       // vpcmpeqb     $-607(%rip), %xmm0, %xmm2  /* LCPI1_4(%rip) */
	QUAD $0xfffffda91d74f9c5       // vpcmpeqb     $-599(%rip), %xmm0, %xmm3  /* LCPI1_5(%rip) */
	LONG $0xd2ebe1c5               // vpor         %xmm2, %xmm3, %xmm2
	LONG $0xdb76e1c5               // vpcmpeqd     %xmm3, %xmm3, %xmm3
	LONG $0xc364f9c5               // vpcmpgtb     %xmm3, %xmm0, %xmm0
	LONG $0xc0dbf1c5               // vpand        %xmm0, %xmm1, %xmm0
	LONG $0xc0ebe9c5               // vpor         %xmm0, %xmm2, %xmm0
	LONG $0xc8d7f9c5               // vpmovmskb    %xmm0, %ecx
	ORL  $-65536, CX
	LONG $0xc9bc0ff3               // tzcntl       %ecx, %ecx
	ADDQ DX, AX
	LEAQ -16(CX)(AX*1), AX
	ADDQ SI, AX
	BYTE $0x5d                     // popq         %rbp
	RET

// .set L1_0_set_28, LBB1_28-LJTI1_0
// .set L1_0_set_27, LBB1_27-LJTI1_0
// .set L1_0_set_26, LBB1_26-LJTI1_0
// .set L1_0_set_25, LBB1_25-LJTI1_0
// .set L1_0_set_24, LBB1_24-LJTI1_0
// .set L1_0_set_23, LBB1_23-LJTI1_0
// .set L1_0_set_22, LBB1_22-LJTI1_0
// .set L1_0_set_21, LBB1_21-LJTI1_0
// .set L1_0_set_20, LBB1_20-LJTI1_0
// .set L1_0_set_19, LBB1_19-LJTI1_0
// .set L1_0_set_18, LBB1_18-LJTI1_0
// .set L1_0_set_17, LBB1_17-LJTI1_0
// .set L1_0_set_16, LBB1_16-LJTI1_0
// .set L1_0_set_15, LBB1_15-LJTI1_0
// .set L1_0_set_14, LBB1_14-LJTI1_0
LJTI1_0:
	LONG $0xfffffe89 // .long L1_0_set_28
	LONG $0xfffffe82 // .long L1_0_set_27
	LONG $0xfffffe7b // .long L1_0_set_26
	LONG $0xfffffe74 // .long L1_0_set_25
	LONG $0xfffffe6d // .long L1_0_set_24
	LONG $0xfffffe66 // .long L1_0_set_23
	LONG $0xfffffe5f // .long L1_0_set_22
	LONG $0xfffffe58 // .long L1_0_set_21
	LONG $0xfffffe51 // .long L1_0_set_20
	LONG $0xfffffe4a // .long L1_0_set_19
	LONG $0xfffffe43 // .long L1_0_set_18
	LONG $0xfffffe3c // .long L1_0_set_17
	LONG $0xfffffe35 // .long L1_0_set_16
	LONG $0xfffffe2e // .long L1_0_set_15
	LONG $0xfffffe1f // .long L1_0_set_14

LCPI2_0:
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '

LCPI2_1:
	QUAD $0x0909090909090909; QUAD $0x0909090909090909 // .space 16, '\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'
	QUAD $0x0909090909090909; QUAD $0x0909090909090909 // .space 16, '\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'

LCPI2_2:
	QUAD $0x0a0a0a0a0a0a0a0a; QUAD $0x0a0a0a0a0a0a0a0a // .space 16, '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'
	QUAD $0x0a0a0a0a0a0a0a0a; QUAD $0x0a0a0a0a0a0a0a0a // .space 16, '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'

LCPI2_3:
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'

LCPI2_4:
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '

LCPI2_5:
	QUAD $0x0909090909090909; QUAD $0x0909090909090909 // .space 16, '\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'

LCPI2_6:
	QUAD $0x0a0a0a0a0a0a0a0a; QUAD $0x0a0a0a0a0a0a0a0a // .space 16, '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'

LCPI2_7:
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'

LCPI2_8:
	BYTE $0xff // .byte 255
	BYTE $0xff // .byte 255
	BYTE $0xff // .byte 255
	BYTE $0xff // .byte 255
	BYTE $0xff // .byte 255
	BYTE $0xff // .byte 255
	BYTE $0xff // .byte 255
	BYTE $0xff // .byte 255
	BYTE $0xff // .byte 255
	BYTE $0xff // .byte 255
	BYTE $0xff // .byte 255
	BYTE $0xff // .byte 255
	BYTE $0xff // .byte 255
	BYTE $0xff // .byte 255
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0xff // .byte 255

_lspace:
	BYTE    $0x55                                 // pushq        %rbp
	WORD    $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	SUBQ    DX, SI
	JE      LBB2_1
	ADDQ    DX, DI
	CMPQ    SI, $16
	JAE     LBB2_3
	LONG    $0xc076f9c5                           // vpcmpeqd     %xmm0, %xmm0, %xmm0
	DECQ    SI
	CMPQ    SI, $14
	JA      LBB2_29
	LONG    $0xd0058d48; WORD $0x0001; BYTE $0x00 // leaq         $464(%rip), %rax  /* LJTI2_0(%rip) */
	MOVLQSX 0(AX)(SI*4), CX
	ADDQ    AX, CX
	JMP     CX

LBB2_14:
	QUAD $0xffffffad056ffac5                   // vmovdqu      $-83(%rip), %xmm0  /* LCPI2_8(%rip) */
	LONG $0x2079e3c4; WORD $0x0e47; BYTE $0x0e // vpinsrb      $14, $14(%rdi), %xmm0, %xmm0

LBB2_15:
	LONG $0x2079e3c4; WORD $0x0d47; BYTE $0x0d // vpinsrb      $13, $13(%rdi), %xmm0, %xmm0

LBB2_16:
	LONG $0x2079e3c4; WORD $0x0c47; BYTE $0x0c // vpinsrb      $12, $12(%rdi), %xmm0, %xmm0

LBB2_17:
	LONG $0x2079e3c4; WORD $0x0b47; BYTE $0x0b // vpinsrb      $11, $11(%rdi), %xmm0, %xmm0

LBB2_18:
	LONG $0x2079e3c4; WORD $0x0a47; BYTE $0x0a // vpinsrb      $10, $10(%rdi), %xmm0, %xmm0

LBB2_19:
	LONG $0x2079e3c4; WORD $0x0947; BYTE $0x09 // vpinsrb      $9, $9(%rdi), %xmm0, %xmm0

LBB2_20:
	LONG $0x2079e3c4; WORD $0x0847; BYTE $0x08 // vpinsrb      $8, $8(%rdi), %xmm0, %xmm0

LBB2_21:
	LONG $0x2079e3c4; WORD $0x0747; BYTE $0x07 // vpinsrb      $7, $7(%rdi), %xmm0, %xmm0

LBB2_22:
	LONG $0x2079e3c4; WORD $0x0647; BYTE $0x06 // vpinsrb      $6, $6(%rdi), %xmm0, %xmm0

LBB2_23:
	LONG $0x2079e3c4; WORD $0x0547; BYTE $0x05 // vpinsrb      $5, $5(%rdi), %xmm0, %xmm0

LBB2_24:
	LONG $0x2079e3c4; WORD $0x0447; BYTE $0x04 // vpinsrb      $4, $4(%rdi), %xmm0, %xmm0

LBB2_25:
	LONG $0x2079e3c4; WORD $0x0347; BYTE $0x03 // vpinsrb      $3, $3(%rdi), %xmm0, %xmm0

LBB2_26:
	LONG $0x2079e3c4; WORD $0x0247; BYTE $0x02 // vpinsrb      $2, $2(%rdi), %xmm0, %xmm0

LBB2_27:
	LONG $0x2079e3c4; WORD $0x0147; BYTE $0x01 // vpinsrb      $1, $1(%rdi), %xmm0, %xmm0

LBB2_28:
	LONG $0x2079e3c4; WORD $0x0007 // vpinsrb      $0, (%rdi), %xmm0, %xmm0

LBB2_29:
	QUAD $0xfffffefd0d74f9c5 // vpcmpeqb     $-259(%rip), %xmm0, %xmm1  /* LCPI2_4(%rip) */
	QUAD $0xffffff051574f9c5 // vpcmpeqb     $-251(%rip), %xmm0, %xmm2  /* LCPI2_5(%rip) */
	QUAD $0xffffff0d1d74f9c5 // vpcmpeqb     $-243(%rip), %xmm0, %xmm3  /* LCPI2_6(%rip) */
	LONG $0xcaebf1c5         // vpor         %xmm2, %xmm1, %xmm1
	QUAD $0xffffff110574f9c5 // vpcmpeqb     $-239(%rip), %xmm0, %xmm0  /* LCPI2_7(%rip) */
	LONG $0xc3ebf9c5         // vpor         %xmm3, %xmm0, %xmm0
	LONG $0xc1ebf9c5         // vpor         %xmm1, %xmm0, %xmm0
	LONG $0xc0d7f9c5         // vpmovmskb    %xmm0, %eax
	NOTL AX
	LONG $0xc0bc0ff3         // tzcntl       %eax, %eax

LBB2_30:
	ADDQ DX, AX
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	RET

LBB2_1:
	XORL AX, AX
	ADDQ DX, AX
	BYTE $0x5d  // popq         %rbp
	RET

LBB2_3:
	CMPQ SI, $32
	JB   LBB2_9
	XORL AX, AX
	QUAD $0xfffffe30056ffec5 // vmovdqu      $-464(%rip), %ymm0  /* LCPI2_0(%rip) */
	QUAD $0xfffffe480d6ffec5 // vmovdqu      $-440(%rip), %ymm1  /* LCPI2_1(%rip) */
	QUAD $0xfffffe60156ffec5 // vmovdqu      $-416(%rip), %ymm2  /* LCPI2_2(%rip) */
	QUAD $0xfffffe781d6ffec5 // vmovdqu      $-392(%rip), %ymm3  /* LCPI2_3(%rip) */

LBB2_5:
	LONG $0x276ffec5             // vmovdqu      (%rdi), %ymm4
	LONG $0xe874ddc5             // vpcmpeqb     %ymm0, %ymm4, %ymm5
	LONG $0xf174ddc5             // vpcmpeqb     %ymm1, %ymm4, %ymm6
	LONG $0xeeebd5c5             // vpor         %ymm6, %ymm5, %ymm5
	LONG $0xf274ddc5             // vpcmpeqb     %ymm2, %ymm4, %ymm6
	LONG $0xe374ddc5             // vpcmpeqb     %ymm3, %ymm4, %ymm4
	LONG $0xe6ebddc5             // vpor         %ymm6, %ymm4, %ymm4
	LONG $0xe5ebddc5             // vpor         %ymm5, %ymm4, %ymm4
	LONG $0xccd7fdc5             // vpmovmskb    %ymm4, %ecx
	NOTQ CX
	LONG $0xbc0f48f3; BYTE $0xc9 // tzcntq       %rcx, %rcx
	ADDQ CX, AX
	CMPQ CX, $32
	JB   LBB2_30
	ADDQ $32, DI
	ADDQ $-32, SI
	CMPQ SI, $31
	JA   LBB2_5
	WORD $0xf8c5; BYTE $0x77     // vzeroupper
	CMPQ SI, $16
	JAE  LBB2_10
	JMP  LBB2_8

LBB2_9:
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	XORL AX, AX

LBB2_10:
	LONG $0x076ffac5         // vmovdqu      (%rdi), %xmm0
	QUAD $0xfffffe390d74f9c5 // vpcmpeqb     $-455(%rip), %xmm0, %xmm1  /* LCPI2_4(%rip) */
	QUAD $0xfffffe411574f9c5 // vpcmpeqb     $-447(%rip), %xmm0, %xmm2  /* LCPI2_5(%rip) */
	QUAD $0xfffffe491d74f9c5 // vpcmpeqb     $-439(%rip), %xmm0, %xmm3  /* LCPI2_6(%rip) */
	QUAD $0xfffffe510574f9c5 // vpcmpeqb     $-431(%rip), %xmm0, %xmm0  /* LCPI2_7(%rip) */
	LONG $0xcaebf1c5         // vpor         %xmm2, %xmm1, %xmm1
	LONG $0xc3ebf9c5         // vpor         %xmm3, %xmm0, %xmm0
	LONG $0xc1ebf9c5         // vpor         %xmm1, %xmm0, %xmm0
	LONG $0xc8d7f9c5         // vpmovmskb    %xmm0, %ecx
	NOTL CX
	LONG $0xc9bc0ff3         // tzcntl       %ecx, %ecx
	ADDQ CX, AX
	CMPL CX, $16
	JB   LBB2_30
	ADDQ $16, DI
	ADDQ $-16, SI

LBB2_8:
	LONG $0x446ffac5; WORD $0xf037 // vmovdqu      $-16(%rdi,%rsi), %xmm0
	QUAD $0xfffffde90d74f9c5       // vpcmpeqb     $-535(%rip), %xmm0, %xmm1  /* LCPI2_4(%rip) */
	QUAD $0xfffffdf11574f9c5       // vpcmpeqb     $-527(%rip), %xmm0, %xmm2  /* LCPI2_5(%rip) */
	QUAD $0xfffffdf91d74f9c5       // vpcmpeqb     $-519(%rip), %xmm0, %xmm3  /* LCPI2_6(%rip) */
	QUAD $0xfffffe010574f9c5       // vpcmpeqb     $-511(%rip), %xmm0, %xmm0  /* LCPI2_7(%rip) */
	LONG $0xcaebf1c5               // vpor         %xmm2, %xmm1, %xmm1
	LONG $0xc3ebf9c5               // vpor         %xmm3, %xmm0, %xmm0
	LONG $0xc1ebf9c5               // vpor         %xmm1, %xmm0, %xmm0
	LONG $0xc8d7f9c5               // vpmovmskb    %xmm0, %ecx
	NOTL CX
	LONG $0xc9bc0ff3               // tzcntl       %ecx, %ecx
	ADDQ SI, AX
	LEAQ -16(CX)(AX*1), AX
	ADDQ DX, AX
	BYTE $0x5d                     // popq         %rbp
	RET

// .set L2_0_set_28, LBB2_28-LJTI2_0
// .set L2_0_set_27, LBB2_27-LJTI2_0
// .set L2_0_set_26, LBB2_26-LJTI2_0
// .set L2_0_set_25, LBB2_25-LJTI2_0
// .set L2_0_set_24, LBB2_24-LJTI2_0
// .set L2_0_set_23, LBB2_23-LJTI2_0
// .set L2_0_set_22, LBB2_22-LJTI2_0
// .set L2_0_set_21, LBB2_21-LJTI2_0
// .set L2_0_set_20, LBB2_20-LJTI2_0
// .set L2_0_set_19, LBB2_19-LJTI2_0
// .set L2_0_set_18, LBB2_18-LJTI2_0
// .set L2_0_set_17, LBB2_17-LJTI2_0
// .set L2_0_set_16, LBB2_16-LJTI2_0
// .set L2_0_set_15, LBB2_15-LJTI2_0
// .set L2_0_set_14, LBB2_14-LJTI2_0
LJTI2_0:
	LONG $0xfffffea3 // .long L2_0_set_28
	LONG $0xfffffe9c // .long L2_0_set_27
	LONG $0xfffffe95 // .long L2_0_set_26
	LONG $0xfffffe8e // .long L2_0_set_25
	LONG $0xfffffe87 // .long L2_0_set_24
	LONG $0xfffffe80 // .long L2_0_set_23
	LONG $0xfffffe79 // .long L2_0_set_22
	LONG $0xfffffe72 // .long L2_0_set_21
	LONG $0xfffffe6b // .long L2_0_set_20
	LONG $0xfffffe64 // .long L2_0_set_19
	LONG $0xfffffe5d // .long L2_0_set_18
	LONG $0xfffffe56 // .long L2_0_set_17
	LONG $0xfffffe4f // .long L2_0_set_16
	LONG $0xfffffe48 // .long L2_0_set_15
	LONG $0xfffffe39 // .long L2_0_set_14

_strchr1:
	BYTE  $0x55                   // pushq        %rbp
	WORD  $0x8948; BYTE $0xe5     // movq         %rsp, %rbp
	MOVQ  8(DI), R9
	SUBQ  SI, R9
	MOVQ  0(DI), R11
	ADDQ  SI, R11
	LONG  $0xc26ef9c5             // vmovd        %edx, %xmm0
	LONG  $0x787de2c4; BYTE $0xc0 // vpbroadcastb %xmm0, %ymm0
	MOVQ  R11, DI
	MOVQ  R9, AX
	MOVQ  R11, DX
	ANDQ  $31, DI
	JE    LBB3_5
	MOVQ  R11, AX
	ANDQ  $-32, AX
	LONG  $0x0874fdc5             // vpcmpeqb     (%rax), %ymm0, %ymm1
	LONG  $0xc1d7fdc5             // vpmovmskb    %ymm1, %eax
	LONG  $0xf742e2c4; BYTE $0xc0 // sarxl        %edi, %eax, %eax
	TESTL AX, AX
	JE    LBB3_4
	WORD  $0x9848                 // cltq
	LONG  $0xbc0f48f3; BYTE $0xc8 // tzcntq       %rax, %rcx
	CMPQ  CX, R9
	MOVQ  $-1, AX
	LONG  $0xc14c0f48             // cmovlq       %rcx, %rax
	JMP   LBB3_3

LBB3_4:
	MOVL $32, CX
	SUBQ DI, CX
	LEAQ 0(R11)(CX*1), DX
	MOVQ R9, AX
	SUBQ CX, AX

LBB3_5:
	CMPQ AX, $128
	JL   LBB3_6

LBB3_12:
	LONG  $0x2274fdc5             // vpcmpeqb     (%rdx), %ymm0, %ymm4
	LONG  $0x5a74fdc5; BYTE $0x20 // vpcmpeqb     $32(%rdx), %ymm0, %ymm3
	LONG  $0x5274fdc5; BYTE $0x40 // vpcmpeqb     $64(%rdx), %ymm0, %ymm2
	LONG  $0x4a74fdc5; BYTE $0x60 // vpcmpeqb     $96(%rdx), %ymm0, %ymm1
	LONG  $0xecebe5c5             // vpor         %ymm4, %ymm3, %ymm5
	LONG  $0xf1ebedc5             // vpor         %ymm1, %ymm2, %ymm6
	LONG  $0xeeebd5c5             // vpor         %ymm6, %ymm5, %ymm5
	LONG  $0x177de2c4; BYTE $0xed // vptest       %ymm5, %ymm5
	JNE   LBB3_14
	SUBQ  $-128, DX
	LEAQ  -128(AX), DI
	CMPQ  AX, $255
	MOVQ  DI, AX
	JG    LBB3_12
	MOVQ  R9, AX
	TESTQ DI, DI
	JNS   LBB3_8
	JMP   LBB3_3

LBB3_6:
	MOVQ  AX, DI
	MOVQ  R9, AX
	TESTQ DI, DI
	JS    LBB3_3

LBB3_8:
	LONG  $0x0a74fdc5 // vpcmpeqb     (%rdx), %ymm0, %ymm1
	LONG  $0xd1d77dc5 // vpmovmskb    %ymm1, %r10d
	TESTL R10, R10
	JE    LBB3_21

LBB3_9:
	MOVQ DX, R8

LBB3_10:
	MOVLQSX R10, AX
	LONG    $0xbc0f48f3; BYTE $0xd0 // tzcntq       %rax, %rdx
	MOVQ    $-1, AX
	CMPQ    DX, DI
	JGE     LBB3_3
	SUBQ    R11, R8
	ADDQ    DX, R8
	MOVQ    R8, AX
	JMP     LBB3_3

LBB3_14:
	LONG  $0xc4d7fdc5             // vpmovmskb    %ymm4, %eax
	TESTL AX, AX
	JE    LBB3_16
	SUBQ  R11, DX
	WORD  $0x9848                 // cltq
	LONG  $0xbc0f48f3; BYTE $0xc0 // tzcntq       %rax, %rax
	ADDQ  DX, AX
	JMP   LBB3_3

LBB3_21:
	MOVQ  R9, AX
	CMPQ  DI, $31
	JLE   LBB3_3
	LEAQ  32(DX), R8
	LONG  $0x747dc1c4; BYTE $0x08 // vpcmpeqb     (%r8), %ymm0, %ymm1
	LONG  $0xd1d77dc5             // vpmovmskb    %ymm1, %r10d
	TESTL R10, R10
	JE    LBB3_24
	ADDQ  $-32, DI
	JMP   LBB3_10

LBB3_16:
	LONG  $0xc3d7fdc5             // vpmovmskb    %ymm3, %eax
	TESTL AX, AX
	JE    LBB3_18
	WORD  $0x9848                 // cltq
	LONG  $0xbc0f48f3; BYTE $0xc0 // tzcntq       %rax, %rax
	SUBQ  R11, DX
	LEAQ  32(DX)(AX*1), AX
	JMP   LBB3_3

LBB3_18:
	LONG  $0xc2d7fdc5             // vpmovmskb    %ymm2, %eax
	SUBQ  R11, DX
	TESTL AX, AX
	JE    LBB3_20
	WORD  $0x9848                 // cltq
	LONG  $0xbc0f48f3; BYTE $0xc0 // tzcntq       %rax, %rax
	LEAQ  64(DX)(AX*1), AX
	JMP   LBB3_3

LBB3_24:
	MOVQ  R9, AX
	CMPQ  DI, $64
	JL    LBB3_3
	LEAQ  64(DX), R8
	LONG  $0x747dc1c4; BYTE $0x08 // vpcmpeqb     (%r8), %ymm0, %ymm1
	LONG  $0xd1d77dc5             // vpmovmskb    %ymm1, %r10d
	TESTL R10, R10
	JE    LBB3_27
	ADDQ  $-64, DI
	JMP   LBB3_10

LBB3_20:
	LONG $0xc1d7fdc5             // vpmovmskb    %ymm1, %eax
	WORD $0x9848                 // cltq
	LONG $0xbc0f48f3; BYTE $0xc0 // tzcntq       %rax, %rax
	LEAQ 96(DX)(AX*1), AX

LBB3_3:
	ADDQ AX, SI
	CMPQ AX, R9
	MOVQ $-1, AX
	LONG $0xc6420f48         // cmovbq       %rsi, %rax
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	RET

LBB3_27:
	MOVQ  R9, AX
	CMPQ  DI, $96
	JL    LBB3_3
	ADDQ  $96, DX
	LONG  $0x0274fdc5 // vpcmpeqb     (%rdx), %ymm0, %ymm0
	LONG  $0xd0d77dc5 // vpmovmskb    %ymm0, %r10d
	MOVQ  R9, AX
	TESTL R10, R10
	JE    LBB3_3
	ADDQ  $-96, DI
	JMP   LBB3_9

LCPI4_0:
	BYTE $0xff // .byte 255
	BYTE $0xff // .byte 255
	BYTE $0xff // .byte 255
	BYTE $0xff // .byte 255
	BYTE $0xff // .byte 255
	BYTE $0xff // .byte 255
	BYTE $0xff // .byte 255
	BYTE $0xff // .byte 255
	BYTE $0xff // .byte 255
	BYTE $0xff // .byte 255
	BYTE $0xff // .byte 255
	BYTE $0xff // .byte 255
	BYTE $0xff // .byte 255
	BYTE $0xff // .byte 255
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0xff // .byte 255

_strchr2:
	BYTE    $0x55                                 // pushq        %rbp
	WORD    $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	MOVQ    8(DI), R8
	SUBQ    SI, R8
	JE      LBB4_1
	MOVQ    0(DI), R9
	ADDQ    SI, R9
	CMPQ    R8, $16
	JAE     LBB4_3
	LONG    $0xc076f9c5                           // vpcmpeqd     %xmm0, %xmm0, %xmm0
	LEAQ    -1(R8), AX
	CMPQ    AX, $14
	JA      LBB4_24
	LONG    $0xb63d8d48; WORD $0x0001; BYTE $0x00 // leaq         $438(%rip), %rdi  /* LJTI4_0(%rip) */
	MOVLQSX 0(DI)(AX*4), AX
	ADDQ    DI, AX
	JMP     AX

LBB4_9:
	QUAD $0xffffffa5056ffac5                   // vmovdqu      $-91(%rip), %xmm0  /* LCPI4_0(%rip) */
	LONG $0x2079c3c4; WORD $0x0e41; BYTE $0x0e // vpinsrb      $14, $14(%r9), %xmm0, %xmm0

LBB4_10:
	LONG $0x2079c3c4; WORD $0x0d41; BYTE $0x0d // vpinsrb      $13, $13(%r9), %xmm0, %xmm0

LBB4_11:
	LONG $0x2079c3c4; WORD $0x0c41; BYTE $0x0c // vpinsrb      $12, $12(%r9), %xmm0, %xmm0

LBB4_12:
	LONG $0x2079c3c4; WORD $0x0b41; BYTE $0x0b // vpinsrb      $11, $11(%r9), %xmm0, %xmm0

LBB4_13:
	LONG $0x2079c3c4; WORD $0x0a41; BYTE $0x0a // vpinsrb      $10, $10(%r9), %xmm0, %xmm0

LBB4_14:
	LONG $0x2079c3c4; WORD $0x0941; BYTE $0x09 // vpinsrb      $9, $9(%r9), %xmm0, %xmm0

LBB4_15:
	LONG $0x2079c3c4; WORD $0x0841; BYTE $0x08 // vpinsrb      $8, $8(%r9), %xmm0, %xmm0

LBB4_16:
	LONG $0x2079c3c4; WORD $0x0741; BYTE $0x07 // vpinsrb      $7, $7(%r9), %xmm0, %xmm0

LBB4_17:
	LONG $0x2079c3c4; WORD $0x0641; BYTE $0x06 // vpinsrb      $6, $6(%r9), %xmm0, %xmm0

LBB4_18:
	LONG $0x2079c3c4; WORD $0x0541; BYTE $0x05 // vpinsrb      $5, $5(%r9), %xmm0, %xmm0

LBB4_19:
	LONG $0x2079c3c4; WORD $0x0441; BYTE $0x04 // vpinsrb      $4, $4(%r9), %xmm0, %xmm0

LBB4_20:
	LONG $0x2079c3c4; WORD $0x0341; BYTE $0x03 // vpinsrb      $3, $3(%r9), %xmm0, %xmm0

LBB4_21:
	LONG $0x2079c3c4; WORD $0x0241; BYTE $0x02 // vpinsrb      $2, $2(%r9), %xmm0, %xmm0

LBB4_22:
	LONG $0x2079c3c4; WORD $0x0141; BYTE $0x01 // vpinsrb      $1, $1(%r9), %xmm0, %xmm0

LBB4_23:
	LONG $0x2079c3c4; WORD $0x0001 // vpinsrb      $0, (%r9), %xmm0, %xmm0

LBB4_24:
	LONG $0xca6ef9c5             // vmovd        %edx, %xmm1
	LONG $0x7879e2c4; BYTE $0xc9 // vpbroadcastb %xmm1, %xmm1
	LONG $0xc874f1c5             // vpcmpeqb     %xmm0, %xmm1, %xmm1
	LONG $0xd16ef9c5             // vmovd        %ecx, %xmm2
	LONG $0x7879e2c4; BYTE $0xd2 // vpbroadcastb %xmm2, %xmm2
	LONG $0xc074e9c5             // vpcmpeqb     %xmm0, %xmm2, %xmm0
	LONG $0xc1ebf9c5             // vpor         %xmm1, %xmm0, %xmm0
	LONG $0xc0d7f9c5             // vpmovmskb    %xmm0, %eax
	ORL  $-65536, AX
	LONG $0xbc0f44f3; BYTE $0xd8 // tzcntl       %eax, %r11d
	JMP  LBB4_31

LBB4_1:
	XORL R11, R11
	JMP  LBB4_31

LBB4_3:
	CMPQ R8, $31
	JBE  LBB4_4
	LONG $0xc26ef9c5             // vmovd        %edx, %xmm0
	LONG $0x787de2c4; BYTE $0xc0 // vpbroadcastb %xmm0, %ymm0
	LONG $0xc96ef9c5             // vmovd        %ecx, %xmm1
	LONG $0x787de2c4; BYTE $0xc9 // vpbroadcastb %xmm1, %ymm1
	XORL R11, R11
	MOVQ $-4294967296, R10
	MOVQ R8, DI

LBB4_26:
	LONG $0x6f7ec1c4; BYTE $0x11 // vmovdqu      (%r9), %ymm2
	LONG $0xda74fdc5             // vpcmpeqb     %ymm2, %ymm0, %ymm3
	LONG $0xd274f5c5             // vpcmpeqb     %ymm2, %ymm1, %ymm2
	LONG $0xd3ebedc5             // vpor         %ymm3, %ymm2, %ymm2
	LONG $0xc2d7fdc5             // vpmovmskb    %ymm2, %eax
	ORQ  R10, AX
	LONG $0xbc0f48f3; BYTE $0xc0 // tzcntq       %rax, %rax
	ADDQ AX, R11
	CMPQ AX, $32
	JB   LBB4_31
	ADDQ $32, R9
	ADDQ $-32, DI
	CMPQ DI, $31
	JA   LBB4_26
	WORD $0xf8c5; BYTE $0x77     // vzeroupper
	CMPQ DI, $15
	JA   LBB4_5
	LONG $0xc26ef9c5             // vmovd        %edx, %xmm0
	LONG $0x7879e2c4; BYTE $0xc0 // vpbroadcastb %xmm0, %xmm0
	LONG $0xc96ef9c5             // vmovd        %ecx, %xmm1
	LONG $0x7879e2c4; BYTE $0xc9 // vpbroadcastb %xmm1, %xmm1
	JMP  LBB4_30

LBB4_4:
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	XORL R11, R11
	MOVQ R8, DI

LBB4_5:
	LONG $0x6f7ac1c4; BYTE $0x11 // vmovdqu      (%r9), %xmm2
	LONG $0xc26ef9c5             // vmovd        %edx, %xmm0
	LONG $0x7879e2c4; BYTE $0xc0 // vpbroadcastb %xmm0, %xmm0
	LONG $0xda74f9c5             // vpcmpeqb     %xmm2, %xmm0, %xmm3
	LONG $0xc96ef9c5             // vmovd        %ecx, %xmm1
	LONG $0x7879e2c4; BYTE $0xc9 // vpbroadcastb %xmm1, %xmm1
	LONG $0xd274f1c5             // vpcmpeqb     %xmm2, %xmm1, %xmm2
	LONG $0xd3ebe9c5             // vpor         %xmm3, %xmm2, %xmm2
	LONG $0xc2d7f9c5             // vpmovmskb    %xmm2, %eax
	ORL  $-65536, AX
	LONG $0xc0bc0ff3             // tzcntl       %eax, %eax
	ADDQ AX, R11
	CMPL AX, $16
	JB   LBB4_31
	ADDQ $16, R9
	ADDQ $-16, DI

LBB4_30:
	LONG $0x6f7ac1c4; WORD $0x3954; BYTE $0xf0 // vmovdqu      $-16(%r9,%rdi), %xmm2
	LONG $0xc274f9c5                           // vpcmpeqb     %xmm2, %xmm0, %xmm0
	LONG $0xca74f1c5                           // vpcmpeqb     %xmm2, %xmm1, %xmm1
	LONG $0xc0ebf1c5                           // vpor         %xmm0, %xmm1, %xmm0
	LONG $0xc0d7f9c5                           // vpmovmskb    %xmm0, %eax
	ORL  $-65536, AX
	LONG $0xc0bc0ff3                           // tzcntl       %eax, %eax
	ADDQ DI, R11
	LEAQ -16(AX)(R11*1), R11

LBB4_31:
	ADDQ R11, SI
	CMPQ R11, R8
	MOVQ $-1, AX
	LONG $0xc6420f48         // cmovbq       %rsi, %rax
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	RET

// .set L4_0_set_23, LBB4_23-LJTI4_0
// .set L4_0_set_22, LBB4_22-LJTI4_0
// .set L4_0_set_21, LBB4_21-LJTI4_0
// .set L4_0_set_20, LBB4_20-LJTI4_0
// .set L4_0_set_19, LBB4_19-LJTI4_0
// .set L4_0_set_18, LBB4_18-LJTI4_0
// .set L4_0_set_17, LBB4_17-LJTI4_0
// .set L4_0_set_16, LBB4_16-LJTI4_0
// .set L4_0_set_15, LBB4_15-LJTI4_0
// .set L4_0_set_14, LBB4_14-LJTI4_0
// .set L4_0_set_13, LBB4_13-LJTI4_0
// .set L4_0_set_12, LBB4_12-LJTI4_0
// .set L4_0_set_11, LBB4_11-LJTI4_0
// .set L4_0_set_10, LBB4_10-LJTI4_0
// .set L4_0_set_9, LBB4_9-LJTI4_0
LJTI4_0:
	LONG $0xfffffebd // .long L4_0_set_23
	LONG $0xfffffeb6 // .long L4_0_set_22
	LONG $0xfffffeaf // .long L4_0_set_21
	LONG $0xfffffea8 // .long L4_0_set_20
	LONG $0xfffffea1 // .long L4_0_set_19
	LONG $0xfffffe9a // .long L4_0_set_18
	LONG $0xfffffe93 // .long L4_0_set_17
	LONG $0xfffffe8c // .long L4_0_set_16
	LONG $0xfffffe85 // .long L4_0_set_15
	LONG $0xfffffe7e // .long L4_0_set_14
	LONG $0xfffffe77 // .long L4_0_set_13
	LONG $0xfffffe70 // .long L4_0_set_12
	LONG $0xfffffe69 // .long L4_0_set_11
	LONG $0xfffffe62 // .long L4_0_set_10
	LONG $0xfffffe53 // .long L4_0_set_9

LCPI5_0:
	QUAD $0x8000000000000000 // .quad 0x8000000000000000
	QUAD $0x8000000000000000 // .quad 0x8000000000000000

LCPI5_1:
	QUAD $0x3fd34413509f79fe // .quad 0x3fd34413509f79fe

LCPI5_2:
	QUAD $0x4075b00000000000 // .quad 0x4075b00000000000

LCPI5_3:
	QUAD $0x3030303030303030; QUAD $0x3030303030303030 // .space 16, '0000000000000000'
	QUAD $0x3030303030303030; QUAD $0x3030303030303030 // .space 16, '0000000000000000'

_f64toa:
	BYTE $0x55               // pushq        %rbp
	WORD $0x8948; BYTE $0xe5 // movq         %rsp, %rbp
	WORD $0x5741             // pushq        %r15
	WORD $0x5641             // pushq        %r14
	WORD $0x5541             // pushq        %r13
	WORD $0x5441             // pushq        %r12
	BYTE $0x53               // pushq        %rbx
	SUBQ $88, SP
	LONG $0xc957f1c5         // vxorpd       %xmm1, %xmm1, %xmm1
	LONG $0xc12ef9c5         // vucomisd     %xmm1, %xmm0
	JNE  LBB5_2
	MOVB $48, 0(DI)
	MOVL $1, AX
	JMP  LBB5_126

LBB5_2:
	LONG $0xc12ef9c5         // vucomisd     %xmm1, %xmm0
	JAE  LBB5_3
	QUAD $0xffffff8a0557f9c5 // vxorpd       $-118(%rip), %xmm0, %xmm0  /* LCPI5_0(%rip) */
	MOVB $45, 0(DI)
	INCQ DI
	MOVQ DI, -56(BP)
	MOVL $1, -44(BP)
	JMP  LBB5_5

LBB5_3:
	MOVQ DI, -56(BP)
	MOVL $0, -44(BP)

LBB5_5:
	LONG    $0x7ef9e1c4; BYTE $0xc0               // vmovq        %xmm0, %rax
	MOVQ    $4503599627370496, CX
	LEAQ    -1(CX), SI
	ANDQ    AX, SI
	SHRQ    $52, AX
	ANDL    $2047, AX
	LEAQ    0(SI)(CX*1), DX
	LEAL    -1075(AX), DI
	TESTL   AX, AX
	LONG    $0xd6440f48                           // cmoveq       %rsi, %rdx
	MOVL    $-1074, BX
	WORD    $0x450f; BYTE $0xdf                   // cmovnel      %edi, %ebx
	XORL    DI, DI
	CMPQ    DX, CX
	SETEQ   DI
	INCL    DI
	LEAQ    1(DX)(DX*1), AX
	BSRQ    AX, CX
	XORQ    $63, CX
	LONG    $0xf7f162c4; BYTE $0xc8               // shlxq        %rcx, %rax, %r9
	MOVL    CX, SI
	NOTL    SI
	ADDL    BX, SI
	MOVL    BX, CX
	SUBL    DI, CX
	LONG    $0xf7c1e2c4; BYTE $0xfa               // shlxq        %rdi, %rdx, %rdi
	DECQ    DI
	SUBL    SI, CX
	MOVL    $-61, BX
	SUBL    SI, BX
	LONG    $0xc32aebc5                           // vcvtsi2sd    %ebx, %xmm2, %xmm0
	LONG    $0xf7f162c4; BYTE $0xd7               // shlxq        %rcx, %rdi, %r10
	QUAD    $0xfffffefc0d10fbc5                   // vmovsd       $-260(%rip), %xmm1  /* LCPI5_1(%rip) */
	QUAD    $0xfffefb0da9f9e2c4; BYTE $0xff       // vfmadd213sd  $-261(%rip), %xmm0, %xmm1  /* LCPI5_2(%rip) */
	LONG    $0xf92cfbc5                           // vcvttsd2si   %xmm1, %edi
	LONG    $0x0b71e3c4; WORD $0x0bc1             // vroundsd     $11, %xmm1, %xmm1, %xmm0
	LONG    $0xc05cf3c5                           // vsubsd       %xmm0, %xmm1, %xmm0
	LONG    $0xc957f1c5                           // vxorpd       %xmm1, %xmm1, %xmm1
	XORL    BX, BX
	LONG    $0xc12ef9c5                           // vucomisd     %xmm1, %xmm0
	SETHI   BX
	ADDL    DI, BX
	SARL    $3, BX
	LEAL    8(BX*8), R13
	INCL    BX
	MOVL    $348, R14
	LONG    $0x3e058d4c; WORD $0x0034; BYTE $0x00 // leaq         $13374(%rip), %r8  /* _TabPowE(%rip) */
	LONG    $0xe53d8d48; WORD $0x0034; BYTE $0x00 // leaq         $13541(%rip), %rdi  /* _TabPowF(%rip) */
	MOVQ    0(DI)(BX*8), R15
	BSRQ    DX, AX
	XORL    $63, AX
	LONG    $0xf7f9e2c4; BYTE $0xd2               // shlxq        %rax, %rdx, %rdx
	LONG    $0xf6fb42c4; BYTE $0xdf               // mulxq        %r15, %rax, %r11
	MOVBLSX 0(R8)(BX*2), CX
	MOVQ    R9, DX
	LONG    $0xf6c342c4; BYTE $0xcf               // mulxq        %r15, %rdi, %r9
	SARQ    $63, AX
	MOVQ    R10, DX
	LONG    $0xf6bbc2c4; BYTE $0xd7               // mulxq        %r15, %r8, %rdx
	SHRQ    $63, DI
	ADDL    SI, CX
	SHRQ    $63, R8
	ADDQ    DX, R8
	MOVQ    R8, -88(BP)
	NOTQ    R8
	LEAQ    -1(R9)(DI*1), R12
	MOVQ    AX, -120(BP)
	MOVQ    AX, DX
	MOVQ    R11, -112(BP)
	SUBQ    R11, DX
	MOVL    $-64, BX
	SUBL    CX, BX
	NEGL    CX
	MOVL    $1, SI
	LONG    $0xf7f1e2c4; BYTE $0xf6               // shlxq        %rcx, %rsi, %rsi
	LONG    $0xf7f342c4; BYTE $0xd4               // shrxq        %rcx, %r12, %r10
	MOVQ    R9, -104(BP)
	MOVQ    DI, -96(BP)
	ADDQ    R9, DI
	MOVL    $1, R11
	CMPQ    R10, $10
	JB      LBB5_14
	MOVL    $2, R11
	CMPQ    R10, $100
	JB      LBB5_14
	MOVL    $3, R11
	CMPQ    R10, $1000
	JB      LBB5_14
	MOVL    $4, R11
	CMPQ    R10, $10000
	JB      LBB5_14
	MOVL    $5, R11
	CMPQ    R10, $100000
	JB      LBB5_14
	MOVL    $6, R11
	CMPQ    R10, $1000000
	JB      LBB5_14
	MOVL    $7, R11
	CMPQ    R10, $10000000
	JB      LBB5_14
	MOVL    $8, R11
	CMPQ    R10, $100000000
	JB      LBB5_14
	CMPQ    R10, $1000000000
	MOVL    $10, R11
	SBBL    $0, R11

LBB5_14:
	MOVQ R13, -64(BP)
	SUBL R13, R14
	MOVQ R14, -72(BP)
	LEAQ -1(R8)(DI*1), R14
	LEAQ -1(DX)(DI*1), AX
	MOVQ AX, -80(BP)
	MOVQ SI, -128(BP)
	LEAQ -1(SI), R9
	LONG $0xf5e042c4; BYTE $0xec               // bzhiq        %rbx, %r12, %r13
	LONG $0xa6258d4c; WORD $0x0009; BYTE $0x00 // leaq         $2470(%rip), %r12  /* LJTI5_0(%rip) */
	MOVQ -56(BP), R15
	JMP  LBB5_15

LBB5_36:
	ADDB $48, R10
	MOVB R10, 0(R15)
	INCQ R15

LBB5_37:
	LONG $0xf7e1e2c4; BYTE $0xf0 // shlxq        %rbx, %rax, %rsi
	LEAQ 0(SI)(R13*1), DX
	MOVQ R14, R8
	MOVQ AX, R10
	SUBQ DX, R8
	JAE  LBB5_38

LBB5_15:
	TESTL   R11, R11
	JLE     LBB5_16
	DECL    R11
	MOVLQSX 0(R12)(R11*4), CX
	ADDQ    R12, CX
	XORL    AX, AX
	JMP     CX

LBB5_32:
	MOVQ R10, DX
	MOVQ $-3689348814741910323, AX
	LONG $0xf6f3e2c4; BYTE $0xc8   // mulxq        %rax, %rcx, %rcx
	SHRQ $3, CX
	LEAQ 0(CX)(CX*1), AX
	LEAQ 0(AX)(AX*4), AX
	JMP  LBB5_33

LBB5_31:
	MOVQ   R10, DX
	SHRQ   $2, DX
	MOVQ   $2951479051793528259, AX
	LONG   $0xf6f3e2c4; BYTE $0xc8  // mulxq        %rax, %rcx, %rcx
	SHRQ   $2, CX
	IMUL3Q $100, CX, AX
	JMP    LBB5_33

LBB5_30:
	MOVQ   R10, DX
	SHRQ   $3, DX
	MOVQ   $2361183241434822607, AX
	LONG   $0xf6f3e2c4; BYTE $0xc8  // mulxq        %rax, %rcx, %rcx
	SHRQ   $4, CX
	IMUL3Q $1000, CX, AX
	JMP    LBB5_33

LBB5_29:
	MOVQ   R10, DX
	MOVQ   $3777893186295716171, AX
	LONG   $0xf6f3e2c4; BYTE $0xc8  // mulxq        %rax, %rcx, %rcx
	SHRQ   $11, CX
	IMUL3Q $10000, CX, AX
	JMP    LBB5_33

LBB5_28:
	MOVQ   R10, DX
	SHRQ   $5, DX
	MOVQ   $755578637259143235, AX
	LONG   $0xf6f3e2c4; BYTE $0xc8 // mulxq        %rax, %rcx, %rcx
	SHRQ   $7, CX
	IMUL3Q $100000, CX, AX
	JMP    LBB5_33

LBB5_27:
	MOVQ   R10, DX
	MOVQ   $4835703278458516699, AX
	LONG   $0xf6f3e2c4; BYTE $0xc8  // mulxq        %rax, %rcx, %rcx
	SHRQ   $18, CX
	IMUL3Q $1000000, CX, AX
	JMP    LBB5_33

LBB5_26:
	MOVQ   R10, DX
	MOVQ   $-2972493582642298179, AX
	LONG   $0xf6f3e2c4; BYTE $0xc8   // mulxq        %rax, %rcx, %rcx
	SHRQ   $23, CX
	IMUL3Q $10000000, CX, AX
	JMP    LBB5_33

LBB5_25:
	MOVQ   R10, DX
	MOVQ   $-6067343680855748867, AX
	LONG   $0xf6f3e2c4; BYTE $0xc8   // mulxq        %rax, %rcx, %rcx
	SHRQ   $26, CX
	IMUL3Q $100000000, CX, AX
	JMP    LBB5_33

LBB5_24:
	MOVQ   R10, DX
	SHRQ   $9, DX
	MOVQ   $19342813113834067, AX
	LONG   $0xf6f3e2c4; BYTE $0xc8 // mulxq        %rax, %rcx, %rcx
	SHRQ   $11, CX
	IMUL3Q $1000000000, CX, AX

LBB5_33:
	SUBQ AX, R10
	MOVQ R10, AX
	MOVQ CX, R10

LBB5_34:
	CMPQ  R15, -56(BP)
	JA    LBB5_36
	TESTL R10, R10
	JE    LBB5_37
	JMP   LBB5_36

LBB5_16:
	XORL R11, R11
	MOVQ -56(BP), R12
	JMP  LBB5_17

LBB5_19:
	ADDB $48, DX
	MOVB DX, 0(R15)
	INCQ R15

LBB5_20:
	DECL R11
	MOVQ R14, CX
	SUBQ R13, CX
	JA   LBB5_21

LBB5_17:
	MOVQ    R14, AX
	ADDQ    R14, AX
	LEAQ    0(AX)(AX*4), R14
	ADDQ    R13, R13
	LEAQ    0(R13)(R13*4), R13
	LONG    $0xf7e3c2c4; BYTE $0xd5 // shrxq        %rbx, %r13, %rdx
	ANDQ    R9, R13
	CMPQ    R15, R12
	JA      LBB5_19
	MOVBLZX DX, CX
	TESTQ   CX, CX
	JE      LBB5_20
	JMP     LBB5_19

LBB5_21:
	MOVQ    -128(BP), DI
	CMPQ    CX, DI
	JB      LBB5_22
	MOVL    R11, CX
	NEGL    CX
	MOVLQSX CX, CX
	LONG    $0x84158d48; WORD $0x0034; BYTE $0x00 // leaq         $13444(%rip), %rdx  /* _TabPow10(%rip) */
	MOVQ    -80(BP), SI
	IMULQ   0(DX)(CX*8), SI
	CMPQ    R13, SI
	JAE     LBB5_22
	LEAQ    0(AX)(AX*4), AX
	LEAQ    0(DI)(R13*1), DX
	SUBQ    DX, AX
	MOVQ    SI, R8
	NEGQ    R8
	MOVQ    SI, BX
	SUBQ    R13, BX
	MOVQ    -72(BP), R14
	MOVQ    -64(BP), R10

LBB5_48:
	CMPQ DX, SI
	JB   LBB5_50
	LEAQ 0(R8)(DX*1), CX
	CMPQ BX, CX
	JBE  LBB5_52

LBB5_50:
	DECB  -1(R15)
	SUBQ  DI, AX
	SETCS CX
	CMPQ  DX, SI
	JAE   LBB5_52
	ADDQ  DI, DX
	SUBQ  DI, BX
	TESTB CX, CX
	JE    LBB5_48
	JMP   LBB5_52

LBB5_38:
	MOVQ -80(BP), R9
	CMPQ DX, R9
	JAE  LBB5_39
	MOVL R11, AX
	LONG $0x080d8d48; WORD $0x0034; BYTE $0x00 // leaq         $13320(%rip), %rcx  /* _TabPow10(%rip) */
	LONG $0xf7e1e2c4; WORD $0xc104             // shlxq        %rbx, (%rcx,%rax,8), %rax
	CMPQ R8, AX
	MOVQ -56(BP), R12
	JB   LBB5_22
	SUBQ -88(BP), DI
	ADDQ AX, R13
	LEAQ 0(R13)(SI*1), BX
	SUBQ BX, DI
	ADDQ $-2, DI
	MOVQ -112(BP), R8
	ADDQ R8, R13
	MOVQ -120(BP), CX
	SUBQ CX, R13
	MOVQ -96(BP), R14
	SUBQ R14, R13
	MOVQ -104(BP), R10
	SUBQ R10, R13
	LEAQ 1(R13)(SI*1), SI
	ADDQ R14, CX
	ADDQ R10, CX
	SUBQ R8, CX
	NOTQ DX
	ADDQ CX, DX
	MOVQ -72(BP), R14
	MOVQ -64(BP), R10

LBB5_42:
	CMPQ BX, R9
	JB   LBB5_44
	CMPQ DX, SI
	JBE  LBB5_52

LBB5_44:
	DECB  -1(R15)
	SUBQ  AX, DI
	SETCS CX
	CMPQ  BX, R9
	JAE   LBB5_52
	ADDQ  AX, BX
	ADDQ  AX, SI
	SUBQ  AX, DX
	TESTB CX, CX
	JE    LBB5_42
	JMP   LBB5_52

LBB5_39:
	MOVQ -56(BP), R12

LBB5_22:
	MOVQ -72(BP), R14
	MOVQ -64(BP), R10

LBB5_52:
	MOVQ    R15, R13
	SUBQ    R12, R13
	ADDL    R11, R14
	LEAL    0(R14)(R13*1), R9
	TESTL   R14, R14
	JS      LBB5_69
	CMPL    R9, $21
	JG      LBB5_69
	TESTL   R14, R14
	JE      LBB5_55
	MOVQ    R10, AX
	MOVLQSX R13, R10
	ADDQ    R12, R10
	SUBL    AX, R11
	ADDL    $347, R11
	CMPL    R11, $127
	JB      LBB5_66
	INCQ    R11
	MOVQ    R11, R8
	ANDQ    $-128, R8
	LEAQ    -128(R8), AX
	MOVQ    AX, DX
	SHRQ    $7, DX
	INCQ    DX
	MOVL    DX, BX
	ANDL    $3, BX
	CMPQ    AX, $384
	JAE     LBB5_59
	XORL    AX, AX
	JMP     LBB5_61

LBB5_69:
	LEAL    -1(R9), SI
	CMPL    SI, $20
	JA      LBB5_75
	LEAL    1(R13), AX
	CMPL    AX, R9
	JLE     LBB5_71
	MOVLQSX AX, DX
	MOVL    R9, CX
	MOVL    -44(BP), DI

LBB5_73:
	MOVBLZX -2(R12)(DX*1), BX
	MOVB    BX, -1(R12)(DX*1)
	LEAQ    -1(DX), SI
	MOVQ    SI, DX
	CMPQ    SI, CX
	JG      LBB5_73
	MOVB    $46, 0(R12)(CX*1)
	JMP     LBB5_125

LBB5_75:
	LEAL  5(R9), AX
	CMPL  AX, $5
	JA    LBB5_105
	MOVL  $2, AX
	MOVL  $2, DI
	SUBL  R9, DI
	LEAL  0(DI)(R13*1), DX
	TESTL DX, DX
	JLE   LBB5_92
	MOVL  DX, CX
	MOVL  DI, R8
	CMPL  DX, $128
	JAE   LBB5_78

LBB5_90:
	INCQ CX
	MOVQ R12, DX
	SUBQ R8, DX

LBB5_91:
	MOVBLZX -2(DX)(CX*1), BX
	MOVB    BX, -2(R12)(CX*1)
	DECQ    CX
	CMPQ    CX, $1
	JG      LBB5_91

LBB5_92:
	SUBL  R14, AX
	MOVW  $11824, 0(R12)
	TESTL R9, R9
	JE    LBB5_124
	NEGL  R9
	LEAQ  2(R12), SI
	SUBL  R11, R10
	SUBL  R13, R10
	ADDL  $-349, R10
	CMPL  R10, $127
	JB    LBB5_103
	INCQ  R10
	MOVQ  R10, CX
	ANDQ  $-128, CX
	LEAQ  -128(CX), DI
	MOVQ  DI, DX
	SHRQ  $7, DX
	INCQ  DX
	MOVL  DX, BX
	ANDL  $3, BX
	CMPQ  DI, $384
	JAE   LBB5_96
	XORL  DI, DI
	JMP   LBB5_98

LBB5_71:
	MOVL R9, CX
	MOVL -44(BP), DI
	MOVB $46, 0(R12)(CX*1)
	JMP  LBB5_125

LBB5_105:
	CMPL  R13, $1
	JNE   LBB5_113
	MOVB  $101, 1(R12)
	LEAQ  2(R12), DX
	TESTL SI, SI
	JS    LBB5_110
	MOVQ  DX, R12
	MOVL  SI, CX
	MOVL  -44(BP), DI
	JMP   LBB5_108

LBB5_59:
	MOVLQSX R13, AX
	LEAQ    480(AX)(R12*1), SI
	ANDQ    $-4, DX
	NEGQ    DX
	XORL    AX, AX
	QUAD    $0xfffff8ec0528fdc5 // vmovapd      $-1812(%rip), %ymm0  /* LCPI5_3(%rip) */

LBB5_60:
	QUAD $0xfffe20068411fdc5; BYTE $0xff // vmovupd      %ymm0, $-480(%rsi,%rax)
	QUAD $0xfffe40068411fdc5; BYTE $0xff // vmovupd      %ymm0, $-448(%rsi,%rax)
	QUAD $0xfffe60068411fdc5; BYTE $0xff // vmovupd      %ymm0, $-416(%rsi,%rax)
	QUAD $0xfffe80068411fdc5; BYTE $0xff // vmovupd      %ymm0, $-384(%rsi,%rax)
	QUAD $0xfffea0068411fdc5; BYTE $0xff // vmovupd      %ymm0, $-352(%rsi,%rax)
	QUAD $0xfffec0068411fdc5; BYTE $0xff // vmovupd      %ymm0, $-320(%rsi,%rax)
	QUAD $0xfffee0068411fdc5; BYTE $0xff // vmovupd      %ymm0, $-288(%rsi,%rax)
	QUAD $0xffff00068411fdc5; BYTE $0xff // vmovupd      %ymm0, $-256(%rsi,%rax)
	QUAD $0xffff20068411fdc5; BYTE $0xff // vmovupd      %ymm0, $-224(%rsi,%rax)
	QUAD $0xffff40068411fdc5; BYTE $0xff // vmovupd      %ymm0, $-192(%rsi,%rax)
	QUAD $0xffff60068411fdc5; BYTE $0xff // vmovupd      %ymm0, $-160(%rsi,%rax)
	LONG $0x4411fdc5; WORD $0x8006       // vmovupd      %ymm0, $-128(%rsi,%rax)
	LONG $0x4411fdc5; WORD $0xa006       // vmovupd      %ymm0, $-96(%rsi,%rax)
	LONG $0x4411fdc5; WORD $0xc006       // vmovupd      %ymm0, $-64(%rsi,%rax)
	LONG $0x4411fdc5; WORD $0xe006       // vmovupd      %ymm0, $-32(%rsi,%rax)
	LONG $0x0411fdc5; BYTE $0x06         // vmovupd      %ymm0, (%rsi,%rax)
	ADDQ $512, AX
	ADDQ $4, DX
	JNE  LBB5_60

LBB5_61:
	TESTQ   BX, BX
	JE      LBB5_64
	SUBL    R12, R15
	MOVLQSX R15, CX
	ADDQ    CX, AX
	LEAQ    96(R12)(AX*1), AX
	NEGQ    BX
	QUAD    $0xfffff83e0528fdc5 // vmovapd      $-1986(%rip), %ymm0  /* LCPI5_3(%rip) */

LBB5_63:
	LONG $0x4011fdc5; BYTE $0xa0 // vmovupd      %ymm0, $-96(%rax)
	LONG $0x4011fdc5; BYTE $0xc0 // vmovupd      %ymm0, $-64(%rax)
	LONG $0x4011fdc5; BYTE $0xe0 // vmovupd      %ymm0, $-32(%rax)
	LONG $0x0011fdc5             // vmovupd      %ymm0, (%rax)
	SUBQ $-128, AX
	INCQ BX
	JNE  LBB5_63

LBB5_64:
	CMPQ R11, R8
	JNE  LBB5_65

LBB5_55:
	MOVL R9, AX

LBB5_124:
	MOVL -44(BP), DI
	JMP  LBB5_125

LBB5_65:
	SUBL R8, R14
	ADDQ R8, R10

LBB5_66:
	MOVL R14, AX
	XORL CX, CX
	MOVL -44(BP), DI

LBB5_67:
	MOVB $48, 0(R10)(CX*1)
	INCQ CX
	CMPL AX, CX
	JNE  LBB5_67
	MOVL R9, AX

LBB5_125:
	ADDL DI, AX

LBB5_126:
	ADDQ $88, SP
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	RET

LBB5_113:
	LEAL 1(R13), AX
	CMPL AX, $2
	JL   LBB5_116
	MOVL AX, AX
	INCQ AX

LBB5_115:
	MOVBLZX -3(R12)(AX*1), CX
	MOVB    CX, -2(R12)(AX*1)
	DECQ    AX
	CMPQ    AX, $2
	JG      LBB5_115

LBB5_116:
	MOVB    $46, 1(R12)
	MOVLQSX R13, AX
	MOVB    $101, 1(R12)(AX*1)
	LEAQ    2(R12)(AX*1), DX
	TESTL   SI, SI
	JS      LBB5_118
	MOVQ    DX, CX
	JMP     LBB5_119

LBB5_78:
	LEAQ  -1(CX), SI
	LEAQ  -1(R12)(CX*1), DI
	CMPQ  SI, DI
	JA    LBB5_90
	MOVQ  R8, DI
	NOTQ  DI
	LEAQ  0(DI)(CX*1), BX
	ADDQ  R12, BX
	CMPQ  SI, BX
	JA    LBB5_90
	TESTL DX, DX
	MOVL  $1, DX
	LONG  $0xd1440f48       // cmoveq       %rcx, %rdx
	LEAQ  -1(DX)(R12*1), BX
	MOVQ  CX, SI
	SUBQ  R8, SI
	ADDQ  R12, SI
	CMPQ  BX, SI
	JAE   LBB5_82
	LEAQ  0(R12)(CX*1), SI
	ADDQ  DI, DX
	ADDQ  R12, DX
	CMPQ  DX, SI
	JB    LBB5_90

LBB5_82:
	MOVQ  R10, R15
	MOVL  CX, R10
	ANDL  $-128, R10
	LEAQ  -128(R10), DX
	MOVQ  DX, SI
	SHRQ  $7, SI
	INCQ  SI
	TESTQ DX, DX
	JE    LBB5_83
	LEAQ  -32(CX)(R12*1), DI
	MOVQ  R8, BX
	NEGQ  BX
	MOVQ  SI, DX
	ANDQ  $-2, DX
	NEGQ  DX
	MOVQ  $-1, R12

LBB5_85:
	LONG $0x4410fcc5; WORD $0xa01f       // vmovups      $-96(%rdi,%rbx), %ymm0
	LONG $0x4c10fcc5; WORD $0xc01f       // vmovups      $-64(%rdi,%rbx), %ymm1
	LONG $0x5410fcc5; WORD $0xe01f       // vmovups      $-32(%rdi,%rbx), %ymm2
	LONG $0x1c10fcc5; BYTE $0x1f         // vmovups      (%rdi,%rbx), %ymm3
	LONG $0x1f11fcc5                     // vmovups      %ymm3, (%rdi)
	LONG $0x5711fcc5; BYTE $0xe0         // vmovups      %ymm2, $-32(%rdi)
	LONG $0x4f11fcc5; BYTE $0xc0         // vmovups      %ymm1, $-64(%rdi)
	LONG $0x4711fcc5; BYTE $0xa0         // vmovups      %ymm0, $-96(%rdi)
	QUAD $0xffff201f8410fdc5; BYTE $0xff // vmovupd      $-224(%rdi,%rbx), %ymm0
	QUAD $0xffff401f8c10fdc5; BYTE $0xff // vmovupd      $-192(%rdi,%rbx), %ymm1
	QUAD $0xffff601f9410fcc5; BYTE $0xff // vmovups      $-160(%rdi,%rbx), %ymm2
	LONG $0x5c10fcc5; WORD $0x801f       // vmovups      $-128(%rdi,%rbx), %ymm3
	LONG $0x5f11fcc5; BYTE $0x80         // vmovups      %ymm3, $-128(%rdi)
	QUAD $0xffffff609711fcc5             // vmovups      %ymm2, $-160(%rdi)
	QUAD $0xffffff408f11fdc5             // vmovupd      %ymm1, $-192(%rdi)
	QUAD $0xffffff208711fdc5             // vmovupd      %ymm0, $-224(%rdi)
	ADDQ $-256, R12
	ADDQ $-256, DI
	ADDQ $2, DX
	JNE  LBB5_85
	JMP  LBB5_86

LBB5_110:
	MOVL SI, CX
	NEGL CX
	MOVB $45, 2(R12)
	ADDQ $3, R12
	CMPL SI, $-9
	MOVL -44(BP), DI
	JL   LBB5_108
	ADDB $48, CX
	MOVB CX, 0(R12)
	MOVL $4, AX
	JMP  LBB5_125

LBB5_108:
	MOVL R12, AX
	SUBL DX, AX
	CMPL CX, $99
	JG   LBB5_112
	ADDL $4, AX
	MOVL CX, CX
	LONG $0x72158d48; WORD $0x002f; BYTE $0x00 // leaq         $12146(%rip), %rdx  /* _Digits(%rip) */
	MOVB 0(DX)(CX*2), BX
	ADDQ CX, CX
	MOVB BX, 0(R12)
	ORL  $1, CX
	MOVB 0(CX)(DX*1), CX
	MOVB CX, 1(R12)
	JMP  LBB5_125

LBB5_112:
	ADDL   $5, AX
	MOVL   CX, DX
	IMUL3Q $1374389535, DX, DX
	SHRQ   $37, DX
	LEAL   48(DX), SI
	MOVB   SI, 0(R12)
	WORD   $0xd26b; BYTE $0x64                   // imull        $100, %edx, %edx
	SUBL   DX, CX
	LONG   $0x35158d48; WORD $0x002f; BYTE $0x00 // leaq         $12085(%rip), %rdx  /* _Digits(%rip) */
	MOVB   0(DX)(CX*2), BX
	MOVB   1(DX)(CX*2), CX
	MOVB   BX, 1(R12)
	MOVB   CX, 2(R12)
	JMP    LBB5_125

LBB5_118:
	NEGL SI
	LEAQ 1(DX), CX
	MOVB $45, 0(DX)

LBB5_119:
	CMPL SI, $9
	JG   LBB5_121
	MOVL CX, AX
	SUBL DX, AX
	LEAL 3(R13)(AX*1), AX
	ADDB $48, SI
	MOVB SI, 0(CX)
	JMP  LBB5_124

LBB5_121:
	LEAL 2(R13), DI
	MOVL CX, AX
	SUBL DX, AX
	ADDL DI, AX
	CMPL SI, $99
	JG   LBB5_123
	ADDL $2, AX
	MOVL SI, DX
	LONG $0xdd358d48; WORD $0x002e; BYTE $0x00 // leaq         $11997(%rip), %rsi  /* _Digits(%rip) */
	MOVB 0(SI)(DX*2), BX
	ADDQ DX, DX
	MOVB BX, 0(CX)
	ORL  $1, DX
	MOVB 0(DX)(SI*1), DX
	MOVB DX, 1(CX)
	JMP  LBB5_124

LBB5_96:
	ANDQ $-4, DX
	NEGQ DX
	XORL DI, DI
	QUAD $0xfffff58e0528fdc5 // vmovapd      $-2674(%rip), %ymm0  /* LCPI5_3(%rip) */

LBB5_97:
	LONG $0x117dc1c4; WORD $0x3c44; BYTE $0x02 // vmovupd      %ymm0, $2(%r12,%rdi)
	LONG $0x117dc1c4; WORD $0x3c44; BYTE $0x22 // vmovupd      %ymm0, $34(%r12,%rdi)
	LONG $0x117dc1c4; WORD $0x3c44; BYTE $0x42 // vmovupd      %ymm0, $66(%r12,%rdi)
	LONG $0x117dc1c4; WORD $0x3c44; BYTE $0x62 // vmovupd      %ymm0, $98(%r12,%rdi)
	QUAD $0x00823c84117dc1c4; WORD $0x0000     // vmovupd      %ymm0, $130(%r12,%rdi)
	QUAD $0x00a23c84117dc1c4; WORD $0x0000     // vmovupd      %ymm0, $162(%r12,%rdi)
	QUAD $0x00c23c84117dc1c4; WORD $0x0000     // vmovupd      %ymm0, $194(%r12,%rdi)
	QUAD $0x00e23c84117dc1c4; WORD $0x0000     // vmovupd      %ymm0, $226(%r12,%rdi)
	QUAD $0x01023c84117dc1c4; WORD $0x0000     // vmovupd      %ymm0, $258(%r12,%rdi)
	QUAD $0x01223c84117dc1c4; WORD $0x0000     // vmovupd      %ymm0, $290(%r12,%rdi)
	QUAD $0x01423c84117dc1c4; WORD $0x0000     // vmovupd      %ymm0, $322(%r12,%rdi)
	QUAD $0x01623c84117dc1c4; WORD $0x0000     // vmovupd      %ymm0, $354(%r12,%rdi)
	QUAD $0x01823c84117dc1c4; WORD $0x0000     // vmovupd      %ymm0, $386(%r12,%rdi)
	QUAD $0x01a23c84117dc1c4; WORD $0x0000     // vmovupd      %ymm0, $418(%r12,%rdi)
	QUAD $0x01c23c84117dc1c4; WORD $0x0000     // vmovupd      %ymm0, $450(%r12,%rdi)
	QUAD $0x01e23c84117dc1c4; WORD $0x0000     // vmovupd      %ymm0, $482(%r12,%rdi)
	ADDQ $512, DI
	ADDQ $4, DX
	JNE  LBB5_97

LBB5_98:
	TESTQ BX, BX
	JE    LBB5_101
	LEAQ  98(DI)(R12*1), DX
	NEGQ  BX
	QUAD  $0xfffff4d40528fdc5 // vmovapd      $-2860(%rip), %ymm0  /* LCPI5_3(%rip) */

LBB5_100:
	LONG $0x4211fdc5; BYTE $0xa0 // vmovupd      %ymm0, $-96(%rdx)
	LONG $0x4211fdc5; BYTE $0xc0 // vmovupd      %ymm0, $-64(%rdx)
	LONG $0x4211fdc5; BYTE $0xe0 // vmovupd      %ymm0, $-32(%rdx)
	LONG $0x0211fdc5             // vmovupd      %ymm0, (%rdx)
	SUBQ $-128, DX
	INCQ BX
	JNE  LBB5_100

LBB5_101:
	CMPQ R10, CX
	JE   LBB5_124
	SUBL CX, R9
	ADDQ CX, SI

LBB5_103:
	MOVL R9, CX
	XORL DX, DX
	MOVL -44(BP), DI

LBB5_104:
	MOVB $48, 0(SI)(DX*1)
	INCQ DX
	CMPL CX, DX
	JNE  LBB5_104
	JMP  LBB5_125

LBB5_123:
	ADDL   $3, AX
	MOVL   SI, DX
	IMUL3Q $1374389535, DX, DX
	SHRQ   $37, DX
	LEAL   48(DX), DI
	MOVB   DI, 0(CX)
	WORD   $0xd26b; BYTE $0x64                   // imull        $100, %edx, %edx
	SUBL   DX, SI
	LONG   $0x97158d48; WORD $0x002d; BYTE $0x00 // leaq         $11671(%rip), %rdx  /* _Digits(%rip) */
	MOVB   0(DX)(SI*2), BX
	MOVB   1(DX)(SI*2), DX
	MOVB   BX, 1(CX)
	MOVB   DX, 2(CX)
	JMP    LBB5_124

LBB5_83:
	MOVQ $-1, R12

LBB5_86:
	TESTB $1, SI
	JE    LBB5_88
	ADDQ  CX, R12
	MOVQ  R12, DX
	SUBQ  R8, DX
	MOVQ  -56(BP), SI
	LONG  $0x4410fdc5; WORD $0x8116             // vmovupd      $-127(%rsi,%rdx), %ymm0
	LONG  $0x4c10fdc5; WORD $0xa116             // vmovupd      $-95(%rsi,%rdx), %ymm1
	LONG  $0x5410fcc5; WORD $0xc116             // vmovups      $-63(%rsi,%rdx), %ymm2
	LONG  $0x5c10fcc5; WORD $0xe116             // vmovups      $-31(%rsi,%rdx), %ymm3
	LONG  $0x117ca1c4; WORD $0x265c; BYTE $0xe1 // vmovups      %ymm3, $-31(%rsi,%r12)
	LONG  $0x117ca1c4; WORD $0x2654; BYTE $0xc1 // vmovups      %ymm2, $-63(%rsi,%r12)
	LONG  $0x117da1c4; WORD $0x264c; BYTE $0xa1 // vmovupd      %ymm1, $-95(%rsi,%r12)
	LONG  $0x117da1c4; WORD $0x2644; BYTE $0x81 // vmovupd      %ymm0, $-127(%rsi,%r12)

LBB5_88:
	CMPQ R10, CX
	MOVQ -56(BP), R12
	MOVQ R15, R10
	JE   LBB5_92
	ANDL $127, CX
	JMP  LBB5_90

// .set L5_0_set_34, LBB5_34-LJTI5_0
// .set L5_0_set_32, LBB5_32-LJTI5_0
// .set L5_0_set_31, LBB5_31-LJTI5_0
// .set L5_0_set_30, LBB5_30-LJTI5_0
// .set L5_0_set_29, LBB5_29-LJTI5_0
// .set L5_0_set_28, LBB5_28-LJTI5_0
// .set L5_0_set_27, LBB5_27-LJTI5_0
// .set L5_0_set_26, LBB5_26-LJTI5_0
// .set L5_0_set_25, LBB5_25-LJTI5_0
// .set L5_0_set_24, LBB5_24-LJTI5_0
LJTI5_0:
	LONG $0xfffff7d1 // .long L5_0_set_34
	LONG $0xfffff699 // .long L5_0_set_32
	LONG $0xfffff6bc // .long L5_0_set_31
	LONG $0xfffff6df // .long L5_0_set_30
	LONG $0xfffff705 // .long L5_0_set_29
	LONG $0xfffff727 // .long L5_0_set_28
	LONG $0xfffff74a // .long L5_0_set_27
	LONG $0xfffff769 // .long L5_0_set_26
	LONG $0xfffff788 // .long L5_0_set_25
	LONG $0xfffff7a7 // .long L5_0_set_24

_i64toa:
	TESTQ SI, SI
	JS    LBB6_1
	JMP   _u64toa

LBB6_1:
	BYTE $0x55                   // pushq        %rbp
	WORD $0x8948; BYTE $0xe5     // movq         %rsp, %rbp
	MOVB $45, 0(DI)
	INCQ DI
	NEGQ SI
	LONG $0x000044e8; BYTE $0x00 // callq        _u64toa
	INCL AX
	BYTE $0x5d                   // popq         %rbp
	RET

LCPI7_0:
	QUAD $0x00000000d1b71759 // .quad 3518437209
	QUAD $0x00000000d1b71759 // .quad 3518437209

LCPI7_3:
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10

LCPI7_4:
	QUAD $0x3030303030303030; QUAD $0x3030303030303030 // .space 16, '0000000000000000'

LCPI7_1:
	QUAD $0x80003334147b20c5 // .quad -9223315738079846203

LCPI7_2:
	QUAD $0x8000200008000080 // .quad -9223336852348469120

_u64toa:
	BYTE    $0x55                                 // pushq        %rbp
	WORD    $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	CMPQ    SI, $9999
	JA      LBB7_8
	MOVWLZX SI, AX
	SHRL    $2, AX
	LONG    $0x147bc069; WORD $0x0000             // imull        $5243, %eax, %eax
	SHRL    $17, AX
	LEAQ    0(AX)(AX*1), DX
	WORD    $0xc06b; BYTE $0x64                   // imull        $100, %eax, %eax
	MOVL    SI, CX
	SUBL    AX, CX
	MOVWLZX CX, CX
	ADDQ    CX, CX
	CMPL    SI, $1000
	JB      LBB7_3
	LONG    $0x5a058d48; WORD $0x002c; BYTE $0x00 // leaq         $11354(%rip), %rax  /* _Digits(%rip) */
	MOVB    0(DX)(AX*1), AX
	MOVB    AX, 0(DI)
	MOVL    $1, AX
	JMP     LBB7_4

LBB7_3:
	XORL AX, AX
	CMPL SI, $100
	JB   LBB7_5

LBB7_4:
	MOVWLZX DX, DX
	ORQ     $1, DX
	LONG    $0x39358d48; WORD $0x002c; BYTE $0x00 // leaq         $11321(%rip), %rsi  /* _Digits(%rip) */
	MOVB    0(DX)(SI*1), DX
	MOVL    AX, SI
	INCL    AX
	MOVB    DX, 0(DI)(SI*1)

LBB7_6:
	LONG $0x28158d48; WORD $0x002c; BYTE $0x00 // leaq         $11304(%rip), %rdx  /* _Digits(%rip) */
	MOVB 0(CX)(DX*1), DX
	MOVL AX, SI
	INCL AX
	MOVB DX, 0(DI)(SI*1)

LBB7_7:
	MOVWLZX CX, CX
	ORQ     $1, CX
	LONG    $0x10158d48; WORD $0x002c; BYTE $0x00 // leaq         $11280(%rip), %rdx  /* _Digits(%rip) */
	MOVB    0(CX)(DX*1), CX
	MOVL    AX, DX
	INCL    AX
	MOVB    CX, 0(DI)(DX*1)
	BYTE    $0x5d                                 // popq         %rbp
	RET

LBB7_5:
	XORL AX, AX
	CMPL SI, $10
	JAE  LBB7_6
	JMP  LBB7_7

LBB7_8:
	CMPQ    SI, $99999999
	JA      LBB7_16
	MOVL    SI, CX
	MOVL    $3518437209, DX
	IMULQ   CX, DX
	SHRQ    $45, DX
	LONG    $0x10c26944; WORD $0x0027; BYTE $0x00 // imull        $10000, %edx, %r8d
	MOVL    SI, AX
	SUBL    R8, AX
	IMUL3Q  $1125899907, CX, R10
	SHRQ    $49, R10
	ANDL    $-2, R10
	MOVWLZX DX, CX
	SHRL    $2, CX
	LONG    $0x147bc969; WORD $0x0000             // imull        $5243, %ecx, %ecx
	SHRL    $17, CX
	WORD    $0xc96b; BYTE $0x64                   // imull        $100, %ecx, %ecx
	SUBL    CX, DX
	MOVWLZX DX, R9
	ADDQ    R9, R9
	MOVWLZX AX, CX
	SHRL    $2, CX
	LONG    $0x147bc969; WORD $0x0000             // imull        $5243, %ecx, %ecx
	SHRL    $17, CX
	LEAQ    0(CX)(CX*1), R8
	WORD    $0xc96b; BYTE $0x64                   // imull        $100, %ecx, %ecx
	SUBL    CX, AX
	MOVWLZX AX, R11
	ADDQ    R11, R11
	CMPL    SI, $10000000
	JB      LBB7_11
	LONG    $0x7b058d48; WORD $0x002b; BYTE $0x00 // leaq         $11131(%rip), %rax  /* _Digits(%rip) */
	MOVB    0(R10)(AX*1), AX
	MOVB    AX, 0(DI)
	MOVL    $1, AX
	JMP     LBB7_12

LBB7_11:
	XORL AX, AX
	CMPL SI, $1000000
	JB   LBB7_13

LBB7_12:
	MOVL R10, CX
	ORQ  $1, CX
	LONG $0x56358d48; WORD $0x002b; BYTE $0x00 // leaq         $11094(%rip), %rsi  /* _Digits(%rip) */
	MOVB 0(CX)(SI*1), CX
	MOVL AX, SI
	INCL AX
	MOVB CX, 0(DI)(SI*1)

LBB7_14:
	LONG $0x450d8d48; WORD $0x002b; BYTE $0x00 // leaq         $11077(%rip), %rcx  /* _Digits(%rip) */
	MOVB 0(R9)(CX*1), CX
	MOVL AX, SI
	INCL AX
	MOVB CX, 0(DI)(SI*1)

LBB7_15:
	MOVWLZX R9, CX
	ORQ     $1, CX
	LONG    $0x2b358d48; WORD $0x002b; BYTE $0x00 // leaq         $11051(%rip), %rsi  /* _Digits(%rip) */
	MOVB    0(CX)(SI*1), CX
	MOVL    AX, DX
	MOVB    CX, 0(DI)(DX*1)
	MOVB    0(R8)(SI*1), CX
	MOVB    CX, 1(DI)(DX*1)
	MOVWLZX R8, CX
	ORQ     $1, CX
	MOVB    0(CX)(SI*1), CX
	MOVB    CX, 2(DI)(DX*1)
	MOVB    0(R11)(SI*1), CX
	MOVB    CX, 3(DI)(DX*1)
	MOVWLZX R11, CX
	ORQ     $1, CX
	MOVB    0(CX)(SI*1), CX
	ADDL    $5, AX
	MOVB    CX, 4(DI)(DX*1)
	BYTE    $0x5d                                 // popq         %rbp
	RET

LBB7_13:
	XORL AX, AX
	CMPL SI, $100000
	JAE  LBB7_14
	JMP  LBB7_15

LBB7_16:
	MOVQ $9999999999999999, AX
	CMPQ SI, AX
	JA   LBB7_18
	MOVQ $-6067343680855748867, AX
	MOVQ SI, DX
	LONG $0xf6fbe2c4; BYTE $0xc0               // mulxq        %rax, %rax, %rax
	SHRQ $26, AX
	LONG $0xe100c869; WORD $0x05f5             // imull        $100000000, %eax, %ecx
	SUBL CX, SI
	LONG $0xc06ef9c5                           // vmovd        %eax, %xmm0
	QUAD $0xfffffdcd0d6ffac5                   // vmovdqu      $-563(%rip), %xmm1  /* LCPI7_0(%rip) */
	LONG $0xd1f4f9c5                           // vpmuludq     %xmm1, %xmm0, %xmm2
	LONG $0xd273e9c5; BYTE $0x2d               // vpsrlq       $45, %xmm2, %xmm2
	MOVL $10000, AX
	LONG $0x6ef9e1c4; BYTE $0xd8               // vmovq        %rax, %xmm3
	LONG $0xe3f4e9c5                           // vpmuludq     %xmm3, %xmm2, %xmm4
	LONG $0xc4faf9c5                           // vpsubd       %xmm4, %xmm0, %xmm0
	LONG $0xc061e9c5                           // vpunpcklwd   %xmm0, %xmm2, %xmm0
	LONG $0xf073f9c5; BYTE $0x02               // vpsllq       $2, %xmm0, %xmm0
	LONG $0xc070fbc5; BYTE $0x50               // vpshuflw     $80, %xmm0, %xmm0
	LONG $0xc070f9c5; BYTE $0x50               // vpshufd      $80, %xmm0, %xmm0
	QUAD $0xfffdc6155979e2c4; BYTE $0xff       // vpbroadcastq $-570(%rip), %xmm2  /* LCPI7_1(%rip) */
	QUAD $0xfffdc5255979e2c4; BYTE $0xff       // vpbroadcastq $-571(%rip), %xmm4  /* LCPI7_2(%rip) */
	LONG $0xc2e4f9c5                           // vpmulhuw     %xmm2, %xmm0, %xmm0
	LONG $0xc4e4f9c5                           // vpmulhuw     %xmm4, %xmm0, %xmm0
	QUAD $0xfffffd8d2d6ffac5                   // vmovdqu      $-627(%rip), %xmm5  /* LCPI7_3(%rip) */
	LONG $0xf5d5f9c5                           // vpmullw      %xmm5, %xmm0, %xmm6
	LONG $0xf673c9c5; BYTE $0x10               // vpsllq       $16, %xmm6, %xmm6
	LONG $0xc6f9f9c5                           // vpsubw       %xmm6, %xmm0, %xmm0
	LONG $0xf66ef9c5                           // vmovd        %esi, %xmm6
	LONG $0xc9f4c9c5                           // vpmuludq     %xmm1, %xmm6, %xmm1
	LONG $0xd173f1c5; BYTE $0x2d               // vpsrlq       $45, %xmm1, %xmm1
	LONG $0xdbf4f1c5                           // vpmuludq     %xmm3, %xmm1, %xmm3
	LONG $0xdbfac9c5                           // vpsubd       %xmm3, %xmm6, %xmm3
	LONG $0xcb61f1c5                           // vpunpcklwd   %xmm3, %xmm1, %xmm1
	LONG $0xf173f1c5; BYTE $0x02               // vpsllq       $2, %xmm1, %xmm1
	LONG $0xc970fbc5; BYTE $0x50               // vpshuflw     $80, %xmm1, %xmm1
	LONG $0xc970f9c5; BYTE $0x50               // vpshufd      $80, %xmm1, %xmm1
	LONG $0xcae4f1c5                           // vpmulhuw     %xmm2, %xmm1, %xmm1
	LONG $0xcce4f1c5                           // vpmulhuw     %xmm4, %xmm1, %xmm1
	LONG $0xd5d5f1c5                           // vpmullw      %xmm5, %xmm1, %xmm2
	LONG $0xf273e9c5; BYTE $0x10               // vpsllq       $16, %xmm2, %xmm2
	LONG $0xcaf9f1c5                           // vpsubw       %xmm2, %xmm1, %xmm1
	LONG $0xc167f9c5                           // vpackuswb    %xmm1, %xmm0, %xmm0
	QUAD $0xfffffd470dfcf9c5                   // vpaddb       $-697(%rip), %xmm0, %xmm1  /* LCPI7_4(%rip) */
	LONG $0xd2efe9c5                           // vpxor        %xmm2, %xmm2, %xmm2
	LONG $0xc274f9c5                           // vpcmpeqb     %xmm2, %xmm0, %xmm0
	LONG $0xc0d7f9c5                           // vpmovmskb    %xmm0, %eax
	ORL  $32768, AX
	XORL $-32769, AX
	LONG $0xc8bc0ff3                           // tzcntl       %eax, %ecx
	MOVL $16, AX
	SUBL CX, AX
	SHLQ $4, CX
	LONG $0x9d158d48; WORD $0x002a; BYTE $0x00 // leaq         $10909(%rip), %rdx  /* _VecShiftShuffles(%rip) */
	LONG $0x0071e2c4; WORD $0x1104             // vpshufb      (%rcx,%rdx), %xmm1, %xmm0
	LONG $0x077ffac5                           // vmovdqu      %xmm0, (%rdi)
	BYTE $0x5d                                 // popq         %rbp
	RET

LBB7_18:
	MOVQ  $4153837486827862103, AX
	MOVQ  SI, DX
	LONG  $0xf6fbe2c4; BYTE $0xc0  // mulxq        %rax, %rax, %rax
	SHRQ  $51, AX
	MOVQ  $10000000000000000, CX
	IMULQ AX, CX
	SUBQ  CX, SI
	CMPL  AX, $9
	JA    LBB7_20
	ADDB  $48, AX
	MOVB  AX, 0(DI)
	MOVL  $1, AX
	JMP   LBB7_25

LBB7_20:
	CMPL AX, $99
	JA   LBB7_22
	MOVL AX, AX
	LONG $0x810d8d48; WORD $0x0029; BYTE $0x00 // leaq         $10625(%rip), %rcx  /* _Digits(%rip) */
	MOVB 0(CX)(AX*2), DX
	MOVB 1(CX)(AX*2), AX
	MOVB DX, 0(DI)
	MOVB AX, 1(DI)
	MOVL $2, AX
	JMP  LBB7_25

LBB7_22:
	MOVL    AX, CX
	SHRL    $2, CX
	LONG    $0x147bc969; WORD $0x0000             // imull        $5243, %ecx, %ecx
	SHRL    $17, CX
	CMPL    AX, $999
	JA      LBB7_24
	ADDL    $48, CX
	MOVB    CX, 0(DI)
	MOVWLZX AX, AX
	MOVL    AX, CX
	SHRL    $2, CX
	LONG    $0x147bc969; WORD $0x0000             // imull        $5243, %ecx, %ecx
	SHRL    $17, CX
	WORD    $0xc96b; BYTE $0x64                   // imull        $100, %ecx, %ecx
	SUBL    CX, AX
	MOVWLZX AX, AX
	LONG    $0x310d8d48; WORD $0x0029; BYTE $0x00 // leaq         $10545(%rip), %rcx  /* _Digits(%rip) */
	MOVB    0(CX)(AX*2), DX
	MOVB    1(CX)(AX*2), AX
	MOVB    DX, 1(DI)
	MOVB    AX, 2(DI)
	MOVL    $3, AX
	JMP     LBB7_25

LBB7_24:
	WORD    $0xd16b; BYTE $0x64                   // imull        $100, %ecx, %edx
	SUBL    DX, AX
	MOVWLZX CX, CX
	LONG    $0x0e058d4c; WORD $0x0029; BYTE $0x00 // leaq         $10510(%rip), %r8  /* _Digits(%rip) */
	MOVB    0(R8)(CX*2), DX
	MOVB    1(R8)(CX*2), CX
	MOVB    DX, 0(DI)
	MOVB    CX, 1(DI)
	MOVWLZX AX, AX
	MOVB    0(R8)(AX*2), CX
	ADDQ    AX, AX
	MOVB    CX, 2(DI)
	ORL     $1, AX
	MOVWLZX AX, AX
	MOVB    0(AX)(R8*1), AX
	MOVB    AX, 3(DI)
	MOVL    $4, AX

LBB7_25:
	MOVQ $-6067343680855748867, CX
	MOVQ SI, DX
	LONG $0xf6f3e2c4; BYTE $0xc9         // mulxq        %rcx, %rcx, %rcx
	SHRQ $26, CX
	LONG $0xc16ef9c5                     // vmovd        %ecx, %xmm0
	QUAD $0xfffffbe50d6ffac5             // vmovdqu      $-1051(%rip), %xmm1  /* LCPI7_0(%rip) */
	LONG $0xd1f4f9c5                     // vpmuludq     %xmm1, %xmm0, %xmm2
	LONG $0xd273e9c5; BYTE $0x2d         // vpsrlq       $45, %xmm2, %xmm2
	MOVL $10000, DX
	LONG $0x6ef9e1c4; BYTE $0xda         // vmovq        %rdx, %xmm3
	LONG $0xe3f4e9c5                     // vpmuludq     %xmm3, %xmm2, %xmm4
	LONG $0xc4faf9c5                     // vpsubd       %xmm4, %xmm0, %xmm0
	LONG $0xc061e9c5                     // vpunpcklwd   %xmm0, %xmm2, %xmm0
	LONG $0xf073f9c5; BYTE $0x02         // vpsllq       $2, %xmm0, %xmm0
	LONG $0xc070fbc5; BYTE $0x50         // vpshuflw     $80, %xmm0, %xmm0
	QUAD $0xfffbe3155979e2c4; BYTE $0xff // vpbroadcastq $-1053(%rip), %xmm2  /* LCPI7_1(%rip) */
	LONG $0xc070f9c5; BYTE $0x50         // vpshufd      $80, %xmm0, %xmm0
	LONG $0xc2e4f9c5                     // vpmulhuw     %xmm2, %xmm0, %xmm0
	QUAD $0xfffbd9255979e2c4; BYTE $0xff // vpbroadcastq $-1063(%rip), %xmm4  /* LCPI7_2(%rip) */
	LONG $0xc4e4f9c5                     // vpmulhuw     %xmm4, %xmm0, %xmm0
	QUAD $0xfffffba52d6ffac5             // vmovdqu      $-1115(%rip), %xmm5  /* LCPI7_3(%rip) */
	LONG $0xf5d5f9c5                     // vpmullw      %xmm5, %xmm0, %xmm6
	LONG $0xf673c9c5; BYTE $0x10         // vpsllq       $16, %xmm6, %xmm6
	LONG $0xc6f9f9c5                     // vpsubw       %xmm6, %xmm0, %xmm0
	LONG $0xe100c969; WORD $0x05f5       // imull        $100000000, %ecx, %ecx
	SUBL CX, SI
	LONG $0xf66ef9c5                     // vmovd        %esi, %xmm6
	LONG $0xc9f4c9c5                     // vpmuludq     %xmm1, %xmm6, %xmm1
	LONG $0xd173f1c5; BYTE $0x2d         // vpsrlq       $45, %xmm1, %xmm1
	LONG $0xdbf4f1c5                     // vpmuludq     %xmm3, %xmm1, %xmm3
	LONG $0xdbfac9c5                     // vpsubd       %xmm3, %xmm6, %xmm3
	LONG $0xcb61f1c5                     // vpunpcklwd   %xmm3, %xmm1, %xmm1
	LONG $0xf173f1c5; BYTE $0x02         // vpsllq       $2, %xmm1, %xmm1
	LONG $0xc970fbc5; BYTE $0x50         // vpshuflw     $80, %xmm1, %xmm1
	LONG $0xc970f9c5; BYTE $0x50         // vpshufd      $80, %xmm1, %xmm1
	LONG $0xcae4f1c5                     // vpmulhuw     %xmm2, %xmm1, %xmm1
	LONG $0xcce4f1c5                     // vpmulhuw     %xmm4, %xmm1, %xmm1
	LONG $0xd5d5f1c5                     // vpmullw      %xmm5, %xmm1, %xmm2
	LONG $0xf273e9c5; BYTE $0x10         // vpsllq       $16, %xmm2, %xmm2
	LONG $0xcaf9f1c5                     // vpsubw       %xmm2, %xmm1, %xmm1
	LONG $0xc167f9c5                     // vpackuswb    %xmm1, %xmm0, %xmm0
	QUAD $0xfffffb5705fcf9c5             // vpaddb       $-1193(%rip), %xmm0, %xmm0  /* LCPI7_4(%rip) */
	MOVL AX, CX
	LONG $0x047ffac5; BYTE $0x0f         // vmovdqu      %xmm0, (%rdi,%rcx)
	ORL  $16, AX
	BYTE $0x5d                           // popq         %rbp
	RET

LCPI8_0:
	QUAD $0x5c5c5c5c5c5c5c5c; QUAD $0x5c5c5c5c5c5c5c5c // .space 16, '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'
	QUAD $0x5c5c5c5c5c5c5c5c; QUAD $0x5c5c5c5c5c5c5c5c // .space 16, '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'

LCPI8_1:
	QUAD $0x5c5c5c5c5c5c5c5c; QUAD $0x5c5c5c5c5c5c5c5c // .space 16, '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'

_unquote:
	BYTE  $0x55                                 // pushq        %rbp
	WORD  $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD  $0x5741                               // pushq        %r15
	WORD  $0x5641                               // pushq        %r14
	WORD  $0x5541                               // pushq        %r13
	WORD  $0x5441                               // pushq        %r12
	BYTE  $0x53                                 // pushq        %rbx
	SUBQ  $16, SP
	TESTQ SI, SI
	JE    LBB8_1
	MOVQ  CX, -48(BP)
	MOVQ  R8, AX
	MOVQ  R8, -56(BP)
	MOVL  R8, R10
	ANDL  $1, R10
	LONG  $0xfe058d4c; WORD $0x0028; BYTE $0x00 // leaq         $10494(%rip), %r8  /* __UnquoteTab(%rip) */
	QUAD  $0xffffff990d6ffec5                   // vmovdqu      $-103(%rip), %ymm1  /* LCPI8_0(%rip) */
	MOVQ  DI, R9
	MOVQ  SI, R14
	MOVQ  DX, AX
	JMP   LBB8_3

LBB8_1:
	XORL R14, R14
	MOVQ DX, AX

LBB8_95:
	ADDQ R14, AX
	SUBQ DX, AX

LBB8_96:
	ADDQ $16, SP
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	RET

LBB8_53:
	MOVB R11, 0(AX)
	INCQ AX

LBB8_54:
	MOVQ R12, R14
	MOVQ R15, R9

LBB8_93:
	TESTQ R14, R14
	JE    LBB8_94

LBB8_3:
	CMPB 0(R9), $92
	JNE  LBB8_5
	XORL BX, BX
	JMP  LBB8_20

LBB8_5:
	MOVQ AX, R11
	MOVQ R9, R15
	MOVQ R14, R12
	CMPQ R14, $32
	JL   LBB8_10
	MOVQ R14, CX
	MOVQ R9, R15
	MOVQ AX, R11

LBB8_7:
	LONG  $0x6f7ec1c4; BYTE $0x07 // vmovdqu      (%r15), %ymm0
	LONG  $0x7f7ec1c4; BYTE $0x03 // vmovdqu      %ymm0, (%r11)
	LONG  $0xc174fdc5             // vpcmpeqb     %ymm1, %ymm0, %ymm0
	LONG  $0xd8d7fdc5             // vpmovmskb    %ymm0, %ebx
	TESTL BX, BX
	JNE   LBB8_8
	ADDQ  $32, R15
	ADDQ  $32, R11
	LEAQ  -32(CX), R12
	CMPQ  CX, $63
	MOVQ  R12, CX
	JG    LBB8_7

LBB8_10:
	WORD    $0xf8c5; BYTE $0x77     // vzeroupper
	CMPQ    R12, $16
	JL      LBB8_14
	LONG    $0x6f7ac1c4; BYTE $0x07 // vmovdqu      (%r15), %xmm0
	LONG    $0x7f7ac1c4; BYTE $0x03 // vmovdqu      %xmm0, (%r11)
	QUAD    $0xffffff100574f9c5     // vpcmpeqb     $-240(%rip), %xmm0, %xmm0  /* LCPI8_1(%rip) */
	LONG    $0xc8d7f9c5             // vpmovmskb    %xmm0, %ecx
	TESTW   CX, CX
	JE      LBB8_13
	SUBQ    R9, R15
	MOVWLZX CX, CX
	LONG    $0xbc0f48f3; BYTE $0xd9 // tzcntq       %rcx, %rbx
	ADDQ    R15, BX
	QUAD    $0xfffffed10d6ffec5     // vmovdqu      $-303(%rip), %ymm1  /* LCPI8_0(%rip) */
	JMP     LBB8_19

LBB8_8:
	SUBQ    R9, R15
	MOVLQSX BX, CX
	LONG    $0xbc0f48f3; BYTE $0xd9 // tzcntq       %rcx, %rbx
	ADDQ    R15, BX
	JMP     LBB8_19

LBB8_13:
	ADDQ $16, R15
	ADDQ $16, R11
	ADDQ $-16, R12

LBB8_14:
	QUAD  $0xfffffeab0d6ffec5 // vmovdqu      $-341(%rip), %ymm1  /* LCPI8_0(%rip) */
	TESTQ R12, R12
	JE    LBB8_95
	XORL  CX, CX

LBB8_16:
	MOVBLZX 0(R15)(CX*1), BX
	CMPB    BX, $92
	JE      LBB8_18
	MOVB    BX, 0(R11)(CX*1)
	INCQ    CX
	CMPQ    R12, CX
	JNE     LBB8_16
	JMP     LBB8_95

LBB8_18:
	ADDQ CX, R15
	SUBQ R9, R15
	MOVQ R15, BX

LBB8_19:
	CMPQ BX, $-1
	JE   LBB8_95

LBB8_20:
	LEAQ  2(BX), CX
	SUBQ  CX, R14
	JS    LBB8_21
	LEAQ  2(R9)(BX*1), R9
	TESTQ R10, R10
	JNE   LBB8_23

LBB8_34:
	ADDQ    BX, AX
	MOVBLZX -1(R9), CX
	MOVB    0(CX)(R8*1), CX
	CMPB    CX, $-1
	JE      LBB8_38
	TESTB   CX, CX
	JE      LBB8_36
	MOVB    CX, 0(AX)
	INCQ    AX
	JMP     LBB8_93

LBB8_38:
	CMPQ    R14, $3
	JLE     LBB8_21
	MOVL    0(R9), R15
	MOVL    R15, CX
	NOTL    CX
	LEAL    -808464432(R15), BX
	ANDL    $-2139062144, CX
	TESTL   BX, CX
	JNE     LBB8_43
	LEAL    421075225(R15), BX
	ORL     R15, BX
	TESTL   $-2139062144, BX
	JNE     LBB8_43
	MOVL    R15, BX
	ANDL    $2139062143, BX
	MOVL    $-1061109568, R11
	SUBL    BX, R11
	LEAL    1179010630(BX), R12
	ANDL    CX, R11
	TESTL   R12, R11
	JNE     LBB8_43
	MOVL    $-522133280, R11
	SUBL    BX, R11
	ADDL    $960051513, BX
	ANDL    R11, CX
	TESTL   BX, CX
	JNE     LBB8_43
	BSWAPL  R15
	MOVL    R15, CX
	SHRL    $4, CX
	NOTL    CX
	ANDL    $16843009, CX
	LEAL    0(CX)(CX*8), CX
	ANDL    $252645135, R15
	ADDL    CX, R15
	MOVL    R15, R11
	SHRL    $4, R11
	ORL     R15, R11
	MOVL    R11, CX
	SHRL    $8, CX
	ANDL    $65280, CX
	MOVBLZX R11, R13
	ORL     CX, R13
	LEAQ    4(R9), R15
	LEAQ    -4(R14), R12
	CMPL    R13, $127
	JBE     LBB8_53
	CMPL    R13, $2047
	JBE     LBB8_56
	MOVL    R11, BX
	ANDL    $16252928, BX
	CMPL    BX, $14155776
	JE      LBB8_59
	SHRL    $12, CX
	ORB     $-32, CX
	MOVB    CX, 0(AX)
	SHRL    $6, R13
	ANDB    $63, R13
	ORB     $-128, R13
	MOVB    R13, 1(AX)
	ANDB    $63, R11
	ORB     $-128, R11
	MOVB    R11, 2(AX)
	ADDQ    $3, AX
	JMP     LBB8_54

LBB8_23:
	TESTL R14, R14
	JE    LBB8_21
	CMPB  -1(R9), $92
	JNE   LBB8_25
	CMPB  0(R9), $92
	JNE   LBB8_33
	CMPL  R14, $1
	JLE   LBB8_21
	MOVB  1(R9), CX
	CMPB  CX, $34
	JE    LBB8_32
	CMPB  CX, $92
	JNE   LBB8_31

LBB8_32:
	INCQ R9
	DECQ R14

LBB8_33:
	INCQ R9
	DECQ R14
	JMP  LBB8_34

LBB8_56:
	SHRL $6, R13
	ORB  $-64, R13
	MOVB R13, 0(AX)
	ANDB $63, R11
	ORB  $-128, R11
	MOVB R11, 1(AX)
	ADDQ $2, AX
	JMP  LBB8_54

LBB8_59:
	TESTQ R10, R10
	JNE   LBB8_61
	MOVQ  R12, R14
	MOVQ  R15, R9
	JMP   LBB8_65

LBB8_61:
	CMPQ R14, $4
	JLE  LBB8_21
	CMPB 0(R15), $92
	JNE  LBB8_63
	ADDQ $-5, R14
	ADDQ $5, R9

LBB8_65:
	CMPL    R13, $56319
	JA      LBB8_69
	CMPQ    R14, $6
	JL      LBB8_69
	CMPB    0(R9), $92
	JNE     LBB8_69
	CMPB    1(R9), $117
	JNE     LBB8_69
	MOVL    2(R9), R11
	MOVL    R11, CX
	NOTL    CX
	LEAL    -808464432(R11), BX
	ANDL    $-2139062144, CX
	TESTL   BX, CX
	JNE     LBB8_77
	LEAL    421075225(R11), BX
	ORL     R11, BX
	TESTL   $-2139062144, BX
	JNE     LBB8_77
	MOVL    R11, BX
	ANDL    $2139062143, BX
	MOVL    $-1061109568, R15
	SUBL    BX, R15
	LEAL    1179010630(BX), R12
	ANDL    CX, R15
	TESTL   R12, R15
	JNE     LBB8_77
	MOVL    $-522133280, R15
	SUBL    BX, R15
	ADDL    $960051513, BX
	ANDL    R15, CX
	TESTL   BX, CX
	JNE     LBB8_77
	BSWAPL  R11
	MOVL    R11, CX
	SHRL    $4, CX
	NOTL    CX
	ANDL    $16843009, CX
	LEAL    0(CX)(CX*8), CX
	ANDL    $252645135, R11
	ADDL    CX, R11
	MOVL    R11, BX
	SHRL    $4, BX
	ORL     R11, BX
	ADDQ    $6, R9
	ADDQ    $-6, R14
	MOVL    BX, CX
	ANDL    $16515072, CX
	CMPL    CX, $14417920
	JNE     LBB8_87
	MOVL    BX, CX
	SHRL    $8, CX
	ANDL    $65280, CX
	MOVBLZX BX, BX
	ORL     CX, BX
	SHLL    $10, R13
	LEAL    -56613888(R13)(BX*1), BX
	CMPL    BX, $1114112
	JB      LBB8_92
	TESTB   $2, -56(BP)
	JE      LBB8_88
	JMP     LBB8_70

LBB8_69:
	TESTB $2, -56(BP)
	JE    LBB8_71

LBB8_70:
	MOVW $-16401, 0(AX)
	MOVB $-67, 2(AX)
	ADDQ $3, AX
	JMP  LBB8_93

LBB8_87:
	TESTB $2, -56(BP)
	JE    LBB8_88
	MOVL  $-272777233, 0(AX)
	MOVW  $-16961, 4(AX)
	ADDQ  $6, AX
	JMP   LBB8_93

LBB8_92:
	MOVL BX, CX
	SHRL $18, CX
	ORB  $-16, CX
	MOVB CX, 0(AX)
	MOVL BX, CX
	SHRL $12, CX
	ANDB $63, CX
	ORB  $-128, CX
	MOVB CX, 1(AX)
	MOVL BX, CX
	SHRL $6, CX
	ANDB $63, CX
	ORB  $-128, CX
	MOVB CX, 2(AX)
	ANDB $63, BX
	ORB  $-128, BX
	MOVB BX, 3(AX)
	ADDQ $4, AX
	JMP  LBB8_93

LBB8_43:
	MOVQ R9, DX
	SUBQ DI, DX
	MOVQ -48(BP), DI
	MOVQ DX, 0(DI)
	MOVB 0(R9), CX
	LEAL -48(CX), SI
	MOVQ $-2, AX
	CMPB SI, $10
	JB   LBB8_45
	ANDB $-33, CX
	ADDB $-65, CX
	CMPB CX, $5
	JA   LBB8_96

LBB8_45:
	LEAQ 1(DX), CX
	MOVQ CX, 0(DI)
	MOVB 1(R9), CX
	LEAL -48(CX), SI
	CMPB SI, $10
	JB   LBB8_47
	ANDB $-33, CX
	ADDB $-65, CX
	CMPB CX, $5
	JA   LBB8_96

LBB8_47:
	LEAQ 2(DX), CX
	MOVQ CX, 0(DI)
	MOVB 2(R9), CX
	LEAL -48(CX), SI
	CMPB SI, $10
	JB   LBB8_49
	ANDB $-33, CX
	ADDB $-65, CX
	CMPB CX, $5
	JA   LBB8_96

LBB8_49:
	LEAQ 3(DX), CX
	MOVQ CX, 0(DI)
	MOVB 3(R9), CX
	LEAL -48(CX), SI
	CMPB SI, $10
	JB   LBB8_51
	ANDB $-33, CX
	ADDB $-65, CX
	CMPB CX, $5
	JA   LBB8_96

LBB8_51:
	ADDQ $4, DX
	MOVQ DX, 0(DI)
	JMP  LBB8_96

LBB8_21:
	MOVQ -48(BP), AX
	MOVQ SI, 0(AX)
	MOVQ $-1, AX
	JMP  LBB8_96

LBB8_36:
	NOTQ DI
	ADDQ DI, R9
	MOVQ -48(BP), AX
	MOVQ R9, 0(AX)
	MOVQ $-3, AX
	JMP  LBB8_96

LBB8_94:
	XORL R14, R14
	JMP  LBB8_95

LBB8_88:
	SUBQ DI, R9
	ADDQ $-4, R9

LBB8_72:
	MOVQ -48(BP), AX
	MOVQ R9, 0(AX)
	MOVQ $-4, AX
	JMP  LBB8_96

LBB8_25:
	NOTQ DI
	ADDQ DI, R9
	JMP  LBB8_26

LBB8_31:
	SUBQ DI, R9
	INCQ R9

LBB8_26:
	MOVQ -48(BP), AX
	MOVQ R9, 0(AX)
	MOVQ $-2, AX
	JMP  LBB8_96

LBB8_63:
	SUBQ DI, R15
	ADDQ $-4, R15
	MOVQ -48(BP), AX
	MOVQ R15, 0(AX)
	MOVQ $-4, AX
	JMP  LBB8_96

LBB8_77:
	MOVQ R9, DX
	SUBQ DI, DX
	ADDQ $2, DX
	MOVQ -48(BP), AX
	MOVQ DX, 0(AX)
	MOVB 2(R9), CX
	LEAL -48(CX), SI
	MOVQ $-2, AX
	CMPB SI, $10
	JB   LBB8_79
	ANDB $-33, CX
	ADDB $-65, CX
	CMPB CX, $5
	JA   LBB8_96

LBB8_79:
	LEAQ 1(DX), CX
	MOVQ -48(BP), SI
	MOVQ CX, 0(SI)
	MOVB 3(R9), CX
	LEAL -48(CX), SI
	CMPB SI, $10
	JB   LBB8_81
	ANDB $-33, CX
	ADDB $-65, CX
	CMPB CX, $5
	JA   LBB8_96

LBB8_81:
	LEAQ 2(DX), CX
	MOVQ -48(BP), SI
	MOVQ CX, 0(SI)
	MOVB 4(R9), CX
	LEAL -48(CX), SI
	CMPB SI, $10
	JB   LBB8_83
	ANDB $-33, CX
	ADDB $-65, CX
	CMPB CX, $5
	JA   LBB8_96

LBB8_83:
	LEAQ 3(DX), CX
	MOVQ -48(BP), SI
	MOVQ CX, 0(SI)
	MOVB 5(R9), CX
	LEAL -48(CX), SI
	CMPB SI, $10
	JB   LBB8_85
	ANDB $-33, CX
	ADDB $-65, CX
	CMPB CX, $5
	JA   LBB8_96

LBB8_85:
	ADDQ $4, DX
	MOVQ -48(BP), CX
	MOVQ DX, 0(CX)
	JMP  LBB8_96

LBB8_71:
	LEAQ 4(R10)(DI*1), AX
	SUBQ AX, R9
	JMP  LBB8_72

_value:
	BYTE    $0x55                                 // pushq        %rbp
	WORD    $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD    $0x5741                               // pushq        %r15
	WORD    $0x5641                               // pushq        %r14
	BYTE    $0x53                                 // pushq        %rbx
	SUBQ    $24, SP
	MOVQ    CX, R14
	MOVQ    SI, BX
	MOVQ    DI, R15
	MOVQ    DI, -48(BP)
	MOVQ    SI, -40(BP)
	LONG    $0xffe15be8; BYTE $0xff               // callq        _lspace
	MOVQ    AX, -32(BP)
	CMPQ    AX, BX
	JAE     LBB9_4
	LEAQ    1(AX), CX
	MOVQ    CX, -32(BP)
	MOVBLSX 0(R15)(AX*1), DX
	CMPL    DX, $123
	JA      LBB9_6
	LONG    $0xa7358d48; WORD $0x0001; BYTE $0x00 // leaq         $423(%rip), %rsi  /* LJTI9_0(%rip) */
	MOVLQSX 0(SI)(DX*4), DX
	ADDQ    SI, DX
	JMP     DX

LBB9_3:
	MOVQ AX, -32(BP)
	LEAQ -48(BP), DI
	LEAQ -32(BP), SI
	MOVQ R14, DX
	LONG $0x000867e8; BYTE $0x00 // callq        _vnumber
	JMP  LBB9_5

LBB9_4:
	MOVQ $1, 0(R14)

LBB9_5:
	MOVQ -32(BP), AX
	ADDQ $24, SP
	BYTE $0x5b       // popq         %rbx
	WORD $0x5e41     // popq         %r14
	WORD $0x5f41     // popq         %r15
	BYTE $0x5d       // popq         %rbp
	RET

LBB9_6:
	MOVQ $-2, 0(R14)
	JMP  LBB9_5

LBB9_7:
	LEAQ -48(BP), DI
	LEAQ -32(BP), SI
	MOVQ R14, DX
	LONG $0x000369e8; BYTE $0x00 // callq        _vstring
	JMP  LBB9_5

LBB9_8:
	LEAQ -4(BX), DX
	CMPQ AX, DX
	JAE  LBB9_19
	MOVL 0(R15)(CX*1), DX
	CMPL DX, $1702063201
	JNE  LBB9_21
	ADDQ $5, AX
	MOVQ AX, -32(BP)
	MOVL $4, AX
	MOVQ AX, 0(R14)
	JMP  LBB9_5

LBB9_11:
	LEAQ -3(BX), CX
	CMPQ AX, CX
	JAE  LBB9_20
	MOVL 0(R15)(AX*1), DX
	CMPL DX, $1819047278
	JNE  LBB9_26
	ADDQ $4, AX
	MOVQ AX, -32(BP)
	MOVL $2, CX
	MOVQ CX, 0(R14)
	JMP  LBB9_5

LBB9_14:
	MOVQ $6, 0(R14)
	JMP  LBB9_5

LBB9_15:
	MOVQ $5, 0(R14)
	JMP  LBB9_5

LBB9_16:
	LEAQ -3(BX), CX
	CMPQ AX, CX
	JAE  LBB9_20
	MOVL 0(R15)(AX*1), DX
	CMPL DX, $1702195828
	JNE  LBB9_31
	ADDQ $4, AX
	MOVQ AX, -32(BP)
	MOVL $3, CX
	MOVQ CX, 0(R14)
	JMP  LBB9_5

LBB9_20:
	MOVQ BX, -32(BP)
	MOVQ $-1, CX
	MOVQ CX, 0(R14)
	JMP  LBB9_5

LBB9_19:
	MOVQ BX, -32(BP)
	MOVQ $-1, AX
	MOVQ AX, 0(R14)
	JMP  LBB9_5

LBB9_21:
	MOVQ $-2, AX
	CMPB DX, $97
	JNE  LBB9_25
	MOVL $1702063201, DX

LBB9_23:
	SHRL    $8, DX
	MOVBLSX 1(R15)(CX*1), SI
	INCQ    CX
	MOVBLZX DX, DI
	CMPL    DI, SI
	JE      LBB9_23
	MOVQ    CX, -32(BP)

LBB9_25:
	MOVQ AX, 0(R14)
	JMP  LBB9_5

LBB9_26:
	MOVQ AX, -32(BP)
	MOVQ $-2, CX
	CMPB DX, $110
	JNE  LBB9_30
	MOVL $1819047278, DX

LBB9_28:
	SHRL    $8, DX
	MOVBLSX 1(R15)(AX*1), SI
	INCQ    AX
	MOVBLZX DX, DI
	CMPL    DI, SI
	JE      LBB9_28
	JMP     LBB9_29

LBB9_31:
	MOVQ AX, -32(BP)
	MOVQ $-2, CX
	CMPB DX, $116
	JNE  LBB9_30
	MOVL $1702195828, DX

LBB9_33:
	SHRL    $8, DX
	MOVBLSX 1(R15)(AX*1), SI
	INCQ    AX
	MOVBLZX DX, DI
	CMPL    DI, SI
	JE      LBB9_33

LBB9_29:
	MOVQ AX, -32(BP)

LBB9_30:
	MOVQ CX, 0(R14)
	JMP  LBB9_5

// .set L9_0_set_4, LBB9_4-LJTI9_0
// .set L9_0_set_6, LBB9_6-LJTI9_0
// .set L9_0_set_7, LBB9_7-LJTI9_0
// .set L9_0_set_3, LBB9_3-LJTI9_0
// .set L9_0_set_15, LBB9_15-LJTI9_0
// .set L9_0_set_8, LBB9_8-LJTI9_0
// .set L9_0_set_11, LBB9_11-LJTI9_0
// .set L9_0_set_16, LBB9_16-LJTI9_0
// .set L9_0_set_14, LBB9_14-LJTI9_0
LJTI9_0:
	LONG $0xfffffe78 // .long L9_0_set_4
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe97 // .long L9_0_set_7
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe62 // .long L9_0_set_3
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe62 // .long L9_0_set_3
	LONG $0xfffffe62 // .long L9_0_set_3
	LONG $0xfffffe62 // .long L9_0_set_3
	LONG $0xfffffe62 // .long L9_0_set_3
	LONG $0xfffffe62 // .long L9_0_set_3
	LONG $0xfffffe62 // .long L9_0_set_3
	LONG $0xfffffe62 // .long L9_0_set_3
	LONG $0xfffffe62 // .long L9_0_set_3
	LONG $0xfffffe62 // .long L9_0_set_3
	LONG $0xfffffe62 // .long L9_0_set_3
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xffffff12 // .long L9_0_set_15
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffea9 // .long L9_0_set_8
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffed8 // .long L9_0_set_11
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xffffff1e // .long L9_0_set_16
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xfffffe8e // .long L9_0_set_6
	LONG $0xffffff06 // .long L9_0_set_14

LCPI10_0:
	QUAD $0x2222222222222222; QUAD $0x2222222222222222 // .space 16, '""""""""""""""""'
	QUAD $0x2222222222222222; QUAD $0x2222222222222222 // .space 16, '""""""""""""""""'

_vstring:
	BYTE  $0x55                   // pushq        %rbp
	WORD  $0x8948; BYTE $0xe5     // movq         %rsp, %rbp
	WORD  $0x5741                 // pushq        %r15
	WORD  $0x5641                 // pushq        %r14
	WORD  $0x5541                 // pushq        %r13
	WORD  $0x5441                 // pushq        %r12
	BYTE  $0x53                   // pushq        %rbx
	BYTE  $0x50                   // pushq        %rax
	MOVQ  DX, R14
	MOVQ  SI, R12
	MOVQ  DI, BX
	MOVQ  0(SI), SI
	MOVQ  SI, -48(BP)
	MOVL  $34, DX
	MOVL  $92, CX
	LONG  $0xffe180e8; BYTE $0xff // callq        _strchr2
	TESTQ AX, AX
	JS    LBB10_4
	MOVQ  0(BX), R11
	MOVQ  $-1, CX
	CMPB  0(R11)(AX*1), $34
	JNE   LBB10_7
	MOVQ  AX, SI

LBB10_3:
	MOVQ CX, 24(R14)
	INCQ SI
	MOVQ SI, 0(R12)
	MOVQ -48(BP), AX
	MOVQ AX, 16(R14)
	MOVL $7, AX
	JMP  LBB10_6

LBB10_4:
	MOVQ 8(BX), R9

LBB10_5:
	MOVQ R9, 0(R12)
	MOVQ $-1, AX

LBB10_6:
	MOVQ AX, 0(R14)
	ADDQ $8, SP
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	RET

LBB10_7:
	LEAQ    1(AX), R8
	MOVQ    8(BX), R9
	MOVQ    R9, DI
	SUBQ    R8, DI
	LEAQ    1(R11)(AX*1), R13
	MOVQ    R13, DX
	MOVQ    DI, SI
	MOVQ    R13, BX
	ANDQ    $31, DX
	JE      LBB10_11
	MOVQ    R13, SI
	ANDQ    $-32, SI
	LONG    $0x066ffdc5             // vmovdqa      (%rsi), %ymm0
	QUAD    $0xffffff270574fdc5     // vpcmpeqb     $-217(%rip), %ymm0, %ymm0  /* LCPI10_0(%rip) */
	LONG    $0xf0d7fdc5             // vpmovmskb    %ymm0, %esi
	LONG    $0xf76ae2c4; BYTE $0xf6 // sarxl        %edx, %esi, %esi
	TESTL   SI, SI
	JE      LBB10_10
	MOVLQSX SI, CX
	LONG    $0xbc0f48f3; BYTE $0xc9 // tzcntq       %rcx, %rcx
	CMPQ    CX, DI
	MOVQ    $-1, SI
	LONG    $0xf14c0f48             // cmovlq       %rcx, %rsi
	JMP     LBB10_34

LBB10_10:
	MOVL $32, CX
	SUBQ DX, CX
	LEAQ 0(R13)(CX*1), BX
	MOVQ DI, SI
	SUBQ CX, SI

LBB10_11:
	CMPQ SI, $128
	JL   LBB10_15
	QUAD $0xfffffedb0d6ffec5 // vmovdqu      $-293(%rip), %ymm1  /* LCPI10_0(%rip) */

LBB10_13:
	LONG $0x236ffdc5             // vmovdqa      (%rbx), %ymm4
	LONG $0x5b6ffdc5; BYTE $0x20 // vmovdqa      $32(%rbx), %ymm3
	LONG $0x536ffdc5; BYTE $0x40 // vmovdqa      $64(%rbx), %ymm2
	LONG $0x436ffdc5; BYTE $0x60 // vmovdqa      $96(%rbx), %ymm0
	LONG $0xe974ddc5             // vpcmpeqb     %ymm1, %ymm4, %ymm5
	LONG $0xf174e5c5             // vpcmpeqb     %ymm1, %ymm3, %ymm6
	LONG $0xedebcdc5             // vpor         %ymm5, %ymm6, %ymm5
	LONG $0xf174edc5             // vpcmpeqb     %ymm1, %ymm2, %ymm6
	LONG $0xf974fdc5             // vpcmpeqb     %ymm1, %ymm0, %ymm7
	LONG $0xf7ebcdc5             // vpor         %ymm7, %ymm6, %ymm6
	LONG $0xeeebd5c5             // vpor         %ymm6, %ymm5, %ymm5
	LONG $0x177de2c4; BYTE $0xed // vptest       %ymm5, %ymm5
	JNE  LBB10_21
	SUBQ $-128, BX
	LEAQ -128(SI), DX
	CMPQ SI, $255
	MOVQ DX, SI
	JG   LBB10_13
	JMP  LBB10_16

LBB10_15:
	MOVQ SI, DX

LBB10_16:
	TESTQ DX, DX
	JS    LBB10_5
	LONG  $0x036ffdc5         // vmovdqa      (%rbx), %ymm0
	QUAD  $0xfffffe770574fdc5 // vpcmpeqb     $-393(%rip), %ymm0, %ymm0  /* LCPI10_0(%rip) */
	LONG  $0xd0d77dc5         // vpmovmskb    %ymm0, %r10d
	TESTL R10, R10
	JE    LBB10_23

LBB10_18:
	MOVQ BX, SI

LBB10_19:
	MOVLQSX R10, CX
	LONG    $0xbc0f48f3; BYTE $0xd9 // tzcntq       %rcx, %rbx
	CMPQ    BX, DX
	JGE     LBB10_5
	SUBQ    R13, SI
	ADDQ    BX, SI
	JMP     LBB10_34

LBB10_21:
	QUAD    $0xfffffe470d74ddc5     // vpcmpeqb     $-441(%rip), %ymm4, %ymm1  /* LCPI10_0(%rip) */
	LONG    $0xd1d7fdc5             // vpmovmskb    %ymm1, %edx
	TESTL   DX, DX
	JE      LBB10_26
	SUBQ    R13, BX
	MOVLQSX DX, CX
	LONG    $0xbc0f48f3; BYTE $0xf1 // tzcntq       %rcx, %rsi
	ADDQ    BX, SI
	JMP     LBB10_34

LBB10_23:
	CMPQ  DX, $31
	JLE   LBB10_5
	LEAQ  32(BX), SI
	LONG  $0x066ffdc5         // vmovdqa      (%rsi), %ymm0
	QUAD  $0xfffffe120574fdc5 // vpcmpeqb     $-494(%rip), %ymm0, %ymm0  /* LCPI10_0(%rip) */
	LONG  $0xd0d77dc5         // vpmovmskb    %ymm0, %r10d
	TESTL R10, R10
	JE    LBB10_30
	ADDQ  $-32, DX
	JMP   LBB10_19

LBB10_26:
	QUAD    $0xfffffdfb0d74e5c5     // vpcmpeqb     $-517(%rip), %ymm3, %ymm1  /* LCPI10_0(%rip) */
	LONG    $0xd1d7fdc5             // vpmovmskb    %ymm1, %edx
	TESTL   DX, DX
	JE      LBB10_28
	MOVLQSX DX, CX
	LONG    $0xbc0f48f3; BYTE $0xc9 // tzcntq       %rcx, %rcx
	SUBQ    R13, BX
	LEAQ    32(BX)(CX*1), SI
	JMP     LBB10_34

LBB10_28:
	QUAD    $0xfffffdd90d74edc5     // vpcmpeqb     $-551(%rip), %ymm2, %ymm1  /* LCPI10_0(%rip) */
	LONG    $0xd1d7fdc5             // vpmovmskb    %ymm1, %edx
	SUBQ    R13, BX
	TESTL   DX, DX
	JE      LBB10_33
	MOVLQSX DX, CX
	LONG    $0xbc0f48f3; BYTE $0xc9 // tzcntq       %rcx, %rcx
	LEAQ    64(BX)(CX*1), SI
	JMP     LBB10_34

LBB10_30:
	CMPQ  DX, $64
	JL    LBB10_5
	LEAQ  64(BX), SI
	LONG  $0x066ffdc5         // vmovdqa      (%rsi), %ymm0
	QUAD  $0xfffffda50574fdc5 // vpcmpeqb     $-603(%rip), %ymm0, %ymm0  /* LCPI10_0(%rip) */
	LONG  $0xd0d77dc5         // vpmovmskb    %ymm0, %r10d
	TESTL R10, R10
	JE    LBB10_71
	ADDQ  $-64, DX
	JMP   LBB10_19

LBB10_33:
	QUAD    $0xfffffd870574fdc5     // vpcmpeqb     $-633(%rip), %ymm0, %ymm0  /* LCPI10_0(%rip) */
	LONG    $0xc8d7fdc5             // vpmovmskb    %ymm0, %ecx
	MOVLQSX CX, CX
	LONG    $0xbc0f48f3; BYTE $0xc9 // tzcntq       %rcx, %rcx
	LEAQ    96(BX)(CX*1), SI

LBB10_34:
	CMPQ SI, DI
	JAE  LBB10_5
	ADDQ R8, SI
	JS   LBB10_5
	LEAQ -1(R11), R10
	QUAD $0xfffffd58056ffec5 // vmovdqu      $-680(%rip), %ymm0  /* LCPI10_0(%rip) */

LBB10_37:
	LEAQ 0(R10)(SI*1), DX
	XORL CX, CX

LBB10_38:
	CMPB    0(DX)(CX*1), $92
	LEAQ    -1(CX), CX
	JE      LBB10_38
	NOTL    CX
	TESTB   $1, CX
	JE      LBB10_70
	LEAQ    1(SI), R13
	MOVQ    R9, BX
	SUBQ    R13, BX
	LEAQ    1(R11)(SI*1), R15
	MOVQ    R15, SI
	MOVQ    BX, CX
	MOVQ    R15, DI
	ANDQ    $31, SI
	JE      LBB10_44
	MOVQ    R15, CX
	ANDQ    $-32, CX
	LONG    $0x0974fdc5             // vpcmpeqb     (%rcx), %ymm0, %ymm1
	LONG    $0xc9d7fdc5             // vpmovmskb    %ymm1, %ecx
	LONG    $0xf74ae2c4; BYTE $0xc9 // sarxl        %esi, %ecx, %ecx
	TESTL   CX, CX
	JE      LBB10_43
	MOVLQSX CX, CX
	LONG    $0xbc0f48f3; BYTE $0xf1 // tzcntq       %rcx, %rsi
	CMPQ    SI, BX
	MOVQ    $-1, CX
	LONG    $0xf14d0f48             // cmovgeq      %rcx, %rsi
	JMP     LBB10_60

LBB10_43:
	MOVL $32, DX
	SUBQ SI, DX
	LEAQ 0(R15)(DX*1), DI
	MOVQ BX, CX
	SUBQ DX, CX

LBB10_44:
	MOVQ CX, SI
	CMPQ CX, $128
	JL   LBB10_47

LBB10_45:
	LONG $0x2774fdc5             // vpcmpeqb     (%rdi), %ymm0, %ymm4
	LONG $0x5f74fdc5; BYTE $0x20 // vpcmpeqb     $32(%rdi), %ymm0, %ymm3
	LONG $0x5774fdc5; BYTE $0x40 // vpcmpeqb     $64(%rdi), %ymm0, %ymm2
	LONG $0x4f74fdc5; BYTE $0x60 // vpcmpeqb     $96(%rdi), %ymm0, %ymm1
	LONG $0xecebe5c5             // vpor         %ymm4, %ymm3, %ymm5
	LONG $0xf1ebedc5             // vpor         %ymm1, %ymm2, %ymm6
	LONG $0xeeebd5c5             // vpor         %ymm6, %ymm5, %ymm5
	LONG $0x177de2c4; BYTE $0xed // vptest       %ymm5, %ymm5
	JNE  LBB10_53
	SUBQ $-128, DI
	LEAQ -128(SI), CX
	CMPQ SI, $255
	MOVQ CX, SI
	JG   LBB10_45

LBB10_47:
	TESTQ CX, CX
	JS    LBB10_5
	LONG  $0x0f74fdc5 // vpcmpeqb     (%rdi), %ymm0, %ymm1
	LONG  $0xc1d77dc5 // vpmovmskb    %ymm1, %r8d
	TESTL R8, R8
	JE    LBB10_50

LBB10_49:
	MOVQ    DI, SI
	MOVLQSX R8, DX
	LONG    $0xbc0f48f3; BYTE $0xfa // tzcntq       %rdx, %rdi
	CMPQ    DI, CX
	JL      LBB10_58
	JMP     LBB10_5

LBB10_50:
	CMPQ    CX, $31
	JLE     LBB10_5
	LEAQ    32(DI), SI
	LONG    $0x0e74fdc5             // vpcmpeqb     (%rsi), %ymm0, %ymm1
	LONG    $0xc1d77dc5             // vpmovmskb    %ymm1, %r8d
	TESTL   R8, R8
	JE      LBB10_55
	ADDQ    $-32, CX
	MOVLQSX R8, DX
	LONG    $0xbc0f48f3; BYTE $0xfa // tzcntq       %rdx, %rdi
	CMPQ    DI, CX
	JL      LBB10_58
	JMP     LBB10_5

LBB10_53:
	LONG    $0xccd7fdc5             // vpmovmskb    %ymm4, %ecx
	TESTL   CX, CX
	JE      LBB10_62
	SUBQ    R15, DI
	MOVLQSX CX, CX
	LONG    $0xbc0f48f3; BYTE $0xf1 // tzcntq       %rcx, %rsi
	JMP     LBB10_59

LBB10_55:
	CMPQ    CX, $64
	JL      LBB10_5
	LEAQ    64(DI), SI
	LONG    $0x0e74fdc5             // vpcmpeqb     (%rsi), %ymm0, %ymm1
	LONG    $0xc1d77dc5             // vpmovmskb    %ymm1, %r8d
	TESTL   R8, R8
	JE      LBB10_64
	ADDQ    $-64, CX
	MOVLQSX R8, DX
	LONG    $0xbc0f48f3; BYTE $0xfa // tzcntq       %rdx, %rdi
	CMPQ    DI, CX
	JGE     LBB10_5

LBB10_58:
	SUBQ R15, SI

LBB10_59:
	ADDQ DI, SI

LBB10_60:
	CMPQ SI, BX
	JAE  LBB10_5
	ADDQ R13, SI
	JNS  LBB10_37
	JMP  LBB10_5

LBB10_62:
	LONG    $0xcbd7fdc5             // vpmovmskb    %ymm3, %ecx
	TESTL   CX, CX
	JE      LBB10_67
	MOVLQSX CX, CX
	LONG    $0xbc0f48f3; BYTE $0xc9 // tzcntq       %rcx, %rcx
	SUBQ    R15, DI
	LEAQ    32(DI)(CX*1), SI
	JMP     LBB10_60

LBB10_64:
	CMPQ  CX, $96
	JL    LBB10_5
	ADDQ  $96, DI
	LONG  $0x0f74fdc5 // vpcmpeqb     (%rdi), %ymm0, %ymm1
	LONG  $0xc1d77dc5 // vpmovmskb    %ymm1, %r8d
	TESTL R8, R8
	JE    LBB10_5
	ADDQ  $-96, CX
	JMP   LBB10_49

LBB10_67:
	LONG    $0xcad7fdc5             // vpmovmskb    %ymm2, %ecx
	SUBQ    R15, DI
	TESTL   CX, CX
	JE      LBB10_69
	MOVLQSX CX, CX
	LONG    $0xbc0f48f3; BYTE $0xc9 // tzcntq       %rcx, %rcx
	LEAQ    64(DI)(CX*1), SI
	JMP     LBB10_60

LBB10_69:
	LONG    $0xc9d7fdc5             // vpmovmskb    %ymm1, %ecx
	MOVLQSX CX, CX
	LONG    $0xbc0f48f3; BYTE $0xc9 // tzcntq       %rcx, %rcx
	LEAQ    96(DI)(CX*1), SI
	JMP     LBB10_60

LBB10_70:
	MOVQ  AX, CX
	TESTQ SI, SI
	JNS   LBB10_3
	JMP   LBB10_5

LBB10_71:
	CMPQ  DX, $96
	JL    LBB10_5
	ADDQ  $96, BX
	LONG  $0x036ffdc5         // vmovdqa      (%rbx), %ymm0
	QUAD  $0xfffffb390574fdc5 // vpcmpeqb     $-1223(%rip), %ymm0, %ymm0  /* LCPI10_0(%rip) */
	LONG  $0xd0d77dc5         // vpmovmskb    %ymm0, %r10d
	TESTL R10, R10
	JE    LBB10_5
	ADDQ  $-96, DX
	JMP   LBB10_18

LCPI11_0:
	QUAD $0x4024000000000000 // .quad 0x4024000000000000

LCPI11_1:
	QUAD $0x7ff0000000000000 // .quad 0x7ff0000000000000

_vnumber:
	BYTE $0x55                   // pushq        %rbp
	WORD $0x8948; BYTE $0xe5     // movq         %rsp, %rbp
	WORD $0x5741                 // pushq        %r15
	WORD $0x5641                 // pushq        %r14
	WORD $0x5541                 // pushq        %r13
	WORD $0x5441                 // pushq        %r12
	BYTE $0x53                   // pushq        %rbx
	MOVQ 0(SI), AX
	MOVQ 0(DI), R8
	MOVQ 8(DI), R15
	MOVQ $9, 0(DX)
	LONG $0xc057f9c5             // vxorpd       %xmm0, %xmm0, %xmm0
	LONG $0x4211f9c5; BYTE $0x08 // vmovupd      %xmm0, $8(%rdx)
	MOVQ 0(SI), CX
	MOVQ CX, 24(DX)
	CMPQ AX, R15
	JAE  LBB11_56
	MOVB 0(R8)(AX*1), CX
	MOVL $1, R10
	CMPB CX, $45
	JNE  LBB11_4
	INCQ AX
	CMPQ AX, R15
	JAE  LBB11_56
	MOVB 0(R8)(AX*1), CX
	MOVL $-1, R10

LBB11_4:
	LEAL -48(CX), DI
	CMPB DI, $10
	JB   LBB11_6
	MOVQ AX, 0(SI)
	MOVQ $-2, 0(DX)
	JMP  LBB11_57

LBB11_6:
	CMPB    CX, $48
	JNE     LBB11_10
	LEAQ    1(AX), CX
	CMPQ    AX, R15
	JAE     LBB11_21
	MOVB    0(R8)(CX*1), BX
	ADDB    $-46, BX
	CMPB    BX, $55
	JA      LBB11_21
	MOVBLZX BX, DI
	MOVQ    $36028797027352577, BX
	BTQ     DI, BX
	JAE     LBB11_21

LBB11_10:
	CMPQ AX, R15
	MOVQ R15, R9
	LONG $0xc8470f4c // cmovaq       %rax, %r9
	XORL R12, R12

LBB11_11:
	MOVQ    R12, DI
	CMPQ    R9, AX
	JE      LBB11_22
	MOVQ    AX, R13
	MOVBLZX 0(R8)(AX*1), BX
	LEAL    -48(BX), AX
	CMPB    AX, $9
	JA      LBB11_23
	ADDL    $-48, BX
	IMULL   R10, BX
	IMUL3Q  $10, DI, R12
	JO      LBB11_15
	LEAQ    1(R13), AX
	MOVLQSX BX, CX
	ADDQ    CX, R12
	JNO     LBB11_11

LBB11_15:
	LONG  $0x2af3e1c4; BYTE $0xcf         // vcvtsi2sd    %rdi, %xmm1, %xmm1
	LONG  $0xc32aebc5                     // vcvtsi2sd    %ebx, %xmm2, %xmm0
	QUAD  $0xfffeec05b9f1e2c4; BYTE $0xff // vfmadd231sd  $-276(%rip), %xmm1, %xmm0  /* LCPI11_0(%rip) */
	MOVQ  $8, 0(DX)
	LEAQ  1(R13), AX
	CMPQ  AX, R15
	SETCS CX
	JAE   LBB11_26
	MOVB  1(R8)(R13*1), DI
	LEAL  -48(DI), BX
	MOVB  $1, CX
	CMPB  BX, $9
	JA    LBB11_26
	ADDQ  $2, R13
	QUAD  $0xfffffeba0d10fbc5             // vmovsd       $-326(%rip), %xmm1  /* LCPI11_0(%rip) */

LBB11_18:
	LONG    $0xd028f9c5             // vmovapd      %xmm0, %xmm2
	MOVQ    R13, CX
	MOVBLZX DI, AX
	ADDL    $-48, AX
	IMULL   R10, AX
	LONG    $0xc02ae3c5             // vcvtsi2sd    %eax, %xmm3, %xmm0
	LONG    $0xb9e9e2c4; BYTE $0xc1 // vfmadd231sd  %xmm1, %xmm2, %xmm0
	CMPQ    R15, R13
	JE      LBB11_24
	MOVBLZX 0(R8)(CX*1), DI
	LEAL    -48(DI), AX
	LEAQ    1(CX), R13
	CMPB    AX, $9
	JBE     LBB11_18
	DECQ    R13
	MOVQ    R13, AX
	JMP     LBB11_25

LBB11_21:
	MOVQ CX, 0(SI)
	JMP  LBB11_57

LBB11_22:
	LONG $0x2af3e1c4; BYTE $0xc7 // vcvtsi2sd    %rdi, %xmm1, %xmm0
	MOVQ R9, R15
	MOVQ DI, R12
	JMP  LBB11_75

LBB11_23:
	LONG $0x2af3e1c4; BYTE $0xc7 // vcvtsi2sd    %rdi, %xmm1, %xmm0
	MOVB $1, R9
	MOVQ DI, R12
	CMPQ R13, R15
	JB   LBB11_27
	JMP  LBB11_49

LBB11_24:
	MOVQ R15, AX

LBB11_25:
	CMPQ  CX, R15
	SETCS CX

LBB11_26:
	XORL  R9, R9
	MOVQ  AX, R13
	TESTB CX, CX
	JE    LBB11_49

LBB11_27:
	CMPB 0(R8)(R13*1), $46
	JNE  LBB11_49
	LEAQ 1(R13), R11
	MOVQ $8, 0(DX)
	CMPQ R11, R15
	JAE  LBB11_56
	MOVB 0(R8)(R11*1), R14
	LEAL -48(R14), CX
	CMPB CX, $9
	JBE  LBB11_31
	MOVQ R11, 0(SI)
	MOVQ $-2, 0(DX)
	JMP  LBB11_57

LBB11_31:
	LONG    $0xc957f1c5 // vxorpd       %xmm1, %xmm1, %xmm1
	MOVQ    R11, AX
	LONG    $0xd257e9c5 // vxorpd       %xmm2, %xmm2, %xmm2
	CMPB    CX, $9
	JA      LBB11_40
	LEAL    18(R13), AX
	MOVLQSX AX, DI
	MOVQ    R11, AX
	LONG    $0xd257e9c5 // vxorpd       %xmm2, %xmm2, %xmm2
	CMPQ    R13, DI
	JGE     LBB11_40
	ADDQ    $2, R13
	XORL    CX, CX

LBB11_34:
	MOVBLZX R14, AX
	LEAQ    0(CX)(CX*4), CX
	ADDL    $-48, AX
	IMULL   R10, AX
	WORD    $0x9848           // cltq
	LEAQ    0(AX)(CX*2), CX
	CMPQ    R15, R13
	JE      LBB11_38
	MOVBLZX 0(R8)(R13*1), R14
	LEAL    -48(R14), BX
	LEAQ    1(R13), AX
	CMPB    BX, $9
	JA      LBB11_37
	CMPQ    R13, DI
	MOVQ    AX, R13
	JLE     LBB11_34

LBB11_37:
	DECQ AX
	JMP  LBB11_39

LBB11_38:
	MOVQ R15, AX

LBB11_39:
	LONG $0x2ae3e1c4; BYTE $0xd1 // vcvtsi2sd    %rcx, %xmm3, %xmm2

LBB11_40:
	SUBQ AX, R11
	CMPL R11, $-323
	JL   LBB11_44
	CMPL R11, $308
	JLE  LBB11_43
	QUAD $0xfffffd840d10fbc5 // vmovsd       $-636(%rip), %xmm1  /* LCPI11_1(%rip) */
	JMP  LBB11_44

LBB11_43:
	ADDL $323, R11
	LONG $0x280d8d48; WORD $0x0018; BYTE $0x00 // leaq         $6184(%rip), %rcx  /* _P10_TAB(%rip) */
	LONG $0x596ba1c4; WORD $0xd90c             // vmulsd       (%rcx,%r11,8), %xmm2, %xmm1

LBB11_44:
	LONG $0xc058f3c5 // vaddsd       %xmm0, %xmm1, %xmm0
	CMPQ AX, R15
	JAE  LBB11_48

LBB11_45:
	MOVBLZX 0(R8)(AX*1), CX
	ADDB    $-48, CX
	CMPB    CX, $9
	JA      LBB11_48
	INCQ    AX
	CMPQ    R15, AX
	JNE     LBB11_45
	JMP     LBB11_74

LBB11_48:
	MOVQ AX, R13

LBB11_49:
	CMPQ R13, R15
	JAE  LBB11_73
	MOVB 0(R8)(R13*1), AX
	ORB  $32, AX
	CMPB AX, $101
	JNE  LBB11_73
	LEAQ 1(R13), CX
	MOVQ $8, 0(DX)
	CMPQ CX, R15
	JAE  LBB11_56
	MOVB 0(R8)(CX*1), AX
	CMPB AX, $45
	JE   LBB11_54
	MOVL $1, R10
	CMPB AX, $43
	JNE  LBB11_58

LBB11_54:
	ADDQ  $2, R13
	CMPQ  R13, R15
	JAE   LBB11_56
	XORL  CX, CX
	CMPB  AX, $43
	SETEQ CX
	LEAL  -1(CX)(CX*1), R10
	MOVB  0(R8)(R13*1), AX
	JMP   LBB11_59

LBB11_56:
	MOVQ R15, 0(SI)
	MOVQ $-1, 0(DX)

LBB11_57:
	BYTE $0x5b   // popq         %rbx
	WORD $0x5c41 // popq         %r12
	WORD $0x5d41 // popq         %r13
	WORD $0x5e41 // popq         %r14
	WORD $0x5f41 // popq         %r15
	BYTE $0x5d   // popq         %rbp
	RET

LBB11_58:
	MOVQ CX, R13

LBB11_59:
	LEAL -48(AX), CX
	CMPB CX, $9
	JBE  LBB11_61
	MOVQ R13, 0(SI)
	MOVQ $-2, 0(DX)
	JMP  LBB11_57

LBB11_61:
	XORL R11, R11
	CMPQ R13, R15
	JAE  LBB11_72
	XORL R11, R11
	CMPB CX, $9
	JA   LBB11_67
	LEAQ -1(R15), CX
	XORL R11, R11

LBB11_64:
	LEAL    0(R11)(R11*4), DI
	MOVBLZX AX, AX
	ADDL    $-48, AX
	IMULL   R10, AX
	LEAL    0(AX)(DI*2), R11
	CMPQ    CX, R13
	JE      LBB11_66
	MOVBLZX 1(R8)(R13*1), AX
	INCQ    R13
	LEAL    -48(AX), DI
	CMPB    DI, $10
	JB      LBB11_64
	JMP     LBB11_67

LBB11_66:
	MOVQ R15, R13

LBB11_67:
	CMPL R11, $1
	JE   LBB11_73
	CMPL R11, $-323
	JGE  LBB11_70
	LONG $0xc057f9c5 // vxorpd       %xmm0, %xmm0, %xmm0
	JMP  LBB11_73

LBB11_70:
	CMPL R11, $308
	JLE  LBB11_72
	QUAD $0xfffffc5d0510fbc5 // vmovsd       $-931(%rip), %xmm0  /* LCPI11_1(%rip) */
	JMP  LBB11_73

LBB11_72:
	ADDL $323, R11
	LONG $0x01058d48; WORD $0x0017; BYTE $0x00 // leaq         $5889(%rip), %rax  /* _P10_TAB(%rip) */
	LONG $0x597ba1c4; WORD $0xd804             // vmulsd       (%rax,%r11,8), %xmm0, %xmm0

LBB11_73:
	MOVQ R13, R15

LBB11_74:
	TESTB R9, R9
	JE    LBB11_76

LBB11_75:
	MOVQ R12, 16(DX)

LBB11_76:
	MOVQ R15, 0(SI)
	LONG $0x4211fbc5; BYTE $0x08 // vmovsd       %xmm0, $8(%rdx)
	JMP  LBB11_57

_vsigned:
	BYTE $0x55                   // pushq        %rbp
	WORD $0x8948; BYTE $0xe5     // movq         %rsp, %rbp
	BYTE $0x53                   // pushq        %rbx
	MOVQ 0(SI), AX
	MOVQ 0(DI), R8
	MOVQ 8(DI), R11
	MOVQ $9, 0(DX)
	LONG $0xc057f8c5             // vxorps       %xmm0, %xmm0, %xmm0
	LONG $0x4211f8c5; BYTE $0x08 // vmovups      %xmm0, $8(%rdx)
	MOVQ 0(SI), CX
	MOVQ CX, 24(DX)
	CMPQ AX, R11
	JAE  LBB12_1
	MOVB 0(R8)(AX*1), CX
	MOVL $1, R9
	CMPB CX, $45
	JNE  LBB12_5
	INCQ AX
	CMPQ AX, R11
	JAE  LBB12_1
	MOVB 0(R8)(AX*1), CX
	MOVQ $-1, R9

LBB12_5:
	LEAL -48(CX), DI
	CMPB DI, $10
	JB   LBB12_7
	MOVQ AX, 0(SI)
	MOVQ $-2, 0(DX)
	BYTE $0x5b       // popq         %rbx
	BYTE $0x5d       // popq         %rbp
	RET

LBB12_1:
	MOVQ R11, 0(SI)
	MOVQ $-1, 0(DX)
	BYTE $0x5b      // popq         %rbx
	BYTE $0x5d      // popq         %rbp
	RET

LBB12_7:
	CMPB    CX, $48
	JNE     LBB12_12
	LEAQ    1(AX), DI
	CMPQ    AX, R11
	JAE     LBB12_11
	MOVB    0(R8)(DI*1), CX
	ADDB    $-46, CX
	CMPB    CX, $55
	JA      LBB12_11
	MOVBLZX CX, R10
	MOVQ    $36028797027352577, CX
	BTQ     R10, CX
	JAE     LBB12_11

LBB12_12:
	CMPQ AX, R11
	MOVQ R11, R10
	LONG $0xd0470f4c // cmovaq       %rax, %r10
	XORL DI, DI

LBB12_13:
	CMPQ    R10, AX
	JE      LBB12_23
	MOVBQSX 0(R8)(AX*1), CX
	LEAL    -48(CX), BX
	CMPB    BX, $9
	JA      LBB12_18
	IMUL3Q  $10, DI, DI
	JO      LBB12_17
	INCQ    AX
	ADDL    $-48, CX
	IMULQ   R9, CX
	ADDQ    CX, DI
	JNO     LBB12_13

LBB12_17:
	DECQ AX
	MOVQ AX, 0(SI)
	MOVQ $-5, 0(DX)
	BYTE $0x5b      // popq         %rbx
	BYTE $0x5d      // popq         %rbp
	RET

LBB12_11:
	MOVQ DI, 0(SI)
	BYTE $0x5b     // popq         %rbx
	BYTE $0x5d     // popq         %rbp
	RET

LBB12_18:
	CMPQ AX, R11
	JAE  LBB12_22
	CMPB CX, $46
	JE   LBB12_25
	CMPB CX, $69
	JE   LBB12_25
	CMPB CX, $101
	JNE  LBB12_22

LBB12_25:
	MOVQ AX, 0(SI)
	MOVQ $-6, 0(DX)
	BYTE $0x5b      // popq         %rbx
	BYTE $0x5d      // popq         %rbp
	RET

LBB12_22:
	MOVQ AX, R10

LBB12_23:
	MOVQ R10, 0(SI)
	MOVQ DI, 16(DX)
	BYTE $0x5b      // popq         %rbx
	BYTE $0x5d      // popq         %rbp
	RET

_vunsigned:
	BYTE $0x55                   // pushq        %rbp
	WORD $0x8948; BYTE $0xe5     // movq         %rsp, %rbp
	BYTE $0x53                   // pushq        %rbx
	MOVQ DX, R8
	MOVQ 0(SI), CX
	MOVQ 0(DI), R9
	MOVQ 8(DI), R11
	MOVQ $9, 0(DX)
	LONG $0xc057f8c5             // vxorps       %xmm0, %xmm0, %xmm0
	LONG $0x4211f8c5; BYTE $0x08 // vmovups      %xmm0, $8(%rdx)
	MOVQ 0(SI), AX
	MOVQ AX, 24(DX)
	CMPQ CX, R11
	JAE  LBB13_1
	MOVB 0(R9)(CX*1), AX
	CMPB AX, $45
	JNE  LBB13_4

LBB13_3:
	MOVQ CX, 0(SI)
	MOVQ $-6, 0(R8)
	BYTE $0x5b      // popq         %rbx
	BYTE $0x5d      // popq         %rbp
	RET

LBB13_1:
	MOVQ R11, 0(SI)
	MOVQ $-1, 0(R8)
	BYTE $0x5b      // popq         %rbx
	BYTE $0x5d      // popq         %rbp
	RET

LBB13_4:
	LEAL -48(AX), DX
	CMPB DX, $10
	JB   LBB13_6
	MOVQ CX, 0(SI)
	MOVQ $-2, 0(R8)
	BYTE $0x5b       // popq         %rbx
	BYTE $0x5d       // popq         %rbp
	RET

LBB13_6:
	CMPB    AX, $48
	JNE     LBB13_7
	MOVB    1(R9)(CX*1), AX
	ADDB    $-46, AX
	CMPB    AX, $55
	JA      LBB13_16
	MOVBLZX AX, AX
	MOVQ    $36028797027352577, DX
	BTQ     AX, DX
	JAE     LBB13_16

LBB13_7:
	XORL AX, AX
	MOVL $10, R10

LBB13_8:
	CMPQ    R11, CX
	JE      LBB13_22
	MOVBLSX 0(R9)(CX*1), DI
	LEAL    -48(DI), DX
	CMPB    DX, $9
	JA      LBB13_17
	MULQ    R10
	JO      LBB13_13
	INCQ    CX
	ADDL    $-48, DI
	XORL    BX, BX
	ADDQ    DI, AX
	SETCS   BX
	MOVQ    BX, DX
	NEGQ    DX
	XORQ    DX, BX
	JNE     LBB13_13
	TESTQ   DX, DX
	JNS     LBB13_8

LBB13_13:
	DECQ CX
	MOVQ CX, 0(SI)
	MOVQ $-5, 0(R8)
	BYTE $0x5b      // popq         %rbx
	BYTE $0x5d      // popq         %rbp
	RET

LBB13_17:
	CMPQ CX, R11
	JAE  LBB13_21
	CMPB DI, $46
	JE   LBB13_3
	CMPB DI, $69
	JE   LBB13_3
	CMPB DI, $101
	JE   LBB13_3

LBB13_21:
	MOVQ CX, R11

LBB13_22:
	MOVQ R11, 0(SI)
	MOVQ AX, 16(R8)
	BYTE $0x5b      // popq         %rbx
	BYTE $0x5d      // popq         %rbp
	RET

LBB13_16:
	INCQ CX
	MOVQ CX, 0(SI)
	BYTE $0x5b     // popq         %rbx
	BYTE $0x5d     // popq         %rbp
	RET

_skip_one:
	BYTE $0x55               // pushq        %rbp
	WORD $0x8948; BYTE $0xe5 // movq         %rsp, %rbp
	MOVQ DX, AX
	MOVQ SI, DX
	MOVQ DI, SI
	MOVQ $1, 0(AX)
	MOVQ AX, DI
	BYTE $0x5d               // popq         %rbp
	JMP  _fsm_exec

_fsm_exec:
	BYTE $0x55               // pushq        %rbp
	WORD $0x8948; BYTE $0xe5 // movq         %rsp, %rbp
	WORD $0x5741             // pushq        %r15
	WORD $0x5641             // pushq        %r14
	WORD $0x5541             // pushq        %r13
	WORD $0x5441             // pushq        %r12
	BYTE $0x53               // pushq        %rbx
	SUBQ $40, SP
	CMPL 0(DI), $0
	JE   LBB15_2
	MOVQ DX, BX
	MOVQ SI, R15
	MOVQ DI, R13
	MOVQ $-1, R12
	MOVQ DX, -48(BP)
	JMP  LBB15_7

LBB15_2:
	MOVQ $-1, AX
	JMP  LBB15_56

LBB15_3:
	LEAQ  3(CX), AX
	MOVQ  AX, 0(BX)
	MOVQ  R14, AX
	TESTQ CX, CX
	JLE   LBB15_56

LBB15_5:
	MOVL  0(R13), DX
	MOVQ  R12, AX
	TESTL DX, DX
	JE    LBB15_56

LBB15_7:
	MOVQ    0(R15), DI
	MOVQ    8(R15), SI
	MOVQ    0(BX), DX
	LONG    $0xffd242e8; BYTE $0xff // callq        _lspace
	MOVQ    AX, CX
	MOVQ    AX, 0(BX)
	CMPQ    AX, 8(R15)
	JAE     LBB15_9
	MOVQ    0(R15), AX
	MOVQ    CX, DX
	INCQ    DX
	MOVQ    DX, 0(BX)
	MOVBLZX 0(AX)(CX*1), SI
	MOVQ    DX, CX
	JMP     LBB15_10

LBB15_9:
	XORL SI, SI

LBB15_10:
	MOVLQSX 0(R13), AX
	LEAQ    -1(AX), DX
	MOVL    0(R13)(AX*4), DI
	LEAQ    -1(CX), R14
	CMPQ    R12, $-1
	LONG    $0xe6440f4d                           // cmoveq       %r14, %r12
	DECL    DI
	CMPL    DI, $5
	JA      LBB15_54
	LONG    $0x3c1d8d48; WORD $0x0003; BYTE $0x00 // leaq         $828(%rip), %rbx  /* LJTI15_0(%rip) */
	MOVLQSX 0(BX)(DI*4), DI
	ADDQ    BX, DI
	JMP     DI

LBB15_12:
	MOVBLSX SI, CX
	CMPL    CX, $44
	MOVQ    -48(BP), BX
	JE      LBB15_29
	CMPL    CX, $93
	JE      LBB15_14
	JMP     LBB15_55

LBB15_54:
	MOVL    DX, 0(R13)
	MOVBLSX SI, DX
	CMPL    DX, $123
	JBE     LBB15_24
	JMP     LBB15_55

LBB15_15:
	MOVBLSX SI, CX
	CMPL    CX, $44
	MOVQ    -48(BP), BX
	JNE     LBB15_16
	CMPL    AX, $65535
	JG      LBB15_61
	LEAL    1(AX), CX
	MOVL    CX, 0(R13)
	MOVL    $3, 4(R13)(AX*4)
	JMP     LBB15_5

LBB15_17:
	CMPB SI, $34
	MOVQ -48(BP), BX
	JNE  LBB15_55
	MOVL $4, 0(R13)(AX*4)

LBB15_19:
	MOVQ  R15, DI
	MOVQ  BX, SI
	LONG  $0x000519e8; BYTE $0x00 // callq        _skip_string
	TESTQ AX, AX
	JNS   LBB15_5
	JMP   LBB15_56

LBB15_20:
	CMPB SI, $58
	MOVQ -48(BP), BX
	JNE  LBB15_55
	MOVL $0, 0(R13)(AX*4)
	JMP  LBB15_5

LBB15_22:
	CMPB    SI, $93
	MOVQ    -48(BP), BX
	JE      LBB15_14
	MOVL    $1, 0(R13)(AX*4)
	MOVBLSX SI, DX
	CMPL    DX, $123
	JA      LBB15_55

LBB15_24:
	MOVQ    $-1, AX
	LONG    $0x6b358d48; WORD $0x0002; BYTE $0x00 // leaq         $619(%rip), %rsi  /* LJTI15_1(%rip) */
	MOVLQSX 0(SI)(DX*4), DX
	ADDQ    SI, DX
	JMP     DX

LBB15_27:
	MOVQ 0(R15), DI
	MOVQ 8(R15), SI
	MOVQ BX, DX
	MOVQ R14, CX

LBB15_28:
	LEAQ  -80(BP), R8
	MOVQ  R14, R9
	LONG  $0x000990e8; BYTE $0x00 // callq        _advance_number
	TESTQ AX, AX
	LONG  $0xf0480f4c             // cmovsq       %rax, %r14
	MOVQ  R14, AX
	TESTQ R14, R14
	JNS   LBB15_5
	JMP   LBB15_56

LBB15_25:
	MOVBLSX SI, CX
	CMPL    CX, $34
	MOVQ    -48(BP), BX
	JE      LBB15_33

LBB15_16:
	CMPL CX, $125
	JNE  LBB15_55

LBB15_14:
	MOVL  DX, 0(R13)
	MOVQ  R12, AX
	TESTL DX, DX
	JNE   LBB15_7
	JMP   LBB15_56

LBB15_29:
	CMPL AX, $65535
	JG   LBB15_61
	LEAL 1(AX), CX
	MOVL CX, 0(R13)
	MOVL $0, 4(R13)(AX*4)
	JMP  LBB15_5

LBB15_33:
	MOVL    $2, 0(R13)(AX*4)
	MOVQ    R15, DI
	MOVQ    BX, SI
	LONG    $0x000429e8; BYTE $0x00 // callq        _skip_string
	TESTQ   AX, AX
	JS      LBB15_56
	MOVLQSX 0(R13), AX
	CMPQ    AX, $65535
	JG      LBB15_61
	LEAL    1(AX), CX
	MOVL    CX, 0(R13)
	MOVL    $4, 4(R13)(AX*4)
	JMP     LBB15_5

LBB15_36:
	MOVQ 0(R15), DI
	MOVQ 8(R15), SI
	MOVQ BX, DX
	JMP  LBB15_28

LBB15_37:
	MOVLQSX 0(R13), AX
	CMPQ    AX, $65535
	JG      LBB15_61
	LEAL    1(AX), CX
	MOVL    CX, 0(R13)
	MOVL    $5, 4(R13)(AX*4)
	JMP     LBB15_5

LBB15_39:
	MOVQ  8(R15), DX
	LEAQ  -4(DX), SI
	CMPQ  CX, SI
	JA    LBB15_60
	MOVQ  0(R15), DX
	MOVL  0(DX)(CX*1), SI
	CMPL  SI, $1702063201
	JNE   LBB15_57
	LEAQ  4(CX), AX
	MOVQ  AX, 0(BX)
	MOVQ  R14, AX
	TESTQ CX, CX
	JG    LBB15_5
	JMP   LBB15_56

LBB15_42:
	MOVQ 8(R15), DX
	LEAQ -3(DX), SI
	CMPQ CX, SI
	JA   LBB15_60
	MOVQ 0(R15), DX
	CMPL -1(DX)(CX*1), $1819047278
	JE   LBB15_3
	JMP  LBB15_44

LBB15_47:
	MOVQ 8(R15), DX
	LEAQ -3(DX), SI
	CMPQ CX, SI
	JA   LBB15_60
	MOVQ 0(R15), DX
	CMPL -1(DX)(CX*1), $1702195828
	JE   LBB15_3
	JMP  LBB15_49

LBB15_52:
	MOVLQSX 0(R13), AX
	CMPQ    AX, $65535
	JG      LBB15_61
	LEAL    1(AX), CX
	MOVL    CX, 0(R13)
	MOVL    $6, 4(R13)(AX*4)
	JMP     LBB15_5

LBB15_55:
	MOVQ $-2, AX
	JMP  LBB15_56

LBB15_61:
	MOVQ $-7, AX

LBB15_56:
	ADDQ $40, SP
	BYTE $0x5b   // popq         %rbx
	WORD $0x5c41 // popq         %r12
	WORD $0x5d41 // popq         %r13
	WORD $0x5e41 // popq         %r14
	WORD $0x5f41 // popq         %r15
	BYTE $0x5d   // popq         %rbp
	RET

LBB15_60:
	MOVQ DX, 0(BX)
	JMP  LBB15_56

LBB15_57:
	MOVQ $-2, AX
	CMPB SI, $97
	JNE  LBB15_56
	INCQ CX
	MOVL $1702063201, SI

LBB15_59:
	SHRL    $8, SI
	MOVQ    CX, 0(BX)
	MOVBLSX 0(DX)(CX*1), DI
	MOVBLZX SI, BX
	INCQ    CX
	CMPL    BX, DI
	MOVQ    -48(BP), BX
	JE      LBB15_59
	JMP     LBB15_56

LBB15_49:
	MOVQ R14, 0(BX)
	MOVQ $-2, AX
	CMPB 0(DX)(R14*1), $116
	JNE  LBB15_56
	MOVL $1702195828, SI

LBB15_51:
	SHRL    $8, SI
	MOVQ    CX, 0(BX)
	MOVBLSX 0(DX)(CX*1), DI
	MOVBLZX SI, BX
	INCQ    CX
	CMPL    BX, DI
	MOVQ    -48(BP), BX
	JE      LBB15_51
	JMP     LBB15_56

LBB15_44:
	MOVQ R14, 0(BX)
	MOVQ $-2, AX
	CMPB 0(DX)(R14*1), $110
	JNE  LBB15_56
	MOVL $1819047278, SI

LBB15_46:
	SHRL    $8, SI
	MOVQ    CX, 0(BX)
	MOVBLSX 0(DX)(CX*1), DI
	MOVBLZX SI, BX
	INCQ    CX
	CMPL    BX, DI
	MOVQ    -48(BP), BX
	JE      LBB15_46
	JMP     LBB15_56

// .set L15_0_set_12, LBB15_12-LJTI15_0
// .set L15_0_set_15, LBB15_15-LJTI15_0
// .set L15_0_set_17, LBB15_17-LJTI15_0
// .set L15_0_set_20, LBB15_20-LJTI15_0
// .set L15_0_set_22, LBB15_22-LJTI15_0
// .set L15_0_set_25, LBB15_25-LJTI15_0
LJTI15_0:
	LONG $0xfffffccd // .long L15_0_set_12
	LONG $0xfffffd02 // .long L15_0_set_15
	LONG $0xfffffd33 // .long L15_0_set_17
	LONG $0xfffffd63 // .long L15_0_set_20
	LONG $0xfffffd7f // .long L15_0_set_22
	LONG $0xfffffde7 // .long L15_0_set_25

	// .set L15_1_set_56, LBB15_56-LJTI15_1
	// .set L15_1_set_55, LBB15_55-LJTI15_1
	// .set L15_1_set_19, LBB15_19-LJTI15_1
	// .set L15_1_set_36, LBB15_36-LJTI15_1
	// .set L15_1_set_27, LBB15_27-LJTI15_1
	// .set L15_1_set_37, LBB15_37-LJTI15_1
	// .set L15_1_set_39, LBB15_39-LJTI15_1
	// .set L15_1_set_42, LBB15_42-LJTI15_1
	// .set L15_1_set_47, LBB15_47-LJTI15_1
	// .set L15_1_set_52, LBB15_52-LJTI15_1
LJTI15_1:
	LONG $0xffffff3b // .long L15_1_set_56
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xfffffd32 // .long L15_1_set_19
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xfffffe5b // .long L15_1_set_36
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xfffffd9e // .long L15_1_set_27
	LONG $0xfffffd9e // .long L15_1_set_27
	LONG $0xfffffd9e // .long L15_1_set_27
	LONG $0xfffffd9e // .long L15_1_set_27
	LONG $0xfffffd9e // .long L15_1_set_27
	LONG $0xfffffd9e // .long L15_1_set_27
	LONG $0xfffffd9e // .long L15_1_set_27
	LONG $0xfffffd9e // .long L15_1_set_27
	LONG $0xfffffd9e // .long L15_1_set_27
	LONG $0xfffffd9e // .long L15_1_set_27
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xfffffe6a // .long L15_1_set_37
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xfffffe8f // .long L15_1_set_39
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xfffffec7 // .long L15_1_set_42
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xfffffeea // .long L15_1_set_47
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff2b // .long L15_1_set_55
	LONG $0xffffff0a // .long L15_1_set_52

_skip_array:
	BYTE $0x55               // pushq        %rbp
	WORD $0x8948; BYTE $0xe5 // movq         %rsp, %rbp
	MOVQ DX, AX
	MOVQ SI, DX
	MOVQ DI, SI
	MOVQ $21474836481, CX
	MOVQ CX, 0(AX)
	MOVQ AX, DI
	BYTE $0x5d               // popq         %rbp
	JMP  _fsm_exec

_skip_object:
	BYTE $0x55               // pushq        %rbp
	WORD $0x8948; BYTE $0xe5 // movq         %rsp, %rbp
	MOVQ DX, AX
	MOVQ SI, DX
	MOVQ DI, SI
	MOVQ $25769803777, CX
	MOVQ CX, 0(AX)
	MOVQ AX, DI
	BYTE $0x5d               // popq         %rbp
	JMP  _fsm_exec

LCPI18_0:
	QUAD $0x2222222222222222; QUAD $0x2222222222222222 // .space 16, '""""""""""""""""'
	QUAD $0x2222222222222222; QUAD $0x2222222222222222 // .space 16, '""""""""""""""""'

_skip_string:
	BYTE  $0x55                   // pushq        %rbp
	WORD  $0x8948; BYTE $0xe5     // movq         %rsp, %rbp
	WORD  $0x5741                 // pushq        %r15
	WORD  $0x5641                 // pushq        %r14
	WORD  $0x5541                 // pushq        %r13
	WORD  $0x5441                 // pushq        %r12
	BYTE  $0x53                   // pushq        %rbx
	BYTE  $0x50                   // pushq        %rax
	MOVQ  SI, R14
	MOVQ  DI, BX
	MOVQ  0(SI), R15
	MOVQ  R15, SI
	MOVL  $34, DX
	MOVL  $92, CX
	LONG  $0xffd050e8; BYTE $0xff // callq        _strchr2
	TESTQ AX, AX
	JS    LBB18_3
	MOVQ  AX, CX
	MOVQ  0(BX), R10
	CMPB  0(R10)(AX*1), $34
	JNE   LBB18_6

LBB18_2:
	DECQ R15
	INCQ CX
	MOVQ CX, R11
	MOVQ R15, AX
	JMP  LBB18_5

LBB18_3:
	MOVQ 8(BX), R11

LBB18_4:
	MOVQ $-1, AX

LBB18_5:
	MOVQ R11, 0(R14)
	ADDQ $8, SP
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	RET

LBB18_6:
	LEAQ  1(CX), R8
	MOVQ  8(BX), R11
	MOVQ  R11, DX
	SUBQ  R8, DX
	LEAQ  1(R10)(CX*1), BX
	MOVQ  BX, CX
	MOVQ  DX, AX
	MOVQ  BX, SI
	ANDQ  $31, CX
	JE    LBB18_10
	MOVQ  BX, AX
	ANDQ  $-32, AX
	LONG  $0x006ffdc5             // vmovdqa      (%rax), %ymm0
	QUAD  $0xffffff420574fdc5     // vpcmpeqb     $-190(%rip), %ymm0, %ymm0  /* LCPI18_0(%rip) */
	LONG  $0xc0d7fdc5             // vpmovmskb    %ymm0, %eax
	LONG  $0xf772e2c4; BYTE $0xc0 // sarxl        %ecx, %eax, %eax
	TESTL AX, AX
	JE    LBB18_9
	WORD  $0x9848                 // cltq
	LONG  $0xbc0f48f3; BYTE $0xc0 // tzcntq       %rax, %rax
	CMPQ  AX, DX
	MOVQ  $-1, CX
	LONG  $0xc84c0f48             // cmovlq       %rax, %rcx
	JMP   LBB18_33

LBB18_9:
	MOVL $32, DI
	SUBQ CX, DI
	LEAQ 0(BX)(DI*1), SI
	MOVQ DX, AX
	SUBQ DI, AX

LBB18_10:
	CMPQ AX, $128
	JL   LBB18_14
	QUAD $0xfffffef90d6ffec5 // vmovdqu      $-263(%rip), %ymm1  /* LCPI18_0(%rip) */

LBB18_12:
	LONG $0x266ffdc5             // vmovdqa      (%rsi), %ymm4
	LONG $0x5e6ffdc5; BYTE $0x20 // vmovdqa      $32(%rsi), %ymm3
	LONG $0x566ffdc5; BYTE $0x40 // vmovdqa      $64(%rsi), %ymm2
	LONG $0x466ffdc5; BYTE $0x60 // vmovdqa      $96(%rsi), %ymm0
	LONG $0xe974ddc5             // vpcmpeqb     %ymm1, %ymm4, %ymm5
	LONG $0xf174e5c5             // vpcmpeqb     %ymm1, %ymm3, %ymm6
	LONG $0xedebcdc5             // vpor         %ymm5, %ymm6, %ymm5
	LONG $0xf174edc5             // vpcmpeqb     %ymm1, %ymm2, %ymm6
	LONG $0xf974fdc5             // vpcmpeqb     %ymm1, %ymm0, %ymm7
	LONG $0xf7ebcdc5             // vpor         %ymm7, %ymm6, %ymm6
	LONG $0xeeebd5c5             // vpor         %ymm6, %ymm5, %ymm5
	LONG $0x177de2c4; BYTE $0xed // vptest       %ymm5, %ymm5
	JNE  LBB18_20
	SUBQ $-128, SI
	LEAQ -128(AX), DI
	CMPQ AX, $255
	MOVQ DI, AX
	JG   LBB18_12
	JMP  LBB18_15

LBB18_14:
	MOVQ AX, DI

LBB18_15:
	MOVQ  $-1, AX
	TESTQ DI, DI
	JS    LBB18_5
	LONG  $0x066ffdc5         // vmovdqa      (%rsi), %ymm0
	QUAD  $0xfffffe8f0574fdc5 // vpcmpeqb     $-369(%rip), %ymm0, %ymm0  /* LCPI18_0(%rip) */
	LONG  $0xc8d77dc5         // vpmovmskb    %ymm0, %r9d
	TESTL R9, R9
	JE    LBB18_22

LBB18_17:
	MOVQ SI, CX

LBB18_18:
	MOVLQSX R9, SI
	LONG    $0xbc0f48f3; BYTE $0xf6 // tzcntq       %rsi, %rsi
	CMPQ    SI, DI
	JGE     LBB18_5
	SUBQ    BX, CX
	ADDQ    SI, CX
	JMP     LBB18_33

LBB18_20:
	QUAD  $0xfffffe5f0d74ddc5     // vpcmpeqb     $-417(%rip), %ymm4, %ymm1  /* LCPI18_0(%rip) */
	LONG  $0xc1d7fdc5             // vpmovmskb    %ymm1, %eax
	TESTL AX, AX
	JE    LBB18_25
	SUBQ  BX, SI
	WORD  $0x9848                 // cltq
	LONG  $0xbc0f48f3; BYTE $0xc8 // tzcntq       %rax, %rcx
	ADDQ  SI, CX
	JMP   LBB18_33

LBB18_22:
	CMPQ  DI, $31
	JLE   LBB18_5
	LEAQ  32(SI), CX
	LONG  $0x016ffdc5         // vmovdqa      (%rcx), %ymm0
	QUAD  $0xfffffe2b0574fdc5 // vpcmpeqb     $-469(%rip), %ymm0, %ymm0  /* LCPI18_0(%rip) */
	LONG  $0xc8d77dc5         // vpmovmskb    %ymm0, %r9d
	TESTL R9, R9
	JE    LBB18_29
	ADDQ  $-32, DI
	JMP   LBB18_18

LBB18_25:
	QUAD  $0xfffffe140d74e5c5     // vpcmpeqb     $-492(%rip), %ymm3, %ymm1  /* LCPI18_0(%rip) */
	LONG  $0xc1d7fdc5             // vpmovmskb    %ymm1, %eax
	TESTL AX, AX
	JE    LBB18_27
	WORD  $0x9848                 // cltq
	LONG  $0xbc0f48f3; BYTE $0xc0 // tzcntq       %rax, %rax
	SUBQ  BX, SI
	LEAQ  32(SI)(AX*1), CX
	JMP   LBB18_33

LBB18_27:
	QUAD  $0xfffffdf30d74edc5     // vpcmpeqb     $-525(%rip), %ymm2, %ymm1  /* LCPI18_0(%rip) */
	LONG  $0xc1d7fdc5             // vpmovmskb    %ymm1, %eax
	SUBQ  BX, SI
	TESTL AX, AX
	JE    LBB18_32
	WORD  $0x9848                 // cltq
	LONG  $0xbc0f48f3; BYTE $0xc0 // tzcntq       %rax, %rax
	LEAQ  64(SI)(AX*1), CX
	JMP   LBB18_33

LBB18_29:
	CMPQ  DI, $64
	JL    LBB18_5
	LEAQ  64(SI), CX
	LONG  $0x016ffdc5         // vmovdqa      (%rcx), %ymm0
	QUAD  $0xfffffdc00574fdc5 // vpcmpeqb     $-576(%rip), %ymm0, %ymm0  /* LCPI18_0(%rip) */
	LONG  $0xc8d77dc5         // vpmovmskb    %ymm0, %r9d
	TESTL R9, R9
	JE    LBB18_71
	ADDQ  $-64, DI
	JMP   LBB18_18

LBB18_32:
	QUAD $0xfffffda20574fdc5     // vpcmpeqb     $-606(%rip), %ymm0, %ymm0  /* LCPI18_0(%rip) */
	LONG $0xc0d7fdc5             // vpmovmskb    %ymm0, %eax
	WORD $0x9848                 // cltq
	LONG $0xbc0f48f3; BYTE $0xc0 // tzcntq       %rax, %rax
	LEAQ 96(SI)(AX*1), CX

LBB18_33:
	MOVQ $-1, AX
	CMPQ CX, DX
	JAE  LBB18_5
	ADDQ R8, CX
	JS   LBB18_5
	LEAQ -1(R10), R9
	QUAD $0xfffffd6d056ffec5 // vmovdqu      $-659(%rip), %ymm0  /* LCPI18_0(%rip) */
	MOVQ $-1, R8

LBB18_36:
	LEAQ 0(R9)(CX*1), DX
	XORL AX, AX

LBB18_37:
	CMPB    0(DX)(AX*1), $92
	LEAQ    -1(AX), AX
	JE      LBB18_37
	NOTL    AX
	TESTB   $1, AX
	JE      LBB18_69
	LEAQ    1(CX), R12
	MOVQ    R11, DX
	SUBQ    R12, DX
	LEAQ    1(R10)(CX*1), R13
	MOVQ    R13, AX
	MOVQ    DX, BX
	MOVQ    R13, SI
	ANDQ    $31, AX
	JE      LBB18_43
	MOVQ    R13, CX
	ANDQ    $-32, CX
	LONG    $0x0974fdc5             // vpcmpeqb     (%rcx), %ymm0, %ymm1
	LONG    $0xc9d7fdc5             // vpmovmskb    %ymm1, %ecx
	LONG    $0xf77ae2c4; BYTE $0xc9 // sarxl        %eax, %ecx, %ecx
	TESTL   CX, CX
	JE      LBB18_42
	MOVLQSX CX, AX
	LONG    $0xbc0f48f3; BYTE $0xc8 // tzcntq       %rax, %rcx
	CMPQ    CX, DX
	LONG    $0xc84d0f49             // cmovgeq      %r8, %rcx
	JMP     LBB18_59

LBB18_42:
	MOVL $32, CX
	SUBQ AX, CX
	LEAQ 0(R13)(CX*1), SI
	MOVQ DX, BX
	SUBQ CX, BX

LBB18_43:
	MOVQ BX, AX
	CMPQ BX, $128
	JL   LBB18_46

LBB18_44:
	LONG $0x2674fdc5             // vpcmpeqb     (%rsi), %ymm0, %ymm4
	LONG $0x5e74fdc5; BYTE $0x20 // vpcmpeqb     $32(%rsi), %ymm0, %ymm3
	LONG $0x5674fdc5; BYTE $0x40 // vpcmpeqb     $64(%rsi), %ymm0, %ymm2
	LONG $0x4e74fdc5; BYTE $0x60 // vpcmpeqb     $96(%rsi), %ymm0, %ymm1
	LONG $0xecebe5c5             // vpor         %ymm4, %ymm3, %ymm5
	LONG $0xf1ebedc5             // vpor         %ymm1, %ymm2, %ymm6
	LONG $0xeeebd5c5             // vpor         %ymm6, %ymm5, %ymm5
	LONG $0x177de2c4; BYTE $0xed // vptest       %ymm5, %ymm5
	JNE  LBB18_52
	SUBQ $-128, SI
	LEAQ -128(AX), BX
	CMPQ AX, $255
	MOVQ BX, AX
	JG   LBB18_44

LBB18_46:
	MOVQ  $-1, AX
	TESTQ BX, BX
	JS    LBB18_5
	LONG  $0x0e74fdc5 // vpcmpeqb     (%rsi), %ymm0, %ymm1
	LONG  $0xf9d7fdc5 // vpmovmskb    %ymm1, %edi
	TESTL DI, DI
	JE    LBB18_49

LBB18_48:
	MOVQ    SI, CX
	MOVLQSX DI, SI
	LONG    $0xbc0f48f3; BYTE $0xf6 // tzcntq       %rsi, %rsi
	CMPQ    SI, BX
	JL      LBB18_57
	JMP     LBB18_5

LBB18_49:
	CMPQ    BX, $31
	JLE     LBB18_5
	LEAQ    32(SI), CX
	LONG    $0x0974fdc5             // vpcmpeqb     (%rcx), %ymm0, %ymm1
	LONG    $0xf9d7fdc5             // vpmovmskb    %ymm1, %edi
	TESTL   DI, DI
	JE      LBB18_54
	ADDQ    $-32, BX
	MOVLQSX DI, SI
	LONG    $0xbc0f48f3; BYTE $0xf6 // tzcntq       %rsi, %rsi
	CMPQ    SI, BX
	JL      LBB18_57
	JMP     LBB18_5

LBB18_52:
	LONG  $0xc4d7fdc5             // vpmovmskb    %ymm4, %eax
	TESTL AX, AX
	JE    LBB18_61
	SUBQ  R13, SI
	WORD  $0x9848                 // cltq
	LONG  $0xbc0f48f3; BYTE $0xc8 // tzcntq       %rax, %rcx
	JMP   LBB18_58

LBB18_54:
	CMPQ    BX, $64
	JL      LBB18_5
	LEAQ    64(SI), CX
	LONG    $0x0974fdc5             // vpcmpeqb     (%rcx), %ymm0, %ymm1
	LONG    $0xf9d7fdc5             // vpmovmskb    %ymm1, %edi
	TESTL   DI, DI
	JE      LBB18_63
	ADDQ    $-64, BX
	MOVLQSX DI, SI
	LONG    $0xbc0f48f3; BYTE $0xf6 // tzcntq       %rsi, %rsi
	CMPQ    SI, BX
	JGE     LBB18_5

LBB18_57:
	SUBQ R13, CX

LBB18_58:
	ADDQ SI, CX

LBB18_59:
	MOVQ $-1, AX
	CMPQ CX, DX
	JAE  LBB18_5
	ADDQ R12, CX
	JNS  LBB18_36
	JMP  LBB18_5

LBB18_61:
	LONG  $0xc3d7fdc5             // vpmovmskb    %ymm3, %eax
	TESTL AX, AX
	JE    LBB18_66
	WORD  $0x9848                 // cltq
	LONG  $0xbc0f48f3; BYTE $0xc0 // tzcntq       %rax, %rax
	SUBQ  R13, SI
	LEAQ  32(SI)(AX*1), CX
	JMP   LBB18_59

LBB18_63:
	CMPQ  BX, $96
	JL    LBB18_5
	ADDQ  $96, SI
	LONG  $0x0e74fdc5 // vpcmpeqb     (%rsi), %ymm0, %ymm1
	LONG  $0xf9d7fdc5 // vpmovmskb    %ymm1, %edi
	TESTL DI, DI
	JE    LBB18_5
	ADDQ  $-96, BX
	JMP   LBB18_48

LBB18_66:
	LONG  $0xc2d7fdc5             // vpmovmskb    %ymm2, %eax
	SUBQ  R13, SI
	TESTL AX, AX
	JE    LBB18_68
	WORD  $0x9848                 // cltq
	LONG  $0xbc0f48f3; BYTE $0xc0 // tzcntq       %rax, %rax
	LEAQ  64(SI)(AX*1), CX
	JMP   LBB18_59

LBB18_68:
	LONG $0xc1d7fdc5             // vpmovmskb    %ymm1, %eax
	WORD $0x9848                 // cltq
	LONG $0xbc0f48f3; BYTE $0xc0 // tzcntq       %rax, %rax
	LEAQ 96(SI)(AX*1), CX
	JMP  LBB18_59

LBB18_69:
	TESTQ CX, CX
	JNS   LBB18_2
	JMP   LBB18_4

LBB18_71:
	CMPQ  DI, $96
	JL    LBB18_5
	ADDQ  $96, SI
	LONG  $0x066ffdc5         // vmovdqa      (%rsi), %ymm0
	QUAD  $0xfffffb4c0574fdc5 // vpcmpeqb     $-1204(%rip), %ymm0, %ymm0  /* LCPI18_0(%rip) */
	LONG  $0xc8d77dc5         // vpmovmskb    %ymm0, %r9d
	TESTL R9, R9
	JE    LBB18_5
	ADDQ  $-96, DI
	JMP   LBB18_17

_skip_negative:
	BYTE  $0x55                   // pushq        %rbp
	WORD  $0x8948; BYTE $0xe5     // movq         %rsp, %rbp
	BYTE  $0x53                   // pushq        %rbx
	SUBQ  $40, SP
	MOVQ  SI, DX
	MOVQ  0(SI), CX
	LEAQ  -1(CX), BX
	MOVQ  0(DI), AX
	MOVQ  8(DI), SI
	LEAQ  -40(BP), R8
	MOVQ  AX, DI
	MOVQ  BX, R9
	LONG  $0x00001ee8; BYTE $0x00 // callq        _advance_number
	TESTQ AX, AX
	LONG  $0xc3490f48             // cmovnsq      %rbx, %rax
	ADDQ  $40, SP
	BYTE  $0x5b                   // popq         %rbx
	BYTE  $0x5d                   // popq         %rbp
	RET

LCPI20_0:
	QUAD $0x4024000000000000 // .quad 0x4024000000000000

LCPI20_1:
	QUAD $0x7ff0000000000000 // .quad 0x7ff0000000000000

_advance_number:
	BYTE $0x55               // pushq        %rbp
	WORD $0x8948; BYTE $0xe5 // movq         %rsp, %rbp
	WORD $0x5741             // pushq        %r15
	WORD $0x5641             // pushq        %r14
	BYTE $0x53               // pushq        %rbx
	MOVQ $-1, AX
	CMPQ SI, CX
	JBE  LBB20_9
	MOVQ $0, 16(R8)
	MOVQ R9, 24(R8)
	MOVB 0(DI)(CX*1), R14
	CMPB R14, $48
	JNE  LBB20_10
	INCQ CX
	CMPQ CX, SI
	JAE  LBB20_12
	XORL R9, R9

LBB20_4:
	LONG $0x2afbc1c4; BYTE $0xc1   // vcvtsi2sd    %r9, %xmm0, %xmm0
	MOVQ R9, 16(R8)
	LONG $0x117bc1c4; WORD $0x0840 // vmovsd       %xmm0, $8(%r8)
	ADDQ $8, R8
	MOVL $9, BX
	MOVQ R8, R9
	CMPQ CX, SI
	JAE  LBB20_25
	JMP  LBB20_5

LBB20_10:
	LEAL -48(R14), BX
	CMPB BX, $9
	JBE  LBB20_13

LBB20_11:
	MOVQ $-2, AX
	JMP  LBB20_55

LBB20_12:
	MOVL $9, AX
	JMP  LBB20_55

LBB20_13:
	INCQ CX
	XORL R11, R11
	MOVQ CX, R10

LBB20_14:
	IMUL3Q  $10, R11, R9
	JO      LBB20_19
	MOVBLZX R14, CX
	ADDQ    $-48, CX
	ADDQ    CX, R9
	JO      LBB20_19
	CMPQ    SI, R10
	JE      LBB20_34
	MOVBLZX 0(DI)(R10*1), R14
	LEAL    -48(R14), CX
	INCQ    R10
	MOVQ    R9, R11
	CMPB    CX, $10
	JB      LBB20_14
	DECQ    R10
	MOVQ    R10, CX
	JMP     LBB20_4

LBB20_19:
	MOVQ R9, 16(R8)
	LONG $0x2afbc1c4; BYTE $0xc9   // vcvtsi2sd    %r9, %xmm0, %xmm1
	LONG $0x2afbc1c4; BYTE $0xc3   // vcvtsi2sd    %r11, %xmm0, %xmm0
	LEAQ 8(R8), R9
	CMPQ R10, SI
	MOVQ R10, R11
	LONG $0xde420f4c               // cmovbq       %rsi, %r11
	LONG $0x117bc1c4; WORD $0x0848 // vmovsd       %xmm1, $8(%r8)
	MOVB -1(DI)(R10*1), BX
	DECQ R10
	QUAD $0xfffffef80d10fbc5       // vmovsd       $-264(%rip), %xmm1  /* LCPI20_0(%rip) */

LBB20_20:
	LONG    $0xd028f9c5             // vmovapd      %xmm0, %xmm2
	LEAQ    1(R10), CX
	MOVBLSX BX, BX
	ADDL    $-48, BX
	LONG    $0xc32ae3c5             // vcvtsi2sd    %ebx, %xmm3, %xmm0
	LONG    $0xb9e9e2c4; BYTE $0xc1 // vfmadd231sd  %xmm1, %xmm2, %xmm0
	CMPQ    CX, SI
	JAE     LBB20_23
	MOVBLZX 1(DI)(R10*1), BX
	LEAL    -48(BX), R14
	MOVQ    CX, R10
	CMPB    R14, $10
	JB      LBB20_20
	JMP     LBB20_24

LBB20_23:
	MOVQ R11, CX

LBB20_24:
	LONG $0x117bc1c4; WORD $0x0840 // vmovsd       %xmm0, $8(%r8)
	MOVQ $9223372036854775807, BX
	MOVQ BX, 16(R8)
	MOVL $8, BX
	CMPQ CX, SI
	JAE  LBB20_25

LBB20_5:
	CMPB 0(DI)(CX*1), $46
	JNE  LBB20_25
	INCQ CX
	CMPQ CX, SI
	JAE  LBB20_9
	MOVB 0(DI)(CX*1), R14
	LEAL -48(R14), BX
	CMPB BX, $9
	JA   LBB20_11
	MOVL $2, R11
	SUBQ SI, R11
	XORL R10, R10
	MOVQ CX, R8

LBB20_36:
	LEAQ    0(R11)(R8*1), R15
	LEAL    0(R10)(R10*4), R10
	MOVBLZX R14, BX
	LEAL    -48(BX)(R10*2), R10
	CMPQ    R15, $1
	JE      LBB20_44
	MOVBLZX 1(DI)(R8*1), R14
	INCQ    R8
	LEAL    -48(R14), BX
	CMPB    BX, $10
	JB      LBB20_36
	JMP     LBB20_45

LBB20_25:
	MOVQ CX, R8
	CMPQ R8, SI
	JAE  LBB20_54

LBB20_26:
	MOVB 0(DI)(R8*1), CX
	ORB  $32, CX
	CMPB CX, $101
	JNE  LBB20_54
	LEAQ 1(R8), CX
	CMPQ CX, SI
	JAE  LBB20_9
	MOVB 0(DI)(CX*1), R10
	CMPB R10, $45
	JE   LBB20_30
	MOVL $1, R11
	CMPB R10, $43
	JNE  LBB20_38

LBB20_30:
	LEAQ  -1(SI), BX
	CMPQ  CX, BX
	JAE   LBB20_55
	LEAQ  2(R8), R14
	XORL  AX, AX
	CMPB  R10, $43
	SETEQ AX
	LEAL  -1(AX)(AX*1), R11
	MOVB  2(DI)(R8*1), R10
	JMP   LBB20_39

LBB20_9:
	MOVQ SI, CX

LBB20_55:
	MOVQ CX, 0(DX)
	BYTE $0x5b     // popq         %rbx
	WORD $0x5e41   // popq         %r14
	WORD $0x5f41   // popq         %r15
	BYTE $0x5d     // popq         %rbp
	RET

LBB20_34:
	MOVQ SI, CX
	JMP  LBB20_4

LBB20_38:
	MOVQ CX, R14

LBB20_39:
	LEAL -48(R10), CX
	MOVQ $-2, AX
	CMPB CX, $9
	JBE  LBB20_41
	MOVQ R14, CX
	JMP  LBB20_55

LBB20_41:
	LEAQ 1(R14), R8
	CMPQ R8, SI
	LONG $0xc6420f4c // cmovbq       %rsi, %r8
	XORL AX, AX

LBB20_42:
	LEAL    0(AX)(AX*4), AX
	LEAQ    1(R14), CX
	MOVBLZX R10, BX
	LEAL    -48(BX)(AX*2), AX
	CMPQ    CX, SI
	JAE     LBB20_48
	MOVBLZX 1(DI)(R14*1), R10
	LEAL    -48(R10), BX
	MOVQ    CX, R14
	CMPB    BX, $10
	JB      LBB20_42
	JMP     LBB20_49

LBB20_44:
	MOVQ SI, R8

LBB20_45:
	SUBQ R8, CX
	LONG $0xc957f1c5         // vxorpd       %xmm1, %xmm1, %xmm1
	CMPL CX, $-323
	JL   LBB20_53
	CMPL CX, $308
	JLE  LBB20_52
	QUAD $0xfffffd690d10fbc5 // vmovsd       $-663(%rip), %xmm1  /* LCPI20_1(%rip) */
	JMP  LBB20_53

LBB20_48:
	MOVQ R8, CX

LBB20_49:
	IMULL R11, AX
	LONG  $0xc957f1c5         // vxorpd       %xmm1, %xmm1, %xmm1
	CMPL  AX, $-323
	JL    LBB20_57
	CMPL  AX, $308
	JLE   LBB20_56
	QUAD  $0xfffffd460d10fbc5 // vmovsd       $-698(%rip), %xmm1  /* LCPI20_1(%rip) */
	JMP   LBB20_57

LBB20_52:
	LONG $0x2a63c1c4; BYTE $0xca               // vcvtsi2sd    %r10d, %xmm3, %xmm1
	ADDL $323, CX
	LONG $0x8e1d8d48; WORD $0x0006; BYTE $0x00 // leaq         $1678(%rip), %rbx  /* _P10_TAB(%rip) */
	LONG $0x0c59f3c5; BYTE $0xcb               // vmulsd       (%rbx,%rcx,8), %xmm1, %xmm1

LBB20_53:
	LONG $0xc158fbc5             // vaddsd       %xmm1, %xmm0, %xmm0
	LONG $0x117bc1c4; BYTE $0x01 // vmovsd       %xmm0, (%r9)
	MOVL $8, BX
	CMPQ R8, SI
	JB   LBB20_26

LBB20_54:
	MOVQ R8, CX
	MOVQ BX, AX
	JMP  LBB20_55

LBB20_56:
	ADDL $323, AX
	LONG $0x5b358d48; WORD $0x0006; BYTE $0x00 // leaq         $1627(%rip), %rsi  /* _P10_TAB(%rip) */
	LONG $0x0c59fbc5; BYTE $0xc6               // vmulsd       (%rsi,%rax,8), %xmm0, %xmm1

LBB20_57:
	LONG $0x117bc1c4; BYTE $0x09 // vmovsd       %xmm1, (%r9)
	MOVL $8, AX
	JMP  LBB20_55

_skip_positive:
	BYTE  $0x55                   // pushq        %rbp
	WORD  $0x8948; BYTE $0xe5     // movq         %rsp, %rbp
	BYTE  $0x53                   // pushq        %rbx
	SUBQ  $40, SP
	MOVQ  SI, DX
	MOVQ  0(SI), BX
	DECQ  BX
	MOVQ  0(DI), AX
	MOVQ  8(DI), SI
	LEAQ  -40(BP), R8
	MOVQ  AX, DI
	MOVQ  BX, CX
	MOVQ  BX, R9
	LONG  $0xfffcc8e8; BYTE $0xff // callq        _advance_number
	TESTQ AX, AX
	LONG  $0xc3490f48             // cmovnsq      %rbx, %rax
	ADDQ  $40, SP
	BYTE  $0x5b                   // popq         %rbx
	BYTE  $0x5d                   // popq         %rbp
	RET

_TabPowE:
	WORD $0xfb3c // .word 64316
	WORD $0xfb57 // .word 64343
	WORD $0xfb72 // .word 64370
	WORD $0xfb8c // .word 64396
	WORD $0xfba7 // .word 64423
	WORD $0xfbc1 // .word 64449
	WORD $0xfbdc // .word 64476
	WORD $0xfbf6 // .word 64502
	WORD $0xfc11 // .word 64529
	WORD $0xfc2c // .word 64556
	WORD $0xfc46 // .word 64582
	WORD $0xfc61 // .word 64609
	WORD $0xfc7b // .word 64635
	WORD $0xfc96 // .word 64662
	WORD $0xfcb1 // .word 64689
	WORD $0xfccb // .word 64715
	WORD $0xfce6 // .word 64742
	WORD $0xfd00 // .word 64768
	WORD $0xfd1b // .word 64795
	WORD $0xfd35 // .word 64821
	WORD $0xfd50 // .word 64848
	WORD $0xfd6b // .word 64875
	WORD $0xfd85 // .word 64901
	WORD $0xfda0 // .word 64928
	WORD $0xfdba // .word 64954
	WORD $0xfdd5 // .word 64981
	WORD $0xfdef // .word 65007
	WORD $0xfe0a // .word 65034
	WORD $0xfe25 // .word 65061
	WORD $0xfe3f // .word 65087
	WORD $0xfe5a // .word 65114
	WORD $0xfe74 // .word 65140
	WORD $0xfe8f // .word 65167
	WORD $0xfea9 // .word 65193
	WORD $0xfec4 // .word 65220
	WORD $0xfedf // .word 65247
	WORD $0xfef9 // .word 65273
	WORD $0xff14 // .word 65300
	WORD $0xff2e // .word 65326
	WORD $0xff49 // .word 65353
	WORD $0xff63 // .word 65379
	WORD $0xff7e // .word 65406
	WORD $0xff99 // .word 65433
	WORD $0xffb3 // .word 65459
	WORD $0xffce // .word 65486
	WORD $0xffe8 // .word 65512
	WORD $0x0003 // .word 3
	WORD $0x001e // .word 30
	WORD $0x0038 // .word 56
	WORD $0x0053 // .word 83
	WORD $0x006d // .word 109
	WORD $0x0088 // .word 136
	WORD $0x00a2 // .word 162
	WORD $0x00bd // .word 189
	WORD $0x00d8 // .word 216
	WORD $0x00f2 // .word 242
	WORD $0x010d // .word 269
	WORD $0x0127 // .word 295
	WORD $0x0142 // .word 322
	WORD $0x015c // .word 348
	WORD $0x0177 // .word 375
	WORD $0x0192 // .word 402
	WORD $0x01ac // .word 428
	WORD $0x01c7 // .word 455
	WORD $0x01e1 // .word 481
	WORD $0x01fc // .word 508
	WORD $0x0216 // .word 534
	WORD $0x0231 // .word 561
	WORD $0x024c // .word 588
	WORD $0x0266 // .word 614
	WORD $0x0281 // .word 641
	WORD $0x029b // .word 667
	WORD $0x02b6 // .word 694
	WORD $0x02d0 // .word 720
	WORD $0x02eb // .word 747
	WORD $0x0306 // .word 774
	WORD $0x0320 // .word 800
	WORD $0x033b // .word 827
	WORD $0x0355 // .word 853
	WORD $0x0370 // .word 880
	WORD $0x038b // .word 907
	WORD $0x03a5 // .word 933
	WORD $0x03c0 // .word 960
	WORD $0x03da // .word 986
	WORD $0x03f5 // .word 1013
	WORD $0x040f // .word 1039
	WORD $0x042a // .word 1066

_TabPowF:
	QUAD $0xfa8fd5a0081c0288 // .quad -391859759250406776
	QUAD $0xbaaee17fa23ebf76 // .quad -4994806998408183946
	QUAD $0x8b16fb203055ac76 // .quad -8424269937281487754
	QUAD $0xcf42894a5dce35ea // .quad -3512093806901185046
	QUAD $0x9a6bb0aa55653b2d // .quad -7319562523736982739
	QUAD $0xe61acf033d1a45df // .quad -1865951482774665761
	QUAD $0xab70fe17c79ac6ca // .quad -6093090917745768758
	QUAD $0xff77b1fcbebcdc4f // .quad -38366372719436721
	QUAD $0xbe5691ef416bd60c // .quad -4731433901725329908
	QUAD $0x8dd01fad907ffc3c // .quad -8228041688891786180
	QUAD $0xd3515c2831559a83 // .quad -3219690930897053053
	QUAD $0x9d71ac8fada6c9b5 // .quad -7101705404292871755
	QUAD $0xea9c227723ee8bcb // .quad -1541319077368263733
	QUAD $0xaecc49914078536d // .quad -5851220927660403859
	QUAD $0x823c12795db6ce57 // .quad -9062348037703676329
	QUAD $0xc21094364dfb5637 // .quad -4462904269766699465
	QUAD $0x9096ea6f3848984f // .quad -8027971522334779313
	QUAD $0xd77485cb25823ac7 // .quad -2921563150702462265
	QUAD $0xa086cfcd97bf97f4 // .quad -6879582898840692748
	QUAD $0xef340a98172aace5 // .quad -1210330751515841307
	QUAD $0xb23867fb2a35b28e // .quad -5604615407819967858
	QUAD $0x84c8d4dfd2c63f3b // .quad -8878612607581929669
	QUAD $0xc5dd44271ad3cdba // .quad -4189117143640191558
	QUAD $0x936b9fcebb25c996 // .quad -7823984217374209642
	QUAD $0xdbac6c247d62a584 // .quad -2617598379430861436
	QUAD $0xa3ab66580d5fdaf6 // .quad -6653111496142234890
	QUAD $0xf3e2f893dec3f126 // .quad -872862063775190746
	QUAD $0xb5b5ada8aaff80b8 // .quad -5353181642124984136
	QUAD $0x87625f056c7c4a8b // .quad -8691279853972075893
	QUAD $0xc9bcff6034c13053 // .quad -3909969587797413805
	QUAD $0x964e858c91ba2655 // .quad -7616003081050118571
	QUAD $0xdff9772470297ebd // .quad -2307682335666372931
	QUAD $0xa6dfbd9fb8e5b88f // .quad -6422206049907525489
	QUAD $0xf8a95fcf88747d94 // .quad -528786136287117932
	QUAD $0xb94470938fa89bcf // .quad -5096825099203863601
	QUAD $0x8a08f0f8bf0f156b // .quad -8500279345513818773
	QUAD $0xcdb02555653131b6 // .quad -3625356651333078602
	QUAD $0x993fe2c6d07b7fac // .quad -7403949918844649556
	QUAD $0xe45c10c42a2b3b06 // .quad -1991698500497491194
	QUAD $0xaa242499697392d3 // .quad -6186779746782440749
	QUAD $0xfd87b5f28300ca0e // .quad -177973607073265138
	QUAD $0xbce5086492111aeb // .quad -4835449396872013077
	QUAD $0x8cbccc096f5088cc // .quad -8305539271883716404
	QUAD $0xd1b71758e219652c // .quad -3335171328526686932
	QUAD $0x9c40000000000000 // .quad -7187745005283311616
	QUAD $0xe8d4a51000000000 // .quad -1669528073709551616
	QUAD $0xad78ebc5ac620000 // .quad -5946744073709551616
	QUAD $0x813f3978f8940984 // .quad -9133518327554766460
	QUAD $0xc097ce7bc90715b3 // .quad -4568956265895094861
	QUAD $0x8f7e32ce7bea5c70 // .quad -8106986416796705680
	QUAD $0xd5d238a4abe98068 // .quad -3039304518611664792
	QUAD $0x9f4f2726179a2245 // .quad -6967307053960650171
	QUAD $0xed63a231d4c4fb27 // .quad -1341049929119499481
	QUAD $0xb0de65388cc8ada8 // .quad -5702008784649933400
	QUAD $0x83c7088e1aab65db // .quad -8951176327949752869
	QUAD $0xc45d1df942711d9a // .quad -4297245513042813542
	QUAD $0x924d692ca61be758 // .quad -7904546130479028392
	QUAD $0xda01ee641a708dea // .quad -2737644984756826646
	QUAD $0xa26da3999aef774a // .quad -6742553186979055798
	QUAD $0xf209787bb47d6b85 // .quad -1006140569036166267
	QUAD $0xb454e4a179dd1877 // .quad -5452481866653427593
	QUAD $0x865b86925b9bc5c2 // .quad -8765264286586255934
	QUAD $0xc83553c5c8965d3d // .quad -4020214983419339459
	QUAD $0x952ab45cfa97a0b3 // .quad -7698142301602209613
	QUAD $0xde469fbd99a05fe3 // .quad -2430079312244744221
	QUAD $0xa59bc234db398c25 // .quad -6513398903789220827
	QUAD $0xf6c69a72a3989f5c // .quad -664674077828931748
	QUAD $0xb7dcbf5354e9bece // .quad -5198069505264599346
	QUAD $0x88fcf317f22241e2 // .quad -8575712306248138270
	QUAD $0xcc20ce9bd35c78a5 // .quad -3737760522056206171
	QUAD $0x98165af37b2153df // .quad -7487697328667536417
	QUAD $0xe2a0b5dc971f303a // .quad -2116491865831296966
	QUAD $0xa8d9d1535ce3b396 // .quad -6279758049420528746
	QUAD $0xfb9b7cd9a4a7443c // .quad -316522074587315140
	QUAD $0xbb764c4ca7a44410 // .quad -4938676049251384304
	QUAD $0x8bab8eefb6409c1a // .quad -8382449121214030822
	QUAD $0xd01fef10a657842c // .quad -3449775934753242068
	QUAD $0x9b10a4e5e9913129 // .quad -7273132090830278359
	QUAD $0xe7109bfba19c0c9d // .quad -1796764746270372707
	QUAD $0xac2820d9623bf429 // .quad -6041542782089432023
	QUAD $0x80444b5e7aa7cf85 // .quad -9204148869281624187
	QUAD $0xbf21e44003acdd2d // .quad -4674203974643163859
	QUAD $0x8e679c2f5e44ff8f // .quad -8185402070463610993
	QUAD $0xd433179d9c8cb841 // .quad -3156152948152813503
	QUAD $0x9e19db92b4e31ba9 // .quad -7054365918152680535
	QUAD $0xeb96bf6ebadf77d9 // .quad -1470777745987373095
	QUAD $0xaf87023b9bf0ee6b // .quad -5798663540173640085

_TabPow10:
	QUAD $0x0000000000000001 // .quad 1
	QUAD $0x000000000000000a // .quad 10
	QUAD $0x0000000000000064 // .quad 100
	QUAD $0x00000000000003e8 // .quad 1000
	QUAD $0x0000000000002710 // .quad 10000
	QUAD $0x00000000000186a0 // .quad 100000
	QUAD $0x00000000000f4240 // .quad 1000000
	QUAD $0x0000000000989680 // .quad 10000000
	QUAD $0x0000000005f5e100 // .quad 100000000
	QUAD $0x000000003b9aca00 // .quad 1000000000

_Digits:
	QUAD $0x3330323031303030; QUAD $0x3730363035303430 // .ascii 16, '0001020304050607'
	QUAD $0x3131303139303830; QUAD $0x3531343133313231 // .ascii 16, '0809101112131415'
	QUAD $0x3931383137313631; QUAD $0x3332323231323032 // .ascii 16, '1617181920212223'
	QUAD $0x3732363235323432; QUAD $0x3133303339323832 // .ascii 16, '2425262728293031'
	QUAD $0x3533343333333233; QUAD $0x3933383337333633 // .ascii 16, '3233343536373839'
	QUAD $0x3334323431343034; QUAD $0x3734363435343434 // .ascii 16, '4041424344454647'
	QUAD $0x3135303539343834; QUAD $0x3535343533353235 // .ascii 16, '4849505152535455'
	QUAD $0x3935383537353635; QUAD $0x3336323631363036 // .ascii 16, '5657585960616263'
	QUAD $0x3736363635363436; QUAD $0x3137303739363836 // .ascii 16, '6465666768697071'
	QUAD $0x3537343733373237; QUAD $0x3937383737373637 // .ascii 16, '7273747576777879'
	QUAD $0x3338323831383038; QUAD $0x3738363835383438 // .ascii 16, '8081828384858687'
	QUAD $0x3139303939383838; QUAD $0x3539343933393239 // .ascii 16, '8889909192939495'
	QUAD $0x3939383937393639                           // .ascii 8, '96979899'

_VecShiftShuffles:
	QUAD $0x0706050403020100; QUAD $0x0f0e0d0c0b0a0908 // .ascii 16, '\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f'
	QUAD $0x0807060504030201; QUAD $0xff0f0e0d0c0b0a09 // .ascii 16, '\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\xff'
	QUAD $0x0908070605040302; QUAD $0xffff0f0e0d0c0b0a // .ascii 16, '\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\xff\xff'
	QUAD $0x0a09080706050403; QUAD $0xffffff0f0e0d0c0b // .ascii 16, '\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\xff\xff\xff'
	QUAD $0x0b0a090807060504; QUAD $0xffffffff0f0e0d0c // .ascii 16, '\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\xff\xff\xff\xff'
	QUAD $0x0c0b0a0908070605; QUAD $0xffffffffff0f0e0d // .ascii 16, '\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\xff\xff\xff\xff\xff'
	QUAD $0x0d0c0b0a09080706; QUAD $0xffffffffffff0f0e // .ascii 16, '\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\xff\xff\xff\xff\xff\xff'
	QUAD $0x0e0d0c0b0a090807; QUAD $0xffffffffffffff0f // .ascii 16, '\x07\x08\t\n\x0b\x0c\r\x0e\x0f\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0x0f0e0d0c0b0a0908; QUAD $0xffffffffffffffff // .ascii 16, '\x08\t\n\x0b\x0c\r\x0e\x0f\xff\xff\xff\xff\xff\xff\xff\xff'

__UnquoteTab:
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .ascii 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .ascii 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000220000; QUAD $0x2f00000000000000 // .ascii 16, '\x00\x00"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00/'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .ascii 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .ascii 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000005c00000000 // .ascii 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\\\x00\x00\x00'
	QUAD $0x000c000000080000; QUAD $0x000a000000000000 // .ascii 16, '\x00\x00\x08\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\n\x00'
	LONG $0x000d0000; WORD $0xff09                     // .ascii 6, '\x00\x00\r\x00\t\xff'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; WORD $0x0000             // .space 10, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

_P10_TAB:
	QUAD $0x0000000000000002 // .quad 0x0000000000000002
	QUAD $0x0000000000000014 // .quad 0x0000000000000014
	QUAD $0x00000000000000ca // .quad 0x00000000000000ca
	QUAD $0x00000000000007e8 // .quad 0x00000000000007e8
	QUAD $0x0000000000004f10 // .quad 0x0000000000004f10
	QUAD $0x00000000000316a2 // .quad 0x00000000000316a2
	QUAD $0x00000000001ee257 // .quad 0x00000000001ee257
	QUAD $0x000000000134d761 // .quad 0x000000000134d761
	QUAD $0x000000000c1069cd // .quad 0x000000000c1069cd
	QUAD $0x0000000078a42205 // .quad 0x0000000078a42205
	QUAD $0x00000004b6695433 // .quad 0x00000004b6695433
	QUAD $0x0000002f201d49fb // .quad 0x0000002f201d49fb
	QUAD $0x000001d74124e3d1 // .quad 0x000001d74124e3d1
	QUAD $0x000012688b70e62b // .quad 0x000012688b70e62b
	QUAD $0x0000b8157268fdaf // .quad 0x0000b8157268fdaf
	QUAD $0x000730d67819e8d2 // .quad 0x000730d67819e8d2
	QUAD $0x0031fa182c40c60d // .quad 0x0031fa182c40c60d
	QUAD $0x0066789e3750f791 // .quad 0x0066789e3750f791
	QUAD $0x009c16c5c5253575 // .quad 0x009c16c5c5253575
	QUAD $0x00d18e3b9b374169 // .quad 0x00d18e3b9b374169
	QUAD $0x0105f1ca820511c3 // .quad 0x0105f1ca820511c3
	QUAD $0x013b6e3d22865634 // .quad 0x013b6e3d22865634
	QUAD $0x017124e63593f5e1 // .quad 0x017124e63593f5e1
	QUAD $0x01a56e1fc2f8f359 // .quad 0x01a56e1fc2f8f359
	QUAD $0x01dac9a7b3b7302f // .quad 0x01dac9a7b3b7302f
	QUAD $0x0210be08d0527e1d // .quad 0x0210be08d0527e1d
	QUAD $0x0244ed8b04671da5 // .quad 0x0244ed8b04671da5
	QUAD $0x027a28edc580e50e // .quad 0x027a28edc580e50e
	QUAD $0x02b059949b708f29 // .quad 0x02b059949b708f29
	QUAD $0x02e46ff9c24cb2f3 // .quad 0x02e46ff9c24cb2f3
	QUAD $0x03198bf832dfdfb0 // .quad 0x03198bf832dfdfb0
	QUAD $0x034feef63f97d79c // .quad 0x034feef63f97d79c
	QUAD $0x0383f559e7bee6c1 // .quad 0x0383f559e7bee6c1
	QUAD $0x03b8f2b061aea072 // .quad 0x03b8f2b061aea072
	QUAD $0x03ef2f5c7a1a488e // .quad 0x03ef2f5c7a1a488e
	QUAD $0x04237d99cc506d59 // .quad 0x04237d99cc506d59
	QUAD $0x04585d003f6488af // .quad 0x04585d003f6488af
	QUAD $0x048e74404f3daadb // .quad 0x048e74404f3daadb
	QUAD $0x04c308a831868ac9 // .quad 0x04c308a831868ac9
	QUAD $0x04f7cad23de82d7b // .quad 0x04f7cad23de82d7b
	QUAD $0x052dbd86cd6238d9 // .quad 0x052dbd86cd6238d9
	QUAD $0x05629674405d6388 // .quad 0x05629674405d6388
	QUAD $0x05973c115074bc6a // .quad 0x05973c115074bc6a
	QUAD $0x05cd0b15a491eb84 // .quad 0x05cd0b15a491eb84
	QUAD $0x060226ed86db3333 // .quad 0x060226ed86db3333
	QUAD $0x0636b0a8e891ffff // .quad 0x0636b0a8e891ffff
	QUAD $0x066c5cd322b67fff // .quad 0x066c5cd322b67fff
	QUAD $0x06a1ba03f5b21000 // .quad 0x06a1ba03f5b21000
	QUAD $0x06d62884f31e93ff // .quad 0x06d62884f31e93ff
	QUAD $0x070bb2a62fe638ff // .quad 0x070bb2a62fe638ff
	QUAD $0x07414fa7ddefe3a0 // .quad 0x07414fa7ddefe3a0
	QUAD $0x0775a391d56bdc87 // .quad 0x0775a391d56bdc87
	QUAD $0x07ab0c764ac6d3a9 // .quad 0x07ab0c764ac6d3a9
	QUAD $0x07e0e7c9eebc444a // .quad 0x07e0e7c9eebc444a
	QUAD $0x081521bc6a6b555c // .quad 0x081521bc6a6b555c
	QUAD $0x084a6a2b85062ab3 // .quad 0x084a6a2b85062ab3
	QUAD $0x0880825b3323dab0 // .quad 0x0880825b3323dab0
	QUAD $0x08b4a2f1ffecd15c // .quad 0x08b4a2f1ffecd15c
	QUAD $0x08e9cbae7fe805b3 // .quad 0x08e9cbae7fe805b3
	QUAD $0x09201f4d0ff10390 // .quad 0x09201f4d0ff10390
	QUAD $0x0954272053ed4474 // .quad 0x0954272053ed4474
	QUAD $0x098930e868e89591 // .quad 0x098930e868e89591
	QUAD $0x09bf7d228322baf5 // .quad 0x09bf7d228322baf5
	QUAD $0x09f3ae3591f5b4d9 // .quad 0x09f3ae3591f5b4d9
	QUAD $0x0a2899c2f6732210 // .quad 0x0a2899c2f6732210
	QUAD $0x0a5ec033b40fea93 // .quad 0x0a5ec033b40fea93
	QUAD $0x0a9338205089f29c // .quad 0x0a9338205089f29c
	QUAD $0x0ac8062864ac6f43 // .quad 0x0ac8062864ac6f43
	QUAD $0x0afe07b27dd78b14 // .quad 0x0afe07b27dd78b14
	QUAD $0x0b32c4cf8ea6b6ec // .quad 0x0b32c4cf8ea6b6ec
	QUAD $0x0b677603725064a8 // .quad 0x0b677603725064a8
	QUAD $0x0b9d53844ee47dd1 // .quad 0x0b9d53844ee47dd1
	QUAD $0x0bd25432b14ecea3 // .quad 0x0bd25432b14ecea3
	QUAD $0x0c06e93f5da2824c // .quad 0x0c06e93f5da2824c
	QUAD $0x0c3ca38f350b22df // .quad 0x0c3ca38f350b22df
	QUAD $0x0c71e6398126f5cb // .quad 0x0c71e6398126f5cb
	QUAD $0x0ca65fc7e170b33e // .quad 0x0ca65fc7e170b33e
	QUAD $0x0cdbf7b9d9cce00d // .quad 0x0cdbf7b9d9cce00d
	QUAD $0x0d117ad428200c08 // .quad 0x0d117ad428200c08
	QUAD $0x0d45d98932280f0a // .quad 0x0d45d98932280f0a
	QUAD $0x0d7b4feb7eb212cd // .quad 0x0d7b4feb7eb212cd
	QUAD $0x0db111f32f2f4bc0 // .quad 0x0db111f32f2f4bc0
	QUAD $0x0de5566ffafb1eb0 // .quad 0x0de5566ffafb1eb0
	QUAD $0x0e1aac0bf9b9e65c // .quad 0x0e1aac0bf9b9e65c
	QUAD $0x0e50ab877c142ffa // .quad 0x0e50ab877c142ffa
	QUAD $0x0e84d6695b193bf8 // .quad 0x0e84d6695b193bf8
	QUAD $0x0eba0c03b1df8af6 // .quad 0x0eba0c03b1df8af6
	QUAD $0x0ef047824f2bb6da // .quad 0x0ef047824f2bb6da
	QUAD $0x0f245962e2f6a490 // .quad 0x0f245962e2f6a490
	QUAD $0x0f596fbb9bb44db4 // .quad 0x0f596fbb9bb44db4
	QUAD $0x0f8fcbaa82a16121 // .quad 0x0f8fcbaa82a16121
	QUAD $0x0fc3df4a91a4dcb5 // .quad 0x0fc3df4a91a4dcb5
	QUAD $0x0ff8d71d360e13e2 // .quad 0x0ff8d71d360e13e2
	QUAD $0x102f0ce4839198db // .quad 0x102f0ce4839198db
	QUAD $0x1063680ed23aff89 // .quad 0x1063680ed23aff89
	QUAD $0x1098421286c9bf6b // .quad 0x1098421286c9bf6b
	QUAD $0x10ce5297287c2f45 // .quad 0x10ce5297287c2f45
	QUAD $0x1102f39e794d9d8b // .quad 0x1102f39e794d9d8b
	QUAD $0x1137b08617a104ee // .quad 0x1137b08617a104ee
	QUAD $0x116d9ca79d89462a // .quad 0x116d9ca79d89462a
	QUAD $0x11a281e8c275cbda // .quad 0x11a281e8c275cbda
	QUAD $0x11d72262f3133ed1 // .quad 0x11d72262f3133ed1
	QUAD $0x120ceafbafd80e85 // .quad 0x120ceafbafd80e85
	QUAD $0x124212dd4de70913 // .quad 0x124212dd4de70913
	QUAD $0x12769794a160cb58 // .quad 0x12769794a160cb58
	QUAD $0x12ac3d79c9b8fe2e // .quad 0x12ac3d79c9b8fe2e
	QUAD $0x12e1a66c1e139edd // .quad 0x12e1a66c1e139edd
	QUAD $0x1316100725988694 // .quad 0x1316100725988694
	QUAD $0x134b9408eefea839 // .quad 0x134b9408eefea839
	QUAD $0x13813c85955f2923 // .quad 0x13813c85955f2923
	QUAD $0x13b58ba6fab6f36c // .quad 0x13b58ba6fab6f36c
	QUAD $0x13eaee90b964b047 // .quad 0x13eaee90b964b047
	QUAD $0x1420d51a73deee2d // .quad 0x1420d51a73deee2d
	QUAD $0x14550a6110d6a9b8 // .quad 0x14550a6110d6a9b8
	QUAD $0x148a4cf9550c5426 // .quad 0x148a4cf9550c5426
	QUAD $0x14c0701bd527b498 // .quad 0x14c0701bd527b498
	QUAD $0x14f48c22ca71a1bd // .quad 0x14f48c22ca71a1bd
	QUAD $0x1529af2b7d0e0a2d // .quad 0x1529af2b7d0e0a2d
	QUAD $0x15600d7b2e28c65c // .quad 0x15600d7b2e28c65c
	QUAD $0x159410d9f9b2f7f3 // .quad 0x159410d9f9b2f7f3
	QUAD $0x15c91510781fb5f0 // .quad 0x15c91510781fb5f0
	QUAD $0x15ff5a549627a36c // .quad 0x15ff5a549627a36c
	QUAD $0x16339874ddd8c623 // .quad 0x16339874ddd8c623
	QUAD $0x16687e92154ef7ac // .quad 0x16687e92154ef7ac
	QUAD $0x169e9e369aa2b597 // .quad 0x169e9e369aa2b597
	QUAD $0x16d322e220a5b17e // .quad 0x16d322e220a5b17e
	QUAD $0x1707eb9aa8cf1dde // .quad 0x1707eb9aa8cf1dde
	QUAD $0x173de6815302e556 // .quad 0x173de6815302e556
	QUAD $0x1772b010d3e1cf56 // .quad 0x1772b010d3e1cf56
	QUAD $0x17a75c1508da432b // .quad 0x17a75c1508da432b
	QUAD $0x17dd331a4b10d3f6 // .quad 0x17dd331a4b10d3f6
	QUAD $0x18123ff06eea847a // .quad 0x18123ff06eea847a
	QUAD $0x1846cfec8aa52598 // .quad 0x1846cfec8aa52598
	QUAD $0x187c83e7ad4e6efe // .quad 0x187c83e7ad4e6efe
	QUAD $0x18b1d270cc51055f // .quad 0x18b1d270cc51055f
	QUAD $0x18e6470cff6546b6 // .quad 0x18e6470cff6546b6
	QUAD $0x191bd8d03f3e9864 // .quad 0x191bd8d03f3e9864
	QUAD $0x1951678227871f3e // .quad 0x1951678227871f3e
	QUAD $0x1985c162b168e70e // .quad 0x1985c162b168e70e
	QUAD $0x19bb31bb5dc320d2 // .quad 0x19bb31bb5dc320d2
	QUAD $0x19f0ff151a99f483 // .quad 0x19f0ff151a99f483
	QUAD $0x1a253eda614071a4 // .quad 0x1a253eda614071a4
	QUAD $0x1a5a8e90f9908e0d // .quad 0x1a5a8e90f9908e0d
	QUAD $0x1a90991a9bfa58c8 // .quad 0x1a90991a9bfa58c8
	QUAD $0x1ac4bf6142f8eefa // .quad 0x1ac4bf6142f8eefa
	QUAD $0x1af9ef3993b72ab8 // .quad 0x1af9ef3993b72ab8
	QUAD $0x1b303583fc527ab3 // .quad 0x1b303583fc527ab3
	QUAD $0x1b6442e4fb671960 // .quad 0x1b6442e4fb671960
	QUAD $0x1b99539e3a40dfb8 // .quad 0x1b99539e3a40dfb8
	QUAD $0x1bcfa885c8d117a6 // .quad 0x1bcfa885c8d117a6
	QUAD $0x1c03c9539d82aec8 // .quad 0x1c03c9539d82aec8
	QUAD $0x1c38bba884e35a7a // .quad 0x1c38bba884e35a7a
	QUAD $0x1c6eea92a61c3118 // .quad 0x1c6eea92a61c3118
	QUAD $0x1ca3529ba7d19eaf // .quad 0x1ca3529ba7d19eaf
	QUAD $0x1cd8274291c6065b // .quad 0x1cd8274291c6065b
	QUAD $0x1d0e3113363787f2 // .quad 0x1d0e3113363787f2
	QUAD $0x1d42deac01e2b4f7 // .quad 0x1d42deac01e2b4f7
	QUAD $0x1d779657025b6235 // .quad 0x1d779657025b6235
	QUAD $0x1dad7becc2f23ac2 // .quad 0x1dad7becc2f23ac2
	QUAD $0x1de26d73f9d764b9 // .quad 0x1de26d73f9d764b9
	QUAD $0x1e1708d0f84d3de7 // .quad 0x1e1708d0f84d3de7
	QUAD $0x1e4ccb0536608d61 // .quad 0x1e4ccb0536608d61
	QUAD $0x1e81fee341fc585d // .quad 0x1e81fee341fc585d
	QUAD $0x1eb67e9c127b6e74 // .quad 0x1eb67e9c127b6e74
	QUAD $0x1eec1e43171a4a11 // .quad 0x1eec1e43171a4a11
	QUAD $0x1f2192e9ee706e4b // .quad 0x1f2192e9ee706e4b
	QUAD $0x1f55f7a46a0c89dd // .quad 0x1f55f7a46a0c89dd
	QUAD $0x1f8b758d848fac55 // .quad 0x1f8b758d848fac55
	QUAD $0x1fc1297872d9cbb5 // .quad 0x1fc1297872d9cbb5
	QUAD $0x1ff573d68f903ea2 // .quad 0x1ff573d68f903ea2
	QUAD $0x202ad0cc33744e4b // .quad 0x202ad0cc33744e4b
	QUAD $0x2060c27fa028b0ef // .quad 0x2060c27fa028b0ef
	QUAD $0x2094f31f8832dd2a // .quad 0x2094f31f8832dd2a
	QUAD $0x20ca2fe76a3f9475 // .quad 0x20ca2fe76a3f9475
	QUAD $0x21005df0a267bcc9 // .quad 0x21005df0a267bcc9
	QUAD $0x2134756ccb01abfb // .quad 0x2134756ccb01abfb
	QUAD $0x216992c7fdc216fa // .quad 0x216992c7fdc216fa
	QUAD $0x219ff779fd329cb9 // .quad 0x219ff779fd329cb9
	QUAD $0x21d3faac3e3fa1f3 // .quad 0x21d3faac3e3fa1f3
	QUAD $0x2208f9574dcf8a70 // .quad 0x2208f9574dcf8a70
	QUAD $0x223f37ad21436d0c // .quad 0x223f37ad21436d0c
	QUAD $0x227382cc34ca2428 // .quad 0x227382cc34ca2428
	QUAD $0x22a8637f41fcad32 // .quad 0x22a8637f41fcad32
	QUAD $0x22de7c5f127bd87e // .quad 0x22de7c5f127bd87e
	QUAD $0x23130dbb6b8d674f // .quad 0x23130dbb6b8d674f
	QUAD $0x2347d12a4670c123 // .quad 0x2347d12a4670c123
	QUAD $0x237dc574d80cf16b // .quad 0x237dc574d80cf16b
	QUAD $0x23b29b69070816e3 // .quad 0x23b29b69070816e3
	QUAD $0x23e7424348ca1c9c // .quad 0x23e7424348ca1c9c
	QUAD $0x241d12d41afca3c3 // .quad 0x241d12d41afca3c3
	QUAD $0x24522bc490dde65a // .quad 0x24522bc490dde65a
	QUAD $0x2486b6b5b5155ff0 // .quad 0x2486b6b5b5155ff0
	QUAD $0x24bc6463225ab7ec // .quad 0x24bc6463225ab7ec
	QUAD $0x24f1bebdf578b2f4 // .quad 0x24f1bebdf578b2f4
	QUAD $0x25262e6d72d6dfb0 // .quad 0x25262e6d72d6dfb0
	QUAD $0x255bba08cf8c979d // .quad 0x255bba08cf8c979d
	QUAD $0x2591544581b7dec2 // .quad 0x2591544581b7dec2
	QUAD $0x25c5a956e225d672 // .quad 0x25c5a956e225d672
	QUAD $0x25fb13ac9aaf4c0f // .quad 0x25fb13ac9aaf4c0f
	QUAD $0x2630ec4be0ad8f89 // .quad 0x2630ec4be0ad8f89
	QUAD $0x2665275ed8d8f36c // .quad 0x2665275ed8d8f36c
	QUAD $0x269a71368f0f3047 // .quad 0x269a71368f0f3047
	QUAD $0x26d086c219697e2c // .quad 0x26d086c219697e2c
	QUAD $0x2704a8729fc3ddb7 // .quad 0x2704a8729fc3ddb7
	QUAD $0x2739d28f47b4d525 // .quad 0x2739d28f47b4d525
	QUAD $0x277023998cd10537 // .quad 0x277023998cd10537
	QUAD $0x27a42c7ff0054685 // .quad 0x27a42c7ff0054685
	QUAD $0x27d9379fec069826 // .quad 0x27d9379fec069826
	QUAD $0x280f8587e7083e30 // .quad 0x280f8587e7083e30
	QUAD $0x2843b374f06526de // .quad 0x2843b374f06526de
	QUAD $0x2878a0522c7e7095 // .quad 0x2878a0522c7e7095
	QUAD $0x28aec866b79e0cba // .quad 0x28aec866b79e0cba
	QUAD $0x28e33d4032c2c7f5 // .quad 0x28e33d4032c2c7f5
	QUAD $0x29180c903f7379f2 // .quad 0x29180c903f7379f2
	QUAD $0x294e0fb44f50586e // .quad 0x294e0fb44f50586e
	QUAD $0x2982c9d0b1923745 // .quad 0x2982c9d0b1923745
	QUAD $0x29b77c44ddf6c516 // .quad 0x29b77c44ddf6c516
	QUAD $0x29ed5b561574765b // .quad 0x29ed5b561574765b
	QUAD $0x2a225915cd68c9f9 // .quad 0x2a225915cd68c9f9
	QUAD $0x2a56ef5b40c2fc77 // .quad 0x2a56ef5b40c2fc77
	QUAD $0x2a8cab3210f3bb95 // .quad 0x2a8cab3210f3bb95
	QUAD $0x2ac1eaff4a98553d // .quad 0x2ac1eaff4a98553d
	QUAD $0x2af665bf1d3e6a8d // .quad 0x2af665bf1d3e6a8d
	QUAD $0x2b2bff2ee48e0530 // .quad 0x2b2bff2ee48e0530
	QUAD $0x2b617f7d4ed8c33e // .quad 0x2b617f7d4ed8c33e
	QUAD $0x2b95df5ca28ef40d // .quad 0x2b95df5ca28ef40d
	QUAD $0x2bcb5733cb32b111 // .quad 0x2bcb5733cb32b111
	QUAD $0x2c0116805effaeaa // .quad 0x2c0116805effaeaa
	QUAD $0x2c355c2076bf9a55 // .quad 0x2c355c2076bf9a55
	QUAD $0x2c6ab328946f80ea // .quad 0x2c6ab328946f80ea
	QUAD $0x2ca0aff95cc5b092 // .quad 0x2ca0aff95cc5b092
	QUAD $0x2cd4dbf7b3f71cb7 // .quad 0x2cd4dbf7b3f71cb7
	QUAD $0x2d0a12f5a0f4e3e5 // .quad 0x2d0a12f5a0f4e3e5
	QUAD $0x2d404bd984990e6f // .quad 0x2d404bd984990e6f
	QUAD $0x2d745ecfe5bf520b // .quad 0x2d745ecfe5bf520b
	QUAD $0x2da97683df2f268d // .quad 0x2da97683df2f268d
	QUAD $0x2ddfd424d6faf031 // .quad 0x2ddfd424d6faf031
	QUAD $0x2e13e497065cd61f // .quad 0x2e13e497065cd61f
	QUAD $0x2e48ddbcc7f40ba6 // .quad 0x2e48ddbcc7f40ba6
	QUAD $0x2e7f152bf9f10e90 // .quad 0x2e7f152bf9f10e90
	QUAD $0x2eb36d3b7c36a91a // .quad 0x2eb36d3b7c36a91a
	QUAD $0x2ee8488a5b445360 // .quad 0x2ee8488a5b445360
	QUAD $0x2f1e5aacf2156838 // .quad 0x2f1e5aacf2156838
	QUAD $0x2f52f8ac174d6123 // .quad 0x2f52f8ac174d6123
	QUAD $0x2f87b6d71d20b96c // .quad 0x2f87b6d71d20b96c
	QUAD $0x2fbda48ce468e7c7 // .quad 0x2fbda48ce468e7c7
	QUAD $0x2ff286d80ec190dc // .quad 0x2ff286d80ec190dc
	QUAD $0x3027288e1271f513 // .quad 0x3027288e1271f513
	QUAD $0x305cf2b1970e7258 // .quad 0x305cf2b1970e7258
	QUAD $0x309217aefe690777 // .quad 0x309217aefe690777
	QUAD $0x30c69d9abe034955 // .quad 0x30c69d9abe034955
	QUAD $0x30fc45016d841baa // .quad 0x30fc45016d841baa
	QUAD $0x3131ab20e472914a // .quad 0x3131ab20e472914a
	QUAD $0x316615e91d8f359d // .quad 0x316615e91d8f359d
	QUAD $0x319b9b6364f30304 // .quad 0x319b9b6364f30304
	QUAD $0x31d1411e1f17e1e3 // .quad 0x31d1411e1f17e1e3
	QUAD $0x32059165a6ddda5b // .quad 0x32059165a6ddda5b
	QUAD $0x323af5bf109550f2 // .quad 0x323af5bf109550f2
	QUAD $0x3270d9976a5d5297 // .quad 0x3270d9976a5d5297
	QUAD $0x32a50ffd44f4a73d // .quad 0x32a50ffd44f4a73d
	QUAD $0x32da53fc9631d10d // .quad 0x32da53fc9631d10d
	QUAD $0x3310747ddddf22a8 // .quad 0x3310747ddddf22a8
	QUAD $0x3344919d5556eb52 // .quad 0x3344919d5556eb52
	QUAD $0x3379b604aaaca626 // .quad 0x3379b604aaaca626
	QUAD $0x33b011c2eaabe7d8 // .quad 0x33b011c2eaabe7d8
	QUAD $0x33e41633a556e1ce // .quad 0x33e41633a556e1ce
	QUAD $0x34191bc08eac9a41 // .quad 0x34191bc08eac9a41
	QUAD $0x344f62b0b257c0d2 // .quad 0x344f62b0b257c0d2
	QUAD $0x34839dae6f76d883 // .quad 0x34839dae6f76d883
	QUAD $0x34b8851a0b548ea4 // .quad 0x34b8851a0b548ea4
	QUAD $0x34eea6608e29b24d // .quad 0x34eea6608e29b24d
	QUAD $0x352327fc58da0f70 // .quad 0x352327fc58da0f70
	QUAD $0x3557f1fb6f10934c // .quad 0x3557f1fb6f10934c
	QUAD $0x358dee7a4ad4b81f // .quad 0x358dee7a4ad4b81f
	QUAD $0x35c2b50c6ec4f313 // .quad 0x35c2b50c6ec4f313
	QUAD $0x35f7624f8a762fd8 // .quad 0x35f7624f8a762fd8
	QUAD $0x362d3ae36d13bbce // .quad 0x362d3ae36d13bbce
	QUAD $0x366244ce242c5561 // .quad 0x366244ce242c5561
	QUAD $0x3696d601ad376ab9 // .quad 0x3696d601ad376ab9
	QUAD $0x36cc8b8218854567 // .quad 0x36cc8b8218854567
	QUAD $0x3701d7314f534b61 // .quad 0x3701d7314f534b61
	QUAD $0x37364cfda3281e39 // .quad 0x37364cfda3281e39
	QUAD $0x376be03d0bf225c7 // .quad 0x376be03d0bf225c7
	QUAD $0x37a16c262777579c // .quad 0x37a16c262777579c
	QUAD $0x37d5c72fb1552d83 // .quad 0x37d5c72fb1552d83
	QUAD $0x380b38fb9daa78e4 // .quad 0x380b38fb9daa78e4
	QUAD $0x3841039d428a8b8f // .quad 0x3841039d428a8b8f
	QUAD $0x38754484932d2e72 // .quad 0x38754484932d2e72
	QUAD $0x38aa95a5b7f87a0f // .quad 0x38aa95a5b7f87a0f
	QUAD $0x38e09d8792fb4c49 // .quad 0x38e09d8792fb4c49
	QUAD $0x3914c4e977ba1f5c // .quad 0x3914c4e977ba1f5c
	QUAD $0x3949f623d5a8a733 // .quad 0x3949f623d5a8a733
	QUAD $0x398039d665896880 // .quad 0x398039d665896880
	QUAD $0x39b4484bfeebc2a0 // .quad 0x39b4484bfeebc2a0
	QUAD $0x39e95a5efea6b347 // .quad 0x39e95a5efea6b347
	QUAD $0x3a1fb0f6be506019 // .quad 0x3a1fb0f6be506019
	QUAD $0x3a53ce9a36f23c10 // .quad 0x3a53ce9a36f23c10
	QUAD $0x3a88c240c4aecb14 // .quad 0x3a88c240c4aecb14
	QUAD $0x3abef2d0f5da7dd9 // .quad 0x3abef2d0f5da7dd9
	QUAD $0x3af357c299a88ea7 // .quad 0x3af357c299a88ea7
	QUAD $0x3b282db34012b251 // .quad 0x3b282db34012b251
	QUAD $0x3b5e392010175ee6 // .quad 0x3b5e392010175ee6
	QUAD $0x3b92e3b40a0e9b4f // .quad 0x3b92e3b40a0e9b4f
	QUAD $0x3bc79ca10c924223 // .quad 0x3bc79ca10c924223
	QUAD $0x3bfd83c94fb6d2ac // .quad 0x3bfd83c94fb6d2ac
	QUAD $0x3c32725dd1d243ac // .quad 0x3c32725dd1d243ac
	QUAD $0x3c670ef54646d497 // .quad 0x3c670ef54646d497
	QUAD $0x3c9cd2b297d889bc // .quad 0x3c9cd2b297d889bc
	QUAD $0x3cd203af9ee75616 // .quad 0x3cd203af9ee75616
	QUAD $0x3d06849b86a12b9b // .quad 0x3d06849b86a12b9b
	QUAD $0x3d3c25c268497682 // .quad 0x3d3c25c268497682
	QUAD $0x3d719799812dea11 // .quad 0x3d719799812dea11
	QUAD $0x3da5fd7fe1796495 // .quad 0x3da5fd7fe1796495
	QUAD $0x3ddb7cdfd9d7bdbb // .quad 0x3ddb7cdfd9d7bdbb
	QUAD $0x3e112e0be826d695 // .quad 0x3e112e0be826d695
	QUAD $0x3e45798ee2308c3a // .quad 0x3e45798ee2308c3a
	QUAD $0x3e7ad7f29abcaf48 // .quad 0x3e7ad7f29abcaf48
	QUAD $0x3eb0c6f7a0b5ed8d // .quad 0x3eb0c6f7a0b5ed8d
	QUAD $0x3ee4f8b588e368f1 // .quad 0x3ee4f8b588e368f1
	QUAD $0x3f1a36e2eb1c432d // .quad 0x3f1a36e2eb1c432d
	QUAD $0x3f50624dd2f1a9fc // .quad 0x3f50624dd2f1a9fc
	QUAD $0x3f847ae147ae147b // .quad 0x3f847ae147ae147b
	QUAD $0x3fb999999999999a // .quad 0x3fb999999999999a
	QUAD $0x3ff0000000000000 // .quad 0x3ff0000000000000
	QUAD $0x4024000000000000 // .quad 0x4024000000000000
	QUAD $0x4059000000000000 // .quad 0x4059000000000000
	QUAD $0x408f400000000000 // .quad 0x408f400000000000
	QUAD $0x40c3880000000000 // .quad 0x40c3880000000000
	QUAD $0x40f86a0000000000 // .quad 0x40f86a0000000000
	QUAD $0x412e848000000000 // .quad 0x412e848000000000
	QUAD $0x416312d000000000 // .quad 0x416312d000000000
	QUAD $0x4197d78400000000 // .quad 0x4197d78400000000
	QUAD $0x41cdcd6500000000 // .quad 0x41cdcd6500000000
	QUAD $0x4202a05f20000000 // .quad 0x4202a05f20000000
	QUAD $0x42374876e8000000 // .quad 0x42374876e8000000
	QUAD $0x426d1a94a2000000 // .quad 0x426d1a94a2000000
	QUAD $0x42a2309ce5400000 // .quad 0x42a2309ce5400000
	QUAD $0x42d6bcc41e900000 // .quad 0x42d6bcc41e900000
	QUAD $0x430c6bf526340000 // .quad 0x430c6bf526340000
	QUAD $0x4341c37937e08000 // .quad 0x4341c37937e08000
	QUAD $0x4376345785d8a000 // .quad 0x4376345785d8a000
	QUAD $0x43abc16d674ec800 // .quad 0x43abc16d674ec800
	QUAD $0x43e158e460913d00 // .quad 0x43e158e460913d00
	QUAD $0x4415af1d78b58c40 // .quad 0x4415af1d78b58c40
	QUAD $0x444b1ae4d6e2ef50 // .quad 0x444b1ae4d6e2ef50
	QUAD $0x4480f0cf064dd592 // .quad 0x4480f0cf064dd592
	QUAD $0x44b52d02c7e14af6 // .quad 0x44b52d02c7e14af6
	QUAD $0x44ea784379d99db4 // .quad 0x44ea784379d99db4
	QUAD $0x45208b2a2c280291 // .quad 0x45208b2a2c280291
	QUAD $0x4554adf4b7320335 // .quad 0x4554adf4b7320335
	QUAD $0x4589d971e4fe8402 // .quad 0x4589d971e4fe8402
	QUAD $0x45c027e72f1f1281 // .quad 0x45c027e72f1f1281
	QUAD $0x45f431e0fae6d721 // .quad 0x45f431e0fae6d721
	QUAD $0x46293e5939a08cea // .quad 0x46293e5939a08cea
	QUAD $0x465f8def8808b024 // .quad 0x465f8def8808b024
	QUAD $0x4693b8b5b5056e17 // .quad 0x4693b8b5b5056e17
	QUAD $0x46c8a6e32246c99c // .quad 0x46c8a6e32246c99c
	QUAD $0x46fed09bead87c03 // .quad 0x46fed09bead87c03
	QUAD $0x4733426172c74d82 // .quad 0x4733426172c74d82
	QUAD $0x476812f9cf7920e3 // .quad 0x476812f9cf7920e3
	QUAD $0x479e17b84357691b // .quad 0x479e17b84357691b
	QUAD $0x47d2ced32a16a1b1 // .quad 0x47d2ced32a16a1b1
	QUAD $0x48078287f49c4a1d // .quad 0x48078287f49c4a1d
	QUAD $0x483d6329f1c35ca5 // .quad 0x483d6329f1c35ca5
	QUAD $0x48725dfa371a19e7 // .quad 0x48725dfa371a19e7
	QUAD $0x48a6f578c4e0a061 // .quad 0x48a6f578c4e0a061
	QUAD $0x48dcb2d6f618c879 // .quad 0x48dcb2d6f618c879
	QUAD $0x4911efc659cf7d4c // .quad 0x4911efc659cf7d4c
	QUAD $0x49466bb7f0435c9e // .quad 0x49466bb7f0435c9e
	QUAD $0x497c06a5ec5433c6 // .quad 0x497c06a5ec5433c6
	QUAD $0x49b18427b3b4a05c // .quad 0x49b18427b3b4a05c
	QUAD $0x49e5e531a0a1c873 // .quad 0x49e5e531a0a1c873
	QUAD $0x4a1b5e7e08ca3a8f // .quad 0x4a1b5e7e08ca3a8f
	QUAD $0x4a511b0ec57e649a // .quad 0x4a511b0ec57e649a
	QUAD $0x4a8561d276ddfdc0 // .quad 0x4a8561d276ddfdc0
	QUAD $0x4ababa4714957d30 // .quad 0x4ababa4714957d30
	QUAD $0x4af0b46c6cdd6e3e // .quad 0x4af0b46c6cdd6e3e
	QUAD $0x4b24e1878814c9ce // .quad 0x4b24e1878814c9ce
	QUAD $0x4b5a19e96a19fc41 // .quad 0x4b5a19e96a19fc41
	QUAD $0x4b905031e2503da9 // .quad 0x4b905031e2503da9
	QUAD $0x4bc4643e5ae44d13 // .quad 0x4bc4643e5ae44d13
	QUAD $0x4bf97d4df19d6057 // .quad 0x4bf97d4df19d6057
	QUAD $0x4c2fdca16e04b86d // .quad 0x4c2fdca16e04b86d
	QUAD $0x4c63e9e4e4c2f344 // .quad 0x4c63e9e4e4c2f344
	QUAD $0x4c98e45e1df3b015 // .quad 0x4c98e45e1df3b015
	QUAD $0x4ccf1d75a5709c1b // .quad 0x4ccf1d75a5709c1b
	QUAD $0x4d03726987666191 // .quad 0x4d03726987666191
	QUAD $0x4d384f03e93ff9f5 // .quad 0x4d384f03e93ff9f5
	QUAD $0x4d6e62c4e38ff872 // .quad 0x4d6e62c4e38ff872
	QUAD $0x4da2fdbb0e39fb47 // .quad 0x4da2fdbb0e39fb47
	QUAD $0x4dd7bd29d1c87a19 // .quad 0x4dd7bd29d1c87a19
	QUAD $0x4e0dac74463a989f // .quad 0x4e0dac74463a989f
	QUAD $0x4e428bc8abe49f64 // .quad 0x4e428bc8abe49f64
	QUAD $0x4e772ebad6ddc73d // .quad 0x4e772ebad6ddc73d
	QUAD $0x4eacfa698c95390c // .quad 0x4eacfa698c95390c
	QUAD $0x4ee21c81f7dd43a7 // .quad 0x4ee21c81f7dd43a7
	QUAD $0x4f16a3a275d49491 // .quad 0x4f16a3a275d49491
	QUAD $0x4f4c4c8b1349b9b5 // .quad 0x4f4c4c8b1349b9b5
	QUAD $0x4f81afd6ec0e1411 // .quad 0x4f81afd6ec0e1411
	QUAD $0x4fb61bcca7119916 // .quad 0x4fb61bcca7119916
	QUAD $0x4feba2bfd0d5ff5b // .quad 0x4feba2bfd0d5ff5b
	QUAD $0x502145b7e285bf99 // .quad 0x502145b7e285bf99
	QUAD $0x50559725db272f7f // .quad 0x50559725db272f7f
	QUAD $0x508afcef51f0fb5f // .quad 0x508afcef51f0fb5f
	QUAD $0x50c0de1593369d1b // .quad 0x50c0de1593369d1b
	QUAD $0x50f5159af8044462 // .quad 0x50f5159af8044462
	QUAD $0x512a5b01b605557b // .quad 0x512a5b01b605557b
	QUAD $0x516078e111c3556d // .quad 0x516078e111c3556d
	QUAD $0x5194971956342ac8 // .quad 0x5194971956342ac8
	QUAD $0x51c9bcdfabc1357a // .quad 0x51c9bcdfabc1357a
	QUAD $0x5200160bcb58c16c // .quad 0x5200160bcb58c16c
	QUAD $0x52341b8ebe2ef1c7 // .quad 0x52341b8ebe2ef1c7
	QUAD $0x526922726dbaae39 // .quad 0x526922726dbaae39
	QUAD $0x529f6b0f092959c7 // .quad 0x529f6b0f092959c7
	QUAD $0x52d3a2e965b9d81d // .quad 0x52d3a2e965b9d81d
	QUAD $0x53088ba3bf284e24 // .quad 0x53088ba3bf284e24
	QUAD $0x533eae8caef261ad // .quad 0x533eae8caef261ad
	QUAD $0x53732d17ed577d0c // .quad 0x53732d17ed577d0c
	QUAD $0x53a7f85de8ad5c4f // .quad 0x53a7f85de8ad5c4f
	QUAD $0x53ddf67562d8b363 // .quad 0x53ddf67562d8b363
	QUAD $0x5412ba095dc7701e // .quad 0x5412ba095dc7701e
	QUAD $0x5447688bb5394c25 // .quad 0x5447688bb5394c25
	QUAD $0x547d42aea2879f2e // .quad 0x547d42aea2879f2e
	QUAD $0x54b249ad2594c37d // .quad 0x54b249ad2594c37d
	QUAD $0x54e6dc186ef9f45c // .quad 0x54e6dc186ef9f45c
	QUAD $0x551c931e8ab87173 // .quad 0x551c931e8ab87173
	QUAD $0x5551dbf316b346e8 // .quad 0x5551dbf316b346e8
	QUAD $0x558652efdc6018a2 // .quad 0x558652efdc6018a2
	QUAD $0x55bbe7abd3781eca // .quad 0x55bbe7abd3781eca
	QUAD $0x55f170cb642b133f // .quad 0x55f170cb642b133f
	QUAD $0x5625ccfe3d35d80e // .quad 0x5625ccfe3d35d80e
	QUAD $0x565b403dcc834e12 // .quad 0x565b403dcc834e12
	QUAD $0x569108269fd210cb // .quad 0x569108269fd210cb
	QUAD $0x56c54a3047c694fe // .quad 0x56c54a3047c694fe
	QUAD $0x56fa9cbc59b83a3d // .quad 0x56fa9cbc59b83a3d
	QUAD $0x5730a1f5b8132466 // .quad 0x5730a1f5b8132466
	QUAD $0x5764ca732617ed80 // .quad 0x5764ca732617ed80
	QUAD $0x5799fd0fef9de8e0 // .quad 0x5799fd0fef9de8e0
	QUAD $0x57d03e29f5c2b18c // .quad 0x57d03e29f5c2b18c
	QUAD $0x58044db473335def // .quad 0x58044db473335def
	QUAD $0x583961219000356b // .quad 0x583961219000356b
	QUAD $0x586fb969f40042c5 // .quad 0x586fb969f40042c5
	QUAD $0x58a3d3e2388029bb // .quad 0x58a3d3e2388029bb
	QUAD $0x58d8c8dac6a0342a // .quad 0x58d8c8dac6a0342a
	QUAD $0x590efb1178484135 // .quad 0x590efb1178484135
	QUAD $0x59435ceaeb2d28c1 // .quad 0x59435ceaeb2d28c1
	QUAD $0x59783425a5f872f1 // .quad 0x59783425a5f872f1
	QUAD $0x59ae412f0f768fad // .quad 0x59ae412f0f768fad
	QUAD $0x59e2e8bd69aa19cc // .quad 0x59e2e8bd69aa19cc
	QUAD $0x5a17a2ecc414a03f // .quad 0x5a17a2ecc414a03f
	QUAD $0x5a4d8ba7f519c84f // .quad 0x5a4d8ba7f519c84f
	QUAD $0x5a827748f9301d32 // .quad 0x5a827748f9301d32
	QUAD $0x5ab7151b377c247e // .quad 0x5ab7151b377c247e
	QUAD $0x5aecda62055b2d9e // .quad 0x5aecda62055b2d9e
	QUAD $0x5b22087d4358fc82 // .quad 0x5b22087d4358fc82
	QUAD $0x5b568a9c942f3ba3 // .quad 0x5b568a9c942f3ba3
	QUAD $0x5b8c2d43b93b0a8c // .quad 0x5b8c2d43b93b0a8c
	QUAD $0x5bc19c4a53c4e697 // .quad 0x5bc19c4a53c4e697
	QUAD $0x5bf6035ce8b6203d // .quad 0x5bf6035ce8b6203d
	QUAD $0x5c2b843422e3a84d // .quad 0x5c2b843422e3a84d
	QUAD $0x5c6132a095ce4930 // .quad 0x5c6132a095ce4930
	QUAD $0x5c957f48bb41db7c // .quad 0x5c957f48bb41db7c
	QUAD $0x5ccadf1aea12525b // .quad 0x5ccadf1aea12525b
	QUAD $0x5d00cb70d24b7379 // .quad 0x5d00cb70d24b7379
	QUAD $0x5d34fe4d06de5057 // .quad 0x5d34fe4d06de5057
	QUAD $0x5d6a3de04895e46d // .quad 0x5d6a3de04895e46d
	QUAD $0x5da066ac2d5daec4 // .quad 0x5da066ac2d5daec4
	QUAD $0x5dd4805738b51a75 // .quad 0x5dd4805738b51a75
	QUAD $0x5e09a06d06e26112 // .quad 0x5e09a06d06e26112
	QUAD $0x5e400444244d7cab // .quad 0x5e400444244d7cab
	QUAD $0x5e7405552d60dbd6 // .quad 0x5e7405552d60dbd6
	QUAD $0x5ea906aa78b912cc // .quad 0x5ea906aa78b912cc
	QUAD $0x5edf485516e7577f // .quad 0x5edf485516e7577f
	QUAD $0x5f138d352e5096af // .quad 0x5f138d352e5096af
	QUAD $0x5f48708279e4bc5b // .quad 0x5f48708279e4bc5b
	QUAD $0x5f7e8ca3185deb72 // .quad 0x5f7e8ca3185deb72
	QUAD $0x5fb317e5ef3ab327 // .quad 0x5fb317e5ef3ab327
	QUAD $0x5fe7dddf6b095ff1 // .quad 0x5fe7dddf6b095ff1
	QUAD $0x601dd55745cbb7ed // .quad 0x601dd55745cbb7ed
	QUAD $0x6052a5568b9f52f4 // .quad 0x6052a5568b9f52f4
	QUAD $0x60874eac2e8727b1 // .quad 0x60874eac2e8727b1
	QUAD $0x60bd22573a28f19d // .quad 0x60bd22573a28f19d
	QUAD $0x60f2357684599702 // .quad 0x60f2357684599702
	QUAD $0x6126c2d4256ffcc3 // .quad 0x6126c2d4256ffcc3
	QUAD $0x615c73892ecbfbf4 // .quad 0x615c73892ecbfbf4
	QUAD $0x6191c835bd3f7d78 // .quad 0x6191c835bd3f7d78
	QUAD $0x61c63a432c8f5cd6 // .quad 0x61c63a432c8f5cd6
	QUAD $0x61fbc8d3f7b3340c // .quad 0x61fbc8d3f7b3340c
	QUAD $0x62315d847ad00087 // .quad 0x62315d847ad00087
	QUAD $0x6265b4e5998400a9 // .quad 0x6265b4e5998400a9
	QUAD $0x629b221effe500d4 // .quad 0x629b221effe500d4
	QUAD $0x62d0f5535fef2084 // .quad 0x62d0f5535fef2084
	QUAD $0x630532a837eae8a5 // .quad 0x630532a837eae8a5
	QUAD $0x633a7f5245e5a2cf // .quad 0x633a7f5245e5a2cf
	QUAD $0x63708f936baf85c1 // .quad 0x63708f936baf85c1
	QUAD $0x63a4b378469b6732 // .quad 0x63a4b378469b6732
	QUAD $0x63d9e056584240fe // .quad 0x63d9e056584240fe
	QUAD $0x64102c35f729689f // .quad 0x64102c35f729689f
	QUAD $0x6444374374f3c2c6 // .quad 0x6444374374f3c2c6
	QUAD $0x647945145230b378 // .quad 0x647945145230b378
	QUAD $0x64af965966bce056 // .quad 0x64af965966bce056
	QUAD $0x64e3bdf7e0360c36 // .quad 0x64e3bdf7e0360c36
	QUAD $0x6518ad75d8438f43 // .quad 0x6518ad75d8438f43
	QUAD $0x654ed8d34e547314 // .quad 0x654ed8d34e547314
	QUAD $0x6583478410f4c7ec // .quad 0x6583478410f4c7ec
	QUAD $0x65b819651531f9e8 // .quad 0x65b819651531f9e8
	QUAD $0x65ee1fbe5a7e7861 // .quad 0x65ee1fbe5a7e7861
	QUAD $0x6622d3d6f88f0b3d // .quad 0x6622d3d6f88f0b3d
	QUAD $0x665788ccb6b2ce0c // .quad 0x665788ccb6b2ce0c
	QUAD $0x668d6affe45f818f // .quad 0x668d6affe45f818f
	QUAD $0x66c262dfeebbb0f9 // .quad 0x66c262dfeebbb0f9
	QUAD $0x66f6fb97ea6a9d38 // .quad 0x66f6fb97ea6a9d38
	QUAD $0x672cba7de5054486 // .quad 0x672cba7de5054486
	QUAD $0x6761f48eaf234ad4 // .quad 0x6761f48eaf234ad4
	QUAD $0x679671b25aec1d89 // .quad 0x679671b25aec1d89
	QUAD $0x67cc0e1ef1a724eb // .quad 0x67cc0e1ef1a724eb
	QUAD $0x680188d357087713 // .quad 0x680188d357087713
	QUAD $0x6835eb082cca94d7 // .quad 0x6835eb082cca94d7
	QUAD $0x686b65ca37fd3a0d // .quad 0x686b65ca37fd3a0d
	QUAD $0x68a11f9e62fe4448 // .quad 0x68a11f9e62fe4448
	QUAD $0x68d56785fbbdd55a // .quad 0x68d56785fbbdd55a
	QUAD $0x690ac1677aad4ab1 // .quad 0x690ac1677aad4ab1
	QUAD $0x6940b8e0acac4eaf // .quad 0x6940b8e0acac4eaf
	QUAD $0x6974e718d7d7625a // .quad 0x6974e718d7d7625a
	QUAD $0x69aa20df0dcd3af1 // .quad 0x69aa20df0dcd3af1
	QUAD $0x69e0548b68a044d6 // .quad 0x69e0548b68a044d6
	QUAD $0x6a1469ae42c8560c // .quad 0x6a1469ae42c8560c
	QUAD $0x6a498419d37a6b8f // .quad 0x6a498419d37a6b8f
	QUAD $0x6a7fe52048590673 // .quad 0x6a7fe52048590673
	QUAD $0x6ab3ef342d37a408 // .quad 0x6ab3ef342d37a408
	QUAD $0x6ae8eb0138858d0a // .quad 0x6ae8eb0138858d0a
	QUAD $0x6b1f25c186a6f04c // .quad 0x6b1f25c186a6f04c
	QUAD $0x6b537798f4285630 // .quad 0x6b537798f4285630
	QUAD $0x6b88557f31326bbb // .quad 0x6b88557f31326bbb
	QUAD $0x6bbe6adefd7f06aa // .quad 0x6bbe6adefd7f06aa
	QUAD $0x6bf302cb5e6f642a // .quad 0x6bf302cb5e6f642a
	QUAD $0x6c27c37e360b3d35 // .quad 0x6c27c37e360b3d35
	QUAD $0x6c5db45dc38e0c82 // .quad 0x6c5db45dc38e0c82
	QUAD $0x6c9290ba9a38c7d1 // .quad 0x6c9290ba9a38c7d1
	QUAD $0x6cc734e940c6f9c6 // .quad 0x6cc734e940c6f9c6
	QUAD $0x6cfd022390f8b837 // .quad 0x6cfd022390f8b837
	QUAD $0x6d3221563a9b7323 // .quad 0x6d3221563a9b7323
	QUAD $0x6d66a9abc9424feb // .quad 0x6d66a9abc9424feb
	QUAD $0x6d9c5416bb92e3e6 // .quad 0x6d9c5416bb92e3e6
	QUAD $0x6dd1b48e353bce70 // .quad 0x6dd1b48e353bce70
	QUAD $0x6e0621b1c28ac20c // .quad 0x6e0621b1c28ac20c
	QUAD $0x6e3baa1e332d728f // .quad 0x6e3baa1e332d728f
	QUAD $0x6e714a52dffc6799 // .quad 0x6e714a52dffc6799
	QUAD $0x6ea59ce797fb817f // .quad 0x6ea59ce797fb817f
	QUAD $0x6edb04217dfa61df // .quad 0x6edb04217dfa61df
	QUAD $0x6f10e294eebc7d2c // .quad 0x6f10e294eebc7d2c
	QUAD $0x6f451b3a2a6b9c76 // .quad 0x6f451b3a2a6b9c76
	QUAD $0x6f7a6208b5068394 // .quad 0x6f7a6208b5068394
	QUAD $0x6fb07d457124123d // .quad 0x6fb07d457124123d
	QUAD $0x6fe49c96cd6d16cc // .quad 0x6fe49c96cd6d16cc
	QUAD $0x7019c3bc80c85c7f // .quad 0x7019c3bc80c85c7f
	QUAD $0x70501a55d07d39cf // .quad 0x70501a55d07d39cf
	QUAD $0x708420eb449c8843 // .quad 0x708420eb449c8843
	QUAD $0x70b9292615c3aa54 // .quad 0x70b9292615c3aa54
	QUAD $0x70ef736f9b3494e9 // .quad 0x70ef736f9b3494e9
	QUAD $0x7123a825c100dd11 // .quad 0x7123a825c100dd11
	QUAD $0x7158922f31411456 // .quad 0x7158922f31411456
	QUAD $0x718eb6bafd91596b // .quad 0x718eb6bafd91596b
	QUAD $0x71c33234de7ad7e3 // .quad 0x71c33234de7ad7e3
	QUAD $0x71f7fec216198ddc // .quad 0x71f7fec216198ddc
	QUAD $0x722dfe729b9ff153 // .quad 0x722dfe729b9ff153
	QUAD $0x7262bf07a143f6d4 // .quad 0x7262bf07a143f6d4
	QUAD $0x72976ec98994f489 // .quad 0x72976ec98994f489
	QUAD $0x72cd4a7bebfa31ab // .quad 0x72cd4a7bebfa31ab
	QUAD $0x73024e8d737c5f0b // .quad 0x73024e8d737c5f0b
	QUAD $0x7336e230d05b76cd // .quad 0x7336e230d05b76cd
	QUAD $0x736c9abd04725481 // .quad 0x736c9abd04725481
	QUAD $0x73a1e0b622c774d0 // .quad 0x73a1e0b622c774d0
	QUAD $0x73d658e3ab795204 // .quad 0x73d658e3ab795204
	QUAD $0x740bef1c9657a686 // .quad 0x740bef1c9657a686
	QUAD $0x74417571ddf6c814 // .quad 0x74417571ddf6c814
	QUAD $0x7475d2ce55747a18 // .quad 0x7475d2ce55747a18
	QUAD $0x74ab4781ead1989e // .quad 0x74ab4781ead1989e
	QUAD $0x74e10cb132c2ff63 // .quad 0x74e10cb132c2ff63
	QUAD $0x75154fdd7f73bf3c // .quad 0x75154fdd7f73bf3c
	QUAD $0x754aa3d4df50af0b // .quad 0x754aa3d4df50af0b
	QUAD $0x7580a6650b926d67 // .quad 0x7580a6650b926d67
	QUAD $0x75b4cffe4e7708c0 // .quad 0x75b4cffe4e7708c0
	QUAD $0x75ea03fde214caf1 // .quad 0x75ea03fde214caf1
	QUAD $0x7620427ead4cfed6 // .quad 0x7620427ead4cfed6
	QUAD $0x7654531e58a03e8c // .quad 0x7654531e58a03e8c
	QUAD $0x768967e5eec84e2f // .quad 0x768967e5eec84e2f
	QUAD $0x76bfc1df6a7a61bb // .quad 0x76bfc1df6a7a61bb
	QUAD $0x76f3d92ba28c7d15 // .quad 0x76f3d92ba28c7d15
	QUAD $0x7728cf768b2f9c5a // .quad 0x7728cf768b2f9c5a
	QUAD $0x775f03542dfb8370 // .quad 0x775f03542dfb8370
	QUAD $0x779362149cbd3226 // .quad 0x779362149cbd3226
	QUAD $0x77c83a99c3ec7eb0 // .quad 0x77c83a99c3ec7eb0
	QUAD $0x77fe494034e79e5c // .quad 0x77fe494034e79e5c
	QUAD $0x7832edc82110c2f9 // .quad 0x7832edc82110c2f9
	QUAD $0x7867a93a2954f3b8 // .quad 0x7867a93a2954f3b8
	QUAD $0x789d9388b3aa30a5 // .quad 0x789d9388b3aa30a5
	QUAD $0x78d27c35704a5e67 // .quad 0x78d27c35704a5e67
	QUAD $0x79071b42cc5cf601 // .quad 0x79071b42cc5cf601
	QUAD $0x793ce2137f743382 // .quad 0x793ce2137f743382
	QUAD $0x79720d4c2fa8a031 // .quad 0x79720d4c2fa8a031
	QUAD $0x79a6909f3b92c83d // .quad 0x79a6909f3b92c83d
	QUAD $0x79dc34c70a777a4d // .quad 0x79dc34c70a777a4d
	QUAD $0x7a11a0fc668aac70 // .quad 0x7a11a0fc668aac70
	QUAD $0x7a46093b802d578c // .quad 0x7a46093b802d578c
	QUAD $0x7a7b8b8a6038ad6f // .quad 0x7a7b8b8a6038ad6f
	QUAD $0x7ab137367c236c65 // .quad 0x7ab137367c236c65
	QUAD $0x7ae585041b2c477f // .quad 0x7ae585041b2c477f
	QUAD $0x7b1ae64521f7595e // .quad 0x7b1ae64521f7595e
	QUAD $0x7b50cfeb353a97db // .quad 0x7b50cfeb353a97db
	QUAD $0x7b8503e602893dd2 // .quad 0x7b8503e602893dd2
	QUAD $0x7bba44df832b8d46 // .quad 0x7bba44df832b8d46
	QUAD $0x7bf06b0bb1fb384c // .quad 0x7bf06b0bb1fb384c
	QUAD $0x7c2485ce9e7a065f // .quad 0x7c2485ce9e7a065f
	QUAD $0x7c59a742461887f6 // .quad 0x7c59a742461887f6
	QUAD $0x7c9008896bcf54fa // .quad 0x7c9008896bcf54fa
	QUAD $0x7cc40aabc6c32a38 // .quad 0x7cc40aabc6c32a38
	QUAD $0x7cf90d56b873f4c7 // .quad 0x7cf90d56b873f4c7
	QUAD $0x7d2f50ac6690f1f8 // .quad 0x7d2f50ac6690f1f8
	QUAD $0x7d63926bc01a973b // .quad 0x7d63926bc01a973b
	QUAD $0x7d987706b0213d0a // .quad 0x7d987706b0213d0a
	QUAD $0x7dce94c85c298c4c // .quad 0x7dce94c85c298c4c
	QUAD $0x7e031cfd3999f7b0 // .quad 0x7e031cfd3999f7b0
	QUAD $0x7e37e43c8800759c // .quad 0x7e37e43c8800759c
	QUAD $0x7e6ddd4baa009303 // .quad 0x7e6ddd4baa009303
	QUAD $0x7ea2aa4f4a405be2 // .quad 0x7ea2aa4f4a405be2
	QUAD $0x7ed754e31cd072da // .quad 0x7ed754e31cd072da
	QUAD $0x7f0d2a1be4048f90 // .quad 0x7f0d2a1be4048f90
	QUAD $0x7f423a516e82d9ba // .quad 0x7f423a516e82d9ba
	QUAD $0x7f76c8e5ca239029 // .quad 0x7f76c8e5ca239029
	QUAD $0x7fac7b1f3cac7433 // .quad 0x7fac7b1f3cac7433
	QUAD $0x7fe1ccf385ebc8a0 // .quad 0x7fe1ccf385ebc8a0

TEXT Â·__f64toa(SB), NOSPLIT, $0 - 24
	MOVQ  out+0(FP), DI
	MOVOU val+8(FP), X0
	CALL  Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___+2953(SB) // _f64toa
	MOVQ  AX, ret+16(FP)
	RET

TEXT Â·__i64toa(SB), NOSPLIT, $0 - 24
	MOVQ out+0(FP), DI
	MOVQ val+8(FP), SI
	CALL Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___+6042(SB) // _i64toa
	MOVQ AX, ret+16(FP)
	RET

TEXT Â·__lquote(SB), NOSPLIT, $0 - 24
	MOVQ buf+0(FP), DI
	MOVQ off+8(FP), SI
	CALL Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___+384(SB) // _lquote
	MOVQ AX, ret+16(FP)
	RET

TEXT Â·__lspace(SB), NOSPLIT, $0 - 32
	MOVQ sp+0(FP), DI
	MOVQ nb+8(FP), SI
	MOVQ off+16(FP), DX
	CALL Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___+1266(SB) // _lspace
	MOVQ AX, ret+24(FP)
	RET

TEXT Â·__lzero(SB), NOSPLIT, $0 - 24
	MOVQ p+0(FP), DI
	MOVQ n+8(FP), SI
	CALL Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___+0(SB) // _lzero
	MOVQ AX, ret+16(FP)
	RET

TEXT Â·__skip_array(SB), NOSPLIT, $0 - 32
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ m+16(FP), DX
	CALL Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___+14398(SB) // _skip_array
	MOVQ AX, ret+24(FP)
	RET

TEXT Â·__skip_object(SB), NOSPLIT, $0 - 32
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ m+16(FP), DX
	CALL Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___+14433(SB) // _skip_object
	MOVQ AX, ret+24(FP)
	RET

TEXT Â·__skip_one(SB), NOSPLIT, $0 - 32
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ m+16(FP), DX
	CALL Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___+12845(SB) // _skip_one
	MOVQ AX, ret+24(FP)
	RET

TEXT Â·__u64toa(SB), NOSPLIT, $0 - 24
	MOVQ out+0(FP), DI
	MOVQ val+8(FP), SI
	CALL Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___+6135(SB) // _u64toa
	MOVQ AX, ret+16(FP)
	RET

TEXT Â·__unquote(SB), NOSPLIT, $0 - 48
	MOVQ s+0(FP), DI
	MOVQ nb+8(FP), SI
	MOVQ dp+16(FP), DX
	MOVQ ep+24(FP), CX
	MOVQ flags+32(FP), R8
	CALL Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___+7356(SB) // _unquote
	MOVQ AX, ret+40(FP)
	RET

TEXT Â·__value(SB), NOSPLIT, $0 - 40
	MOVQ s+0(FP), DI
	MOVQ n+8(FP), SI
	MOVQ p+16(FP), DX
	MOVQ v+24(FP), CX
	CALL Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___+9076(SB) // _value
	MOVQ AX, ret+32(FP)
	RET

TEXT Â·__vnumber(SB), NOSPLIT, $0 - 24
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ v+16(FP), DX
	LEAQ Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___+11325(SB), AX // _vnumber
	JMP  AX

TEXT Â·__vsigned(SB), NOSPLIT, $0 - 24
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ v+16(FP), DX
	LEAQ Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___+12295(SB), AX // _vsigned
	JMP  AX

TEXT Â·__vstring(SB), NOSPLIT, $0 - 24
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ v+16(FP), DX
	LEAQ Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___+10096(SB), AX // _vstring
	JMP  AX

TEXT Â·__vunsigned(SB), NOSPLIT, $0 - 24
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ v+16(FP), DX
	LEAQ Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___+12572(SB), AX // _vunsigned
	JMP  AX
